<!DOCTYPE html>
<html class="no-js" lang="en-US">
	<head>
				<link rel="profile" href="http://gmpg.org/xfn/11" />
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		
		<title>ruby unit test frameworks &laquo; the evolving ultrasaurus</title>
		
				<meta name='robots' content='max-image-preview:large' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="the evolving ultrasaurus &raquo; Feed" href="https://www.ultrasaurus.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="the evolving ultrasaurus &raquo; Comments Feed" href="https://www.ultrasaurus.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="the evolving ultrasaurus &raquo; ruby unit test frameworks Comments Feed" href="https://www.ultrasaurus.com/2009/08/ruby-unit-test-frameworks/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.0.1\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.0.1\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/www.ultrasaurus.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=5.7.1"}};
			!function(e,a,t){var n,r,o,i=a.createElement("canvas"),p=i.getContext&&i.getContext("2d");function s(e,t){var a=String.fromCharCode;p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,e),0,0);e=i.toDataURL();return p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,t),0,0),e===i.toDataURL()}function c(e){var t=a.createElement("script");t.src=e,t.defer=t.type="text/javascript",a.getElementsByTagName("head")[0].appendChild(t)}for(o=Array("flag","emoji"),t.supports={everything:!0,everythingExceptFlag:!0},r=0;r<o.length;r++)t.supports[o[r]]=function(e){if(!p||!p.fillText)return!1;switch(p.textBaseline="top",p.font="600 32px Arial",e){case"flag":return s([127987,65039,8205,9895,65039],[127987,65039,8203,9895,65039])?!1:!s([55356,56826,55356,56819],[55356,56826,8203,55356,56819])&&!s([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]);case"emoji":return!s([55357,56424,8205,55356,57212],[55357,56424,8203,55356,57212])}return!1}(o[r]),t.supports.everything=t.supports.everything&&t.supports[o[r]],"flag"!==o[r]&&(t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&t.supports[o[r]]);t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&!t.supports.flag,t.DOMReady=!1,t.readyCallback=function(){t.DOMReady=!0},t.supports.everything||(n=function(){t.readyCallback()},a.addEventListener?(a.addEventListener("DOMContentLoaded",n,!1),e.addEventListener("load",n,!1)):(e.attachEvent("onload",n),a.attachEvent("onreadystatechange",function(){"complete"===a.readyState&&t.readyCallback()})),(n=t.source||{}).concatemoji?c(n.concatemoji):n.wpemoji&&n.twemoji&&(c(n.twemoji),c(n.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<link rel='stylesheet' id='mailchimpSF_main_css-css'  href='https://www.ultrasaurus.com/?mcsf_action=main_css&#038;ver=5.7.1' type='text/css' media='all' />
<!--[if IE]>
<link rel='stylesheet' id='mailchimpSF_ie_css-css'  href='https://www.ultrasaurus.com/wp-content/plugins/mailchimp/css/ie.css?ver=5.7.1' type='text/css' media='all' />
<![endif]-->
<link rel='stylesheet' id='wp-block-library-css'  href='https://www.ultrasaurus.com/wp-includes/css/dist/block-library/style.min.css?ver=5.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='tw-bootstrap-css'  href='https://www.ultrasaurus.com/wp-content/themes/the-bootstrap/css/bootstrap.min.css?ver=2.0.3' type='text/css' media='all' />
<link rel='stylesheet' id='the-bootstrap-css'  href='https://www.ultrasaurus.com/wp-content/themes/the-bootstrap/style.min.css?ver=2.0.1' type='text/css' media='all' />
<style id='the-bootstrap-inline-css' type='text/css'>
body > .container{margin-top:68px;}@media(min-width: 980px){body > .container{margin-top:58px;}}
</style>
<script type='text/javascript' src='https://www.ultrasaurus.com/wp-includes/js/jquery/jquery.min.js?ver=3.5.1' id='jquery-core-js'></script>
<script type='text/javascript' src='https://www.ultrasaurus.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.3.2' id='jquery-migrate-js'></script>
<script type='text/javascript' src='https://www.ultrasaurus.com/wp-content/plugins/google-analyticator/external-tracking.min.js?ver=6.5.4' id='ga-external-tracking-js'></script>
<link rel="https://api.w.org/" href="https://www.ultrasaurus.com/wp-json/" /><link rel="alternate" type="application/json" href="https://www.ultrasaurus.com/wp-json/wp/v2/posts/1997" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://www.ultrasaurus.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://www.ultrasaurus.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 5.7.1" />
<link rel="canonical" href="https://www.ultrasaurus.com/2009/08/ruby-unit-test-frameworks/" />
<link rel='shortlink' href='https://www.ultrasaurus.com/?p=1997' />
<link rel="alternate" type="application/json+oembed" href="https://www.ultrasaurus.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.ultrasaurus.com%2F2009%2F08%2Fruby-unit-test-frameworks%2F" />
<link rel="alternate" type="text/xml+oembed" href="https://www.ultrasaurus.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.ultrasaurus.com%2F2009%2F08%2Fruby-unit-test-frameworks%2F&#038;format=xml" />
<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>	<style type="text/css">
				#branding hgroup {
			position: absolute !important;
			clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
			clip: rect(1px, 1px, 1px, 1px);
		}
			</style>
		<!--[if lt IE 9]>
		<script src="https://www.ultrasaurus.com/wp-content/themes/the-bootstrap/js/html5shiv.min.js" type="text/javascript"></script>
		<script src="https://www.ultrasaurus.com/wp-content/themes/the-bootstrap/js/respond.min.js" type="text/javascript"></script>
	<![endif]-->
	<!-- Google Analytics Tracking by Google Analyticator 6.5.4: http://www.videousermanuals.com/google-analyticator/ -->
<script type="text/javascript">
    var analyticsFileTypes = [''];
    var analyticsSnippet = 'enabled';
    var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
  
	_gaq.push(['_setAccount', 'UA-4313619-1']);
    _gaq.push(['_addDevId', 'i9k95']); // Google Analyticator App ID with Google
    _gaq.push(['_gat._anonymizeIp']);
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
		<style type="text/css" id="wp-custom-css">
			code {
	color: #70a
}

p {
	color: #333
}

blockquote p {
	font-size: 14px;
	font-weight: normal;
	padding-top: 6px;
	padding-bottom: 6px;
	padding-left: 10px;
	padding-right: 60px;
	line-height: 1.2;
}		</style>
			</head>
	
	<body class="post-template-default single single-post postid-1997 single-format-standard content-sidebar">
		<div class="container">
			<div id="page" class="hfeed row">
								<header id="branding" role="banner" class="span12">
										<hgroup>
						<h1 id="site-title">
							<a href="https://www.ultrasaurus.com/" title="the evolving ultrasaurus" rel="home">
								<span>the evolving ultrasaurus</span>
							</a>
						</h1>
						<h2 id="site-description">Sarah Allen&#039;s reflections on internet software and other topics</h2>
					</hgroup>
					
					
					<nav id="access" role="navigation">
						<h3 class="assistive-text">Main menu</h3>
						<div class="skip-link"><a class="assistive-text" href="#content" title="Skip to primary content">Skip to primary content</a></div>
						<div class="skip-link"><a class="assistive-text" href="#secondary" title="Skip to secondary content">Skip to secondary content</a></div>
												<div class="navbar navbar-fixed-top navbar-inverse">
							<div class="navbar-inner">
								<div class="container">
									<!-- .btn-navbar is used as the toggle for collapsed navbar content -->
									<a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
										<span class="icon-bar"></span>
										<span class="icon-bar"></span>
										<span class="icon-bar"></span>
									</a>
																		<span class="brand">the evolving ultrasaurus</span>
																		<div class="nav-collapse">
										<div class="menu-primary-container"><ul id="menu-primary" class="nav"><li id="menu-item-4272" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4272"><a href="https://www.ultrasaurus.com/about/">About</a></li>
<li id="menu-item-6605" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6605"><a href="https://www.ultrasaurus.com/speaking/">Speaking</a></li>
<li id="menu-item-6366" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-6366"><a href="https://www.ultrasaurus.com/code/">Code</a></li>
<li id="menu-item-4269" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4269"><a href="https://www.ultrasaurus.com/archives/">Archives</a></li>
<li id="menu-item-4759" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4759"><a href="https://www.ultrasaurus.com/contact/">Contact</a></li>
<li id="menu-item-4697" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4697"><a href="https://www.ultrasaurus.com/ultrasaurus/">What is an ultrasaurus?</a></li>
</ul></div>	<form id="searchform" class="navbar-search pull-right" method="get" action="https://www.ultrasaurus.com/">
						<label for="s" class="assistive-text hidden">Search</label>
						<input type="search" class="search-query" name="s" id="s" placeholder="Search" />
					</form>								    </div>
								</div>
							</div>
						</div>
											</nav><!-- #access -->
									</header><!-- #branding -->
<section id="primary" class="span8">
	
		<div id="content" role="main">
		<article id="post-1997" class="post-1997 post type-post status-publish format-standard hentry category-code">
		
	<header class="page-header">
		<h1 class="entry-title">ruby unit test frameworks</h1>		<div class="entry-meta"><span class="sep">Posted on </span><a href="https://www.ultrasaurus.com/2009/08/ruby-unit-test-frameworks/" title="6:59 am" rel="bookmark"><time class="entry-date" datetime="2009-08-31T06:59:46-07:00" pubdate>August 31, 2009</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="https://www.ultrasaurus.com/author/sarah/" title="View all posts by sarah" rel="author">sarah</a></span></span>		<span class="sep"> | </span>
		<span class="comments-link">
			<a href="https://www.ultrasaurus.com/2009/08/ruby-unit-test-frameworks/#comments"><strong>12</strong> Replies</a>		</span>
		</div><!-- .entry-meta -->
	</header><!-- .entry-header -->

	<div class="entry-content clearfix">
		<p>In preparation for teaching Ruby in a class with <a href="https://www.ultrasaurus.com/sarahblog/2009/08/test-driven-teaching/">test first teaching</a>.  I decided to evaluate a few test frameworks.  I thought initially to use Test::Unit, since it seemed easy to understand and ships with Rails.  Wolfram Arnold argued that Test::Unit would <a href="http://twitter.com/wolframarnold/status/3336210949">burden the new folks with legacy</a>.  Alex Chaffee also <a href="http://twitter.com/alexch/status/3320591021">advocated RSpec</a>, but <a href="http://twitter.com/jacobrothstein/status/3320555832">other</a> <a href="http://twitter.com/jamieflournoy/status/3323143202">friends</a> from the Twittervese had good things to say about shoulda.  Some folks declared it to be simply a <a href="http://twitter.com/noelrap/status/3319780641">matter of taste</a>.</p>
<p>Even so, I wanted to make an informed decision and refine my palette for Ruby tools, so I wrote a simple exercise in each of Test::Unit, Shoulda and RSpec.</p>
<h2>Test::Unit</h2>
<pre>
require 'test/unit'
require 'pig_latin'
 
class PigLatinTest &lt; Test::Unit::TestCase
    include PigLatinTranslator
 
    def test_simple_word
        s = translate(&quot;nix&quot;)
        assert_equal(&quot;ixnay&quot;, s)
    end
 
    def test_word_beginning_with_vowel
        s = translate(&quot;apple&quot;)
        assert_equal(&quot;appleay&quot;, s)
    end
 
    def test_two_consonant_word
        s = translate(&quot;stupid&quot;)
        assert_equal(&quot;upidstay&quot;, s)
    end
end
</pre>
<p>With the above code saved as &#8220;test_pig_latin.rb&#8221; you run it by simply executing it with Ruby.</p>
<pre>$ ruby test_pig_latin.rb
Loaded suite test_pig_latin
Started
FFF
Finished in 0.01091 seconds.

  1) Failure:
test_simple_word(PigLatinTest) [test_pig_latin.rb:9]:
 expected but was
.

  2) Failure:
test_two_consonant_word(PigLatinTest) [test_pig_latin.rb:19]:
 expected but was
.

  3) Failure:
test_word_beginning_with_vowel(PigLatinTest) [test_pig_latin.rb:14]:
 expected but was
.

3 tests, 3 assertions, 3 failures, 0 errors
</pre>
<hr />
<h2>Shoulda</h2>
<p>Notice in the code below that Shoulda is simply and extension to Test::Unit.  The PigLatinTest also subclasses Test::Unit::TestCase, just as the example above; however, the code inside the test case looks substantially different (and more readable in my opinion).  You can actually mix Shoulda tests (below) with regular TestCase test methods (above) in the same TestCase.  This is an advantage to Shoulda over RSpec if you have a codebase that already has lots of unit tests; however, I have also used RSpec and Test::Unit in the same project (you just have to remember to &#8216;rake test&#8217; and &#8216;rake spec&#8217;).</p>
<pre>require 'rubygems'
require 'shoulda'
require 'pig_latin'

class PigLatinTest &lt; Test::Unit::TestCase
  include PigLatinTranslator

  context "#translate" do

    should "translate a simple word: nix" do
      s = translate("nix")
      assert_equal("ixnay", s)
    end

    should "translate a word beginning with a vowel: apple" do
      s = translate("apple")
      assert_equal("appleay", s)
    end

    should "translate a two consonent word: stupid" do
      s = translate("stupid")
      assert_equal("upidstay", s)
    end

  end
end</pre>
<p>With the code above saved as &#8220;test_shoulda_pig_latin.rb&#8221; you use the same process as above by just executing the file with ruby.</p>
<pre>$ ruby test_shoulda_pig_latin.rb
Loaded suite test_shoulda_pig_latin
Started
FFF
Finished in 0.008268 seconds.

 1) Failure:
test: #translate should translate a simple word. (PigLatinTest)
 [test_shoulda_pig_latin.rb:12:in `__bind_1251676444_52936'
 /Library/Ruby/Gems/1.8/gems/thoughtbot-shoulda-2.10.2/lib/shoulda/context.rb:351:in `call'
 /Library/Ruby/Gems/1.8/gems/thoughtbot-shoulda-2.10.2/lib/shoulda/context.rb:351:in `test: #translate should translate a simple word. ']:
&lt;"ixnay"&gt; expected but was
&lt;"translation"&gt;.

 2) Failure:
test: #translate should translate a two consonent word. (PigLatinTest)
 [test_shoulda_pig_latin.rb:22:in `__bind_1251676444_58860'
 /Library/Ruby/Gems/1.8/gems/thoughtbot-shoulda-2.10.2/lib/shoulda/context.rb:351:in `call'
 /Library/Ruby/Gems/1.8/gems/thoughtbot-shoulda-2.10.2/lib/shoulda/context.rb:351:in `test: #translate should translate a two consonent word. ']:
&lt;"upidstay"&gt; expected but was
&lt;"translation"&gt;.

 3) Failure:
test: #translate should translate a word beginning with a vowel. (PigLatinTest)
 [test_shoulda_pig_latin.rb:17:in `__bind_1251676444_59935'
 /Library/Ruby/Gems/1.8/gems/thoughtbot-shoulda-2.10.2/lib/shoulda/context.rb:351:in `call'
 /Library/Ruby/Gems/1.8/gems/thoughtbot-shoulda-2.10.2/lib/shoulda/context.rb:351:in `test: #translate should translate a word beginning with a vowel. ']:
&lt;"appleay"&gt; expected but was
&lt;"translation"&gt;.

3 tests, 3 assertions, 3 failures, 0 errors</pre>
<hr />
<h2>RSpec</h2>
<pre>require "pig_latin"

describe "#translate" do
  include PigLatinTranslator

  it "should translate a simple word" do
    s = translate("nix")
    s.should == "ixnay"
  end

  it "should translate a word beginning with a vowel" do
    pending
    s = translate("apple")
    s.should == "appleay"
  end

  it "should translate a two consonent word: stupid" do
    pending
    s = translate("stupid")
    s.should == "upidstay"
  end

end</pre>
<p>The code above is saved in a file called &#8220;pig_latin_spec.rb&#8221; and run it using the &#8216;spec&#8217; command.  You will need to have installed the rspec gem (sudo gem install rspec).</p>
<pre>$ spec pig_latin_spec.rb
F**

Pending:

#translate should translate a word beginning with a vowel (TODO)
./pig_latin_spec.rb:11

#translate should translate a two consonent word: stupid (TODO)
./pig_latin_spec.rb:17

1)
'#translate should translate a simple word' FAILED
expected: "ixnay",
     got: "translation" (using ==)
./pig_latin_spec.rb:8:

Finished in 0.035728 seconds

3 examples, 1 failure, 2 pending</pre>
<h2>Conclusion</h2>
<p>I like RSpec best since I find the output to be most readable.  I love the pending keyword, which allows me to set up the tests as an exercise for the class with only one test failing. I find it helps focus on exactly one test and one failure.   I considered going with Shoulda because the tests are just as readable as RSpec, even if the output takes some learning to read, because of my initial thought that Test::Unit held less magic.  However, on closer inspection, I realized that Test::Unit has one significant magical incantation:  you merely declare a class and when that class is defined, it runs the test.  This seemed not the kind of topic I would want to teach in an intro class.  Even some experienced programmers might struggle with understanding the mechanism that allows such a construct to function.  I concluded that all of the test frameworks require serious magic, and picked RSpec since I found it to be most usable for test writing and analysis of the output.</p>
<p>Caveat: this exercise was for pure Ruby.  In Rails, I wonder if Shoulda tests would be more concise, making them easier to write and read and, therefore, making it worth the steeper learning curve on reading the output.  </p>
	</div><!-- .entry-content -->

	<footer class="entry-footer">
		<span class="cat-links block">Posted in <a href="https://www.ultrasaurus.com/category/code/" rel="category tag">code</a>.</span>	</footer><!-- .entry-footer -->
	
	</article><!-- #post-1997 -->
		<div id="comments">
			<h2 id="comments-title">
				12 thoughts on &ldquo;<span>ruby unit test frameworks</span>&rdquo;			</h2>
		
					
			<ol class="commentlist unstyled">
						
		<li  id="li-comment-600" class="comment even thread-even depth-1">
			<article id="comment-600" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/5ebceb0f442465818b3d1782826f1cb7?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/5ebceb0f442465818b3d1782826f1cb7?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn"><a href='http://matthewlang.co.uk' rel='external nofollow ugc' class='url'>Matthew Lang</a></span> <span class="says">said</span> on <a href="https://www.ultrasaurus.com/2009/08/ruby-unit-test-frameworks/#comment-600"><time pubdate datetime="2009-08-31T13:23:48-07:00">August 31, 2009 at 1:23 pm</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>I always find myself sticking to Test::Unit just because it&#8217;s included with Ruby by default. I think once I&#8217;ve mastered the ins and outs of Test::Unit, then I&#8217;ll move onto something like Shoulda or RSpec.</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-600 .comment -->
			
	</li><!-- #comment-## -->
		
		<li  id="li-comment-601" class="comment odd alt thread-odd thread-alt depth-1">
			<article id="comment-601" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/62c5d5ead0c0c5d6a399f64f98468d83?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/62c5d5ead0c0c5d6a399f64f98468d83?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn"><a href='http://sharegrove.com' rel='external nofollow ugc' class='url'>Adam Wolff</a></span> <span class="says">said</span> on <a href="https://www.ultrasaurus.com/2009/08/ruby-unit-test-frameworks/#comment-601"><time pubdate datetime="2009-08-31T16:28:21-07:00">August 31, 2009 at 4:28 pm</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>I guess my pig-latin is rusty. I thought that would be<br />
  it &#8220;should translate a word beginning with a vowel&#8221; do<br />
    pending<br />
    s = translate(&#8220;apple&#8221;)<br />
    s.should == &#8220;applevay&#8221;<br />
  end</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-601 .comment -->
			
	</li><!-- #comment-## -->
		
		<li  id="li-comment-602" class="comment even thread-even depth-1">
			<article id="comment-602" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/20ee0d23c969c7740d3c936a4675bb23?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/20ee0d23c969c7740d3c936a4675bb23?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn"><a href='https://www.ultrasaurus.com' rel='external nofollow ugc' class='url'>Sarah</a></span> <span class="says">said</span> on <a href="https://www.ultrasaurus.com/2009/08/ruby-unit-test-frameworks/#comment-602"><time pubdate datetime="2009-08-31T19:48:45-07:00">August 31, 2009 at 7:48 pm</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>Wow.  That&#8217;s a different dialect than I learned.  Wikipedia notes that there are different consonants used in different dialects:</p>
<p>&#8220;In words that begin with vowel sounds or silent consonants, the syllable &#8220;ay&#8221; is added to the end of the word. In some dialects, to aid in pronunciation, an extra consonant is added to the beginning of the suffix; for instance, eagle could yield eagle&#8217;yay, eagle&#8217;way, or eagle&#8217;hay.&#8221;</p>
<p><a href="http://en.wikipedia.org/wiki/Pig_Latin#Rules_and_variations" rel="nofollow ugc">http://en.wikipedia.org/wiki/Pig_Latin#Rules_and_variations</a></p>
				</div><!-- .comment-content -->
			</article><!-- #comment-602 .comment -->
			
	</li><!-- #comment-## -->
		
		<li  id="li-comment-603" class="comment odd alt thread-odd thread-alt depth-1">
			<article id="comment-603" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/20ee0d23c969c7740d3c936a4675bb23?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/20ee0d23c969c7740d3c936a4675bb23?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn"><a href='https://www.ultrasaurus.com' rel='external nofollow ugc' class='url'>Sarah</a></span> <span class="says">said</span> on <a href="https://www.ultrasaurus.com/2009/08/ruby-unit-test-frameworks/#comment-603"><time pubdate datetime="2009-08-31T19:55:03-07:00">August 31, 2009 at 7:55 pm</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>If anyone wants to experiment with the files at home, I posted them on github: <a href="http://github.com/ultrasaurus/test-framework-comparison/tree/master" rel="nofollow ugc">http://github.com/ultrasaurus/test-framework-comparison/tree/master</a></p>
				</div><!-- .comment-content -->
			</article><!-- #comment-603 .comment -->
			
	</li><!-- #comment-## -->
		
		<li  id="li-comment-604" class="comment even thread-even depth-1">
			<article id="comment-604" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/788fe1ab28b0c0679fa802edd698b01c?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/788fe1ab28b0c0679fa802edd698b01c?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn"><a href='http://jdfrens.blogspot.com/' rel='external nofollow ugc' class='url'>Jeremy D. Frens</a></span> <span class="says">said</span> on <a href="https://www.ultrasaurus.com/2009/08/ruby-unit-test-frameworks/#comment-604"><time pubdate datetime="2009-09-01T05:08:14-07:00">September 1, 2009 at 5:08 am</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>You can actually use Test::Unit in RSpec (<a href="http://blog.davidchelimsky.net/2009/2/2/rspec-works-with-test-unit/" rel="nofollow ugc">http://blog.davidchelimsky.net/2009/2/2/rspec-works-with-test-unit/</a>) and Shoulda has some special RSpec hooks as well.  I&#8217;ve found this useful when incrementally transforming Test::Unit tests into RSpec examples.</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-604 .comment -->
			
	</li><!-- #comment-## -->
		
		<li  id="li-comment-605" class="comment odd alt thread-odd thread-alt depth-1">
			<article id="comment-605" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/3203ed0e608d3bfae1e31282e629ffa2?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/3203ed0e608d3bfae1e31282e629ffa2?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn">Peter Fitzgibbons</span> <span class="says">said</span> on <a href="https://www.ultrasaurus.com/2009/08/ruby-unit-test-frameworks/#comment-605"><time pubdate datetime="2009-09-01T13:32:58-07:00">September 1, 2009 at 1:32 pm</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>You&#8217;ll find the same Rspec look/feel of code and output from within Rails.<br />
There is one spot i notice that still falls apart, no matter the test framework : diffs of failing array/hash comparison.  Anyone have a Rpec &#8216;plugin&#8217; for this?</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-605 .comment -->
			
	</li><!-- #comment-## -->
		
		<li  id="li-comment-606" class="comment even thread-even depth-1">
			<article id="comment-606" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/40eebe68891c7305d827f4ad37eb2eb8?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/40eebe68891c7305d827f4ad37eb2eb8?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn">Scott Bronson</span> <span class="says">said</span> on <a href="https://www.ultrasaurus.com/2009/08/ruby-unit-test-frameworks/#comment-606"><time pubdate datetime="2010-01-27T01:01:28-08:00">January 27, 2010 at 1:01 am</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>Peter, I&#8217;m doing this in my current app to compare many deep structures: <a href="http://gist.github.com/287675" rel="nofollow ugc">http://gist.github.com/287675</a></p>
<p>Not elegant but it works.</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-606 .comment -->
			
	</li><!-- #comment-## -->
		
		<li  id="li-comment-607" class="comment odd alt thread-odd thread-alt depth-1">
			<article id="comment-607" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/9e43f9a4786f0a70ce8063b53299084a?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/9e43f9a4786f0a70ce8063b53299084a?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn">Sam Livingston-Gray</span> <span class="says">said</span> on <a href="https://www.ultrasaurus.com/2009/08/ruby-unit-test-frameworks/#comment-607"><time pubdate datetime="2011-03-31T09:14:58-07:00">March 31, 2011 at 9:14 am</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>I&#8217;ve been using Shoulda in Rails for a couple of years, and I don&#8217;t really use its Rails-specific test methods (e.g., #should_belong_to).  They&#8217;ve always seemed just a little too tautological for my taste &#8212; in that they don&#8217;t describe actual value.  If there aren&#8217;t other tests that fail without a given association being declared, You&#8217;re Doing It Wrong &#8482;.</p>
<p>That being said, I do like Shoulda&#8217;s nested contexts, if for no other reason than that they let me fold up large sections of tests that I don&#8217;t currently care about.</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-607 .comment -->
			
	</li><!-- #comment-## -->
		
		<li  id="li-comment-608" class="comment even thread-even depth-1">
			<article id="comment-608" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/eaae6ddd50f6317983774f70b4860194?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/eaae6ddd50f6317983774f70b4860194?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn">Paris Sinclair</span> <span class="says">said</span> on <a href="https://www.ultrasaurus.com/2009/08/ruby-unit-test-frameworks/#comment-608"><time pubdate datetime="2011-03-31T10:47:14-07:00">March 31, 2011 at 10:47 am</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>If it&#8217;s a matter a taste, and one of the options comes with Ruby, then that&#8217;s the obvious choice. Especially when teaching!</p>
<p>Since when is the canon just legacy?</p>
<p>If people want to switch to some other flavor they like, great! But they should be doing that based on real reasons they understand. It&#8217;s a major disservice to send them off with some Fav Flav. Even if it&#8217;s your fav flav.</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-608 .comment -->
			
	</li><!-- #comment-## -->
		
		<li  id="li-comment-609" class="comment odd alt thread-odd thread-alt depth-1">
			<article id="comment-609" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/20ee0d23c969c7740d3c936a4675bb23?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/20ee0d23c969c7740d3c936a4675bb23?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn"><a href='https://www.ultrasaurus.com' rel='external nofollow ugc' class='url'>Sarah</a></span> <span class="says">said</span> on <a href="https://www.ultrasaurus.com/2009/08/ruby-unit-test-frameworks/#comment-609"><time pubdate datetime="2011-03-31T14:48:33-07:00">March 31, 2011 at 2:48 pm</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>I think we should teach using what is best for the student.  As teachers, we need to use our best judgement in picking what collection of tools to introduce students to.  This is not just a chocolate or strawberry kind of choice.   I tried to explain in my post why I chose RSpec for teaching.  As I mentioned, I actually started the experiment with a bias toward Test::Unit.</p>
<p>Right now minitest comes with Ruby and Test::Unit comes with Rails.  Those projects pick their test frameworks for a lot of reasons &#8212; my guess is that being able to create very clear failing tests was not a high priority.  In the case of Rails, RSpec didn&#8217;t exists when they chose Test::Unit and they are working on improving the readability of output (<a href="https://github.com/TwP/turn" rel="nofollow ugc">https://github.com/TwP/turn</a>) but I still think it doesn&#8217;t approach the clarity of RSpec.</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-609 .comment -->
			
	</li><!-- #comment-## -->
	
		<li id="li-comment-610" class="pingback even thread-even depth-1">
			<p class="row">
				<strong class="ping-label span1">Pingback:</strong>
				<span class="span7"><a href='https://www.ultrasaurus.com/sarahblog/2011/04/on-choosing-rspec-as-a-test-framework/' rel='external nofollow ugc' class='url'>on choosing RSpec as a test framework | the evolving ultrasaurus</a></span>
			</p>
	
	</li><!-- #comment-## -->
		
		<li  id="li-comment-612" class="comment odd alt thread-odd thread-alt depth-1">
			<article id="comment-612" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/c35b5b0f9e7cce48864f4f1545ead995?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/c35b5b0f9e7cce48864f4f1545ead995?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn"><a href='http://rubyglasses.blogspot.com/' rel='external nofollow ugc' class='url'>Taryn East</a></span> <span class="says">said</span> on <a href="https://www.ultrasaurus.com/2009/08/ruby-unit-test-frameworks/#comment-612"><time pubdate datetime="2011-07-23T07:03:34-07:00">July 23, 2011 at 7:03 am</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>YMMV, of course, but I use test::Unit over rspec because altering the output messaging is actually far easier.</p>
<p>Sure, for very simple tests like your examples &#8211; that use the default messaging, the output seems better. But if you want to pass custom failure messages, rspec requires you to declare a brand new class every time&#8230; whereas Test::Unit you can just pass it as a param.  </p>
<p>This becomes more important in actual, complex tests. I have a lot of asserts that are sanity checks&#8230; and I like to make sure my code outputs *what* failed and what it should have been.. with a comment eg as a toy example:</p>
<p>   should &#8220;approve a new widget&#8221; do<br />
       w = MyWidget.new(:name =&gt; &#8220;my widget&#8221;, :approved =&gt; false)<br />
     assert !w.approved?, &#8220;sanity check: test data should not have started out approved&#8221;<br />
     assert w.approve!, &#8220;approval process should have worked&#8221;<br />
     assert w.approved? # note &#8211; no need to comment this one as it&#8217;s the *actual* test<br />
  end</p>
<p>The last line is the actual thing you&#8217;re testing &#8211; but sanity checking the data and the intermediate steps is useful to make sure you are *actually testing what you think you&#8217;re testing* &#8211; something that you often only find out later when it breaks&#8230;<br />
and having better output on the lines makes Test::unit far easier to get proper messages passed around as to what should be happening and why.</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-612 .comment -->
			
	</li><!-- #comment-## -->
			</ol><!-- .commentlist .unstyled -->
		
					
		</div><!-- #comments -->
		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title"><legend>Leave a reply</legend> <small><a rel="nofollow" id="cancel-comment-reply-link" href="/2009/08/ruby-unit-test-frameworks/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://www.ultrasaurus.com/wp-comments-post.php" method="post" id="commentform" class="comment-form"><div class="form-horizontal"><div class="comment-form-comment control-group"><label class="control-label" for="comment">Comment</label><div class="controls"><textarea autocomplete="new-password"  class="span7" id="f23bb1b12e"  name="f23bb1b12e"   rows="8" aria-required="true"></textarea><textarea id="comment" aria-hidden="true" name="comment" autocomplete="new-password" style="padding:0 !important;clip:rect(1px, 1px, 1px, 1px) !important;position:absolute !important;white-space:nowrap !important;height:1px !important;width:1px !important;overflow:hidden !important;" tabindex="-1"></textarea><script data-noptimize type="text/javascript">document.getElementById("comment").setAttribute( "id", "a8c29e85f7071712ded2281398b6697c" );document.getElementById("f23bb1b12e").setAttribute( "id", "comment" );</script></div></div><div class="form-allowed-tags control-group"><label class="control-label">You may use these <abbr title="HyperText Markup Language">HTML</abbr> tags and attributes: </label><div class="controls"><pre>&lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;s&gt; &lt;strike&gt; &lt;strong&gt; </pre></div></div>
									 <div class="form-actions"><div class="comment-form-author control-group">
				<label for="author" class="control-label">Name</label>
				<div class="controls">
					<input id="author" name="author" type="text" value="" size="30" aria-required='true' />
					<p class="help-inline"><span class="required">required</span></p>
				</div>
			</div>
<div class="comment-form-email control-group">
				<label for="email" class="control-label">Email</label>
				<div class="controls">
					<input id="email" name="email" type="email" value="" size="30" aria-required='true' />
					<p class="help-inline"><span class="required">required</span>, will not be published</p>
				</div>
			</div>
<div class="comment-form-url control-group">
				<label for="url" class="control-label">Website</label>
				<div class="controls">
					<input id="url" name="url" type="url" value="" size="30" />
				</div>
			</div>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='1997' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p></div></div></form>	</div><!-- #respond -->
			
		<nav id="nav-single" class="pager">
			<h3 class="assistive-text">Post navigation</h3>
			<span class="next"><a href="https://www.ultrasaurus.com/2009/08/rails-models-are-views/" rel="next">Next Post <span class="meta-nav">&rarr;</span></a></span>
			<span class="previous"><a href="https://www.ultrasaurus.com/2009/08/test-driven-teaching/" rel="prev"><span class="meta-nav">&larr;</span> Previous Post</a></span>
		</nav><!-- #nav-single -->
		
			</div><!-- #content -->
	</section><!-- #primary -->

<section id="secondary" class="widget-area span4" role="complementary">
	<aside id="recent-comments-2" class="widget well widget_recent_comments"><h2 class="widget-title">Recent Comments</h2><ul id="recentcomments"><li class="recentcomments"><span class="comment-author-link"><a href='https://da.biomarmicrobialtechnologies.com/' rel='external nofollow ugc' class='url'>Silje Randrup</a></span> on <a href="https://www.ultrasaurus.com/2003/08/the-history-of-the-letter-c/#comment-22370">the history of the letter &#8216;C&#8217;</a></li><li class="recentcomments"><span class="comment-author-link"><a href='http://x--x.us' rel='external nofollow ugc' class='url'>Paula</a></span> on <a href="https://www.ultrasaurus.com/2003/08/the-history-of-the-letter-c/#comment-19549">the history of the letter &#8216;C&#8217;</a></li><li class="recentcomments"><span class="comment-author-link"><a href='http://x--x.us' rel='external nofollow ugc' class='url'>Michelle</a></span> on <a href="https://www.ultrasaurus.com/2003/08/the-history-of-the-letter-c/#comment-19399">the history of the letter &#8216;C&#8217;</a></li><li class="recentcomments"><span class="comment-author-link">Craig</span> on <a href="https://www.ultrasaurus.com/2019/10/http-3-starter-notes-rust-quiche/#comment-18963">http/3 starter notes, rust quiche</a></li><li class="recentcomments"><span class="comment-author-link">Kornel</span> on <a href="https://www.ultrasaurus.com/2019/10/rust-whats-a-tuple-variant/#comment-18539">[rust] what&#8217;s a tuple variant?</a></li><li class="recentcomments"><span class="comment-author-link"><a href='https://apromixately.github.io' rel='external nofollow ugc' class='url'>Simon</a></span> on <a href="https://www.ultrasaurus.com/2019/06/essential-rust-tools/#comment-13007">essential rust tools</a></li><li class="recentcomments"><span class="comment-author-link"><a href='https://balsamiq.com/company/' rel='external nofollow ugc' class='url'>balsamiqVal</a></span> on <a href="https://www.ultrasaurus.com/2018/10/the-path-is-made-by-walking/#comment-9108">the path is made by walking</a></li><li class="recentcomments"><span class="comment-author-link">Jennifer</span> on <a href="https://www.ultrasaurus.com/2018/07/optimize-for-results-not-optics/#comment-8193">optimize for results, not optics</a></li><li class="recentcomments"><span class="comment-author-link">Bernardo Gomes</span> on <a href="https://www.ultrasaurus.com/2016/06/sailsjs-testing-patterns-trunctate-database/#comment-8058">sailsjs testing: how to truncate the database</a></li><li class="recentcomments"><span class="comment-author-link">Bernardo Gomes</span> on <a href="https://www.ultrasaurus.com/2016/06/sailsjs-testing-patterns-trunctate-database/#comment-8057">sailsjs testing: how to truncate the database</a></li></ul></aside>
		<aside id="recent-posts-2" class="widget well widget_recent_entries">
		<h2 class="widget-title">Recent Posts</h2>
		<ul>
											<li>
					<a href="https://www.ultrasaurus.com/2020/07/hope-is-not-a-strategy/">hope is not a strategy</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2020/01/duck-typing-in-rust-trait-vs-type/">duck typing in rust: trait vs type</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2020/01/writing-c-library-in-rust/">writing c library in rust</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2020/01/rust-on-heroku-with-hyper-http/">rust on heroku with hyper http</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2020/01/rust-on-heroku-with-async-await-and-tokio/">rust on heroku with async/await and tokio</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/12/patterns-of-actions-are-a-making/">patterns of actions are a making</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/12/memory-safety-necessary-not-sufficient/">memory safety: necessary, not sufficient</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/12/brief-history-of-rtmp-future-thoughts/">brief history of rtmp + future thoughts</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/12/rust-2020/">rust 2020: fulfill the promise</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/11/nut-loaf-with-red-pepper-sauce/">nut loaf with red pepper sauce</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/10/http-3-starter-notes-rust-quiche/">http/3 starter notes, rust quiche</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/10/rust-whats-a-tuple-variant/">[rust] what&#8217;s a tuple variant?</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/08/graph-in-rust-using-petgraph/">graph in rust using petgraph</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/06/debugging-openssl-shared-libary/">debugging openssl shared libary</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/06/digital-identity-how-to-verify-trust/">digital identity: how to verify trust?</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/06/essential-rust-tools/">essential rust tools</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/05/learning-scala-with-graphics/">learning scala with graphics</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/04/when-reality-is-broken-change-the-rules/">when reality is broken, change the rules</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/04/subverting-saurons-business-model/">subverting Sauron&#8217;s business model</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/02/firebase-auth-migration-from-rails-and-devise/">firebase auth migration from rails/devise</a>
									</li>
					</ul>

		</aside></section><!-- #secondary .widget-area -->
				<footer id="colophon" role="contentinfo" class="span12">
										<div id="page-footer" class="well clearfix">
						<span class="credits alignleft">&copy; 2021 <a href="https://www.ultrasaurus.com/">the evolving ultrasaurus</a>, all rights reserved.</span>						<div id="site-generator">
							<a	href="http://wordpress.org/"
								title="Semantic Personal Publishing Platform"
								target="_blank"
								rel="generator">Proudly powered by WordPress</a>
						</div>
					</div><!-- #page-footer .well .clearfix -->
									</footer><!-- #colophon -->
							</div><!-- #page -->
		</div><!-- .container -->
	<!-- 48 queries. 0.403 seconds. -->
	<script type='text/javascript' src='https://www.ultrasaurus.com/wp-content/themes/the-bootstrap/js/bootstrap.min.js?ver=2.0.3' id='tw-bootstrap-js'></script>
<script type='text/javascript' src='https://www.ultrasaurus.com/wp-content/themes/the-bootstrap/js/the-bootstrap.min.js?ver=2.0.1' id='the-bootstrap-js'></script>
<script type='text/javascript' src='https://www.ultrasaurus.com/wp-includes/js/wp-embed.min.js?ver=5.7.1' id='wp-embed-js'></script>
	</body>
</html>
