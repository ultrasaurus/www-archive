<!DOCTYPE html>
<html class="no-js" lang="en-US">
	<head>
				<link rel="profile" href="http://gmpg.org/xfn/11" />
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		
		<title>August &laquo; 2009 &laquo; the evolving ultrasaurus</title>
		
				<meta name='robots' content='max-image-preview:large' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="the evolving ultrasaurus &raquo; Feed" href="https://www.ultrasaurus.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="the evolving ultrasaurus &raquo; Comments Feed" href="https://www.ultrasaurus.com/comments/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.0.1\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.0.1\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/www.ultrasaurus.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=5.7.1"}};
			!function(e,a,t){var n,r,o,i=a.createElement("canvas"),p=i.getContext&&i.getContext("2d");function s(e,t){var a=String.fromCharCode;p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,e),0,0);e=i.toDataURL();return p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,t),0,0),e===i.toDataURL()}function c(e){var t=a.createElement("script");t.src=e,t.defer=t.type="text/javascript",a.getElementsByTagName("head")[0].appendChild(t)}for(o=Array("flag","emoji"),t.supports={everything:!0,everythingExceptFlag:!0},r=0;r<o.length;r++)t.supports[o[r]]=function(e){if(!p||!p.fillText)return!1;switch(p.textBaseline="top",p.font="600 32px Arial",e){case"flag":return s([127987,65039,8205,9895,65039],[127987,65039,8203,9895,65039])?!1:!s([55356,56826,55356,56819],[55356,56826,8203,55356,56819])&&!s([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]);case"emoji":return!s([55357,56424,8205,55356,57212],[55357,56424,8203,55356,57212])}return!1}(o[r]),t.supports.everything=t.supports.everything&&t.supports[o[r]],"flag"!==o[r]&&(t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&t.supports[o[r]]);t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&!t.supports.flag,t.DOMReady=!1,t.readyCallback=function(){t.DOMReady=!0},t.supports.everything||(n=function(){t.readyCallback()},a.addEventListener?(a.addEventListener("DOMContentLoaded",n,!1),e.addEventListener("load",n,!1)):(e.attachEvent("onload",n),a.attachEvent("onreadystatechange",function(){"complete"===a.readyState&&t.readyCallback()})),(n=t.source||{}).concatemoji?c(n.concatemoji):n.wpemoji&&n.twemoji&&(c(n.twemoji),c(n.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<link rel='stylesheet' id='mailchimpSF_main_css-css'  href='https://www.ultrasaurus.com/?mcsf_action=main_css&#038;ver=5.7.1' type='text/css' media='all' />
<!--[if IE]>
<link rel='stylesheet' id='mailchimpSF_ie_css-css'  href='https://www.ultrasaurus.com/wp-content/plugins/mailchimp/css/ie.css?ver=5.7.1' type='text/css' media='all' />
<![endif]-->
<link rel='stylesheet' id='wp-block-library-css'  href='https://www.ultrasaurus.com/wp-includes/css/dist/block-library/style.min.css?ver=5.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='tw-bootstrap-css'  href='https://www.ultrasaurus.com/wp-content/themes/the-bootstrap/css/bootstrap.min.css?ver=2.0.3' type='text/css' media='all' />
<link rel='stylesheet' id='the-bootstrap-css'  href='https://www.ultrasaurus.com/wp-content/themes/the-bootstrap/style.min.css?ver=2.0.1' type='text/css' media='all' />
<style id='the-bootstrap-inline-css' type='text/css'>
body > .container{margin-top:68px;}@media(min-width: 980px){body > .container{margin-top:58px;}}
</style>
<script type='text/javascript' src='https://www.ultrasaurus.com/wp-includes/js/jquery/jquery.min.js?ver=3.5.1' id='jquery-core-js'></script>
<script type='text/javascript' src='https://www.ultrasaurus.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.3.2' id='jquery-migrate-js'></script>
<script type='text/javascript' src='https://www.ultrasaurus.com/wp-content/plugins/google-analyticator/external-tracking.min.js?ver=6.5.4' id='ga-external-tracking-js'></script>
<link rel="https://api.w.org/" href="https://www.ultrasaurus.com/wp-json/" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://www.ultrasaurus.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://www.ultrasaurus.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 5.7.1" />
<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>	<style type="text/css">
				#branding hgroup {
			position: absolute !important;
			clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
			clip: rect(1px, 1px, 1px, 1px);
		}
			</style>
		<!--[if lt IE 9]>
		<script src="https://www.ultrasaurus.com/wp-content/themes/the-bootstrap/js/html5shiv.min.js" type="text/javascript"></script>
		<script src="https://www.ultrasaurus.com/wp-content/themes/the-bootstrap/js/respond.min.js" type="text/javascript"></script>
	<![endif]-->
	<!-- Google Analytics Tracking by Google Analyticator 6.5.4: http://www.videousermanuals.com/google-analyticator/ -->
<script type="text/javascript">
    var analyticsFileTypes = [''];
    var analyticsSnippet = 'enabled';
    var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
  
	_gaq.push(['_setAccount', 'UA-4313619-1']);
    _gaq.push(['_addDevId', 'i9k95']); // Google Analyticator App ID with Google
    _gaq.push(['_gat._anonymizeIp']);
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
		<style type="text/css" id="wp-custom-css">
			code {
	color: #70a
}

p {
	color: #333
}

blockquote p {
	font-size: 14px;
	font-weight: normal;
	padding-top: 6px;
	padding-bottom: 6px;
	padding-left: 10px;
	padding-right: 60px;
	line-height: 1.2;
}		</style>
			</head>
	
	<body class="archive date content-sidebar">
		<div class="container">
			<div id="page" class="hfeed row">
								<header id="branding" role="banner" class="span12">
										<hgroup>
						<h1 id="site-title">
							<a href="https://www.ultrasaurus.com/" title="the evolving ultrasaurus" rel="home">
								<span>the evolving ultrasaurus</span>
							</a>
						</h1>
						<h2 id="site-description">Sarah Allen&#039;s reflections on internet software and other topics</h2>
					</hgroup>
					
					
					<nav id="access" role="navigation">
						<h3 class="assistive-text">Main menu</h3>
						<div class="skip-link"><a class="assistive-text" href="#content" title="Skip to primary content">Skip to primary content</a></div>
						<div class="skip-link"><a class="assistive-text" href="#secondary" title="Skip to secondary content">Skip to secondary content</a></div>
												<div class="navbar navbar-fixed-top navbar-inverse">
							<div class="navbar-inner">
								<div class="container">
									<!-- .btn-navbar is used as the toggle for collapsed navbar content -->
									<a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
										<span class="icon-bar"></span>
										<span class="icon-bar"></span>
										<span class="icon-bar"></span>
									</a>
																		<span class="brand">the evolving ultrasaurus</span>
																		<div class="nav-collapse">
										<div class="menu-primary-container"><ul id="menu-primary" class="nav"><li id="menu-item-4272" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4272"><a href="https://www.ultrasaurus.com/about/">About</a></li>
<li id="menu-item-6605" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6605"><a href="https://www.ultrasaurus.com/speaking/">Speaking</a></li>
<li id="menu-item-6366" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-6366"><a href="https://www.ultrasaurus.com/code/">Code</a></li>
<li id="menu-item-4269" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4269"><a href="https://www.ultrasaurus.com/archives/">Archives</a></li>
<li id="menu-item-4759" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4759"><a href="https://www.ultrasaurus.com/contact/">Contact</a></li>
<li id="menu-item-4697" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4697"><a href="https://www.ultrasaurus.com/ultrasaurus/">What is an ultrasaurus?</a></li>
</ul></div>	<form id="searchform" class="navbar-search pull-right" method="get" action="https://www.ultrasaurus.com/">
						<label for="s" class="assistive-text hidden">Search</label>
						<input type="search" class="search-query" name="s" id="s" placeholder="Search" />
					</form>								    </div>
								</div>
							</div>
						</div>
											</nav><!-- #access -->
									</header><!-- #branding -->
<section id="primary" class="span8">

		<div id="content" role="main">
		
			<header class="page-header">
				<h1 class="page-title">
					Monthly Archives: <span>August 2009</span>				</h1>
			</header><!-- .page-header -->

			<article id="post-2032" class="post-2032 post type-post status-publish format-standard hentry category-code">
		
	<header class="page-header">
	<h1 class="entry-title"><a href="https://www.ultrasaurus.com/2009/08/rails-models-are-views/" title="Permalink to rails models are views?" rel="bookmark">rails models are views?</a></h1>		<div class="entry-meta">
			<span class="sep">Posted on </span><a href="https://www.ultrasaurus.com/2009/08/rails-models-are-views/" title="7:07 pm" rel="bookmark"><time class="entry-date" datetime="2009-08-31T19:07:10-07:00" pubdate>August 31, 2009</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="https://www.ultrasaurus.com/author/sarah/" title="View all posts by sarah" rel="author">sarah</a></span></span>		<span class="sep"> | </span>
		<span class="comments-link">
			<a href="https://www.ultrasaurus.com/2009/08/rails-models-are-views/#comments"><strong>6</strong> Replies</a>		</span>
				</div><!-- .entry-meta -->
			</header><!-- .entry-header -->

		<div class="entry-content clearfix">
		<p>Rails appears pretty strict about separation of the abstraction layers that make up its notion of a web application: models, view and controllers.  If you were to suggest calling a presentation method, such as url_for, in your model, the stoic Rails advocate will have an allergic reaction. However, Rails thinks nothing of rendering a model directly as a view, such as:</p>
<pre>
format.json { render :json =&gt; @products }
</pre>
<p>Now, one might argue that this is controller code and the controller is allowed to interpret the model as a view.  The controller&#8217;s job is to mediate this interaction.  However, I feel that it is a dangerous shortcut, made even more so by how hard to seems to be to override.  Perhaps the json implementation is simply incomplete.</p>
<p>In xml, this strange controller pattern is easily corrected by <a href="http://danengle.us/2009/05/generating-custom-xml-for-your-rails-app/">providing an xml view</a>.  The xml builder syntax is particularly readable, and it is easy to design your XML API effectively.</p>
<p>I haven&#8217;t found an equivalent for json.  I tried to use a JSON API today to no avail.  My model included image data which breaks when auto-rendered in JSON.  What I really wanted was to include a URL instead of the image data, which I implement neatly in my xml.builder view:</p>
<pre>
xml.instruct!
xml.products("type"=&gt;"array") do
  @products.each do |product|
    xml.product do
      xml.sku product.sku
      xml.name product.name
      xml.brand product.brand
      xml.img_url url_for(:controller =&gt; :products, :action =&gt; :show, :format=&gt;:png, :id =&gt; product.id, :only_path =&gt; false)
    end
  end
end
</pre>
<p>The problem is that I want a similar view in JSON.  The to_json API leads me to put this logic in my model (gasp!).  In fact, the ActiveRecord::Serialization docs give an example of providing a method to generate JSON instead of a literal attribute.  The example is of a &#8220;permalink&#8221; which seem suspiciously like something that belongs is the view layer.</p>
<pre>
  konata.to_json(:methods =&gt; :permalink)
  # =&gt; {"id": 1, "name": "Konata Izumi", "age": 16,
        "created_at": "2006/08/01", "awesome": true,
        "permalink": "1-konata-izumi"}
</pre>
<p>Today&#8217;s solution was to go back to using my comfortable old XML API, but I would prefer to consume JSON from the other side.  I wonder if anyone is working on a JSON builder or if there is some clear solution that I haven&#8217;t yet stumbled upon.</p>
	</div><!-- .entry-content -->
	
	<footer class="entry-meta">
		<span class="cat-links block">Posted in <a href="https://www.ultrasaurus.com/category/code/" rel="category tag">code</a>.</span>	</footer><!-- #entry-meta -->
	
	</article><!-- #post-2032 -->
<article id="post-1997" class="post-1997 post type-post status-publish format-standard hentry category-code">
		
	<header class="page-header">
	<h1 class="entry-title"><a href="https://www.ultrasaurus.com/2009/08/ruby-unit-test-frameworks/" title="Permalink to ruby unit test frameworks" rel="bookmark">ruby unit test frameworks</a></h1>		<div class="entry-meta">
			<span class="sep">Posted on </span><a href="https://www.ultrasaurus.com/2009/08/ruby-unit-test-frameworks/" title="6:59 am" rel="bookmark"><time class="entry-date" datetime="2009-08-31T06:59:46-07:00" pubdate>August 31, 2009</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="https://www.ultrasaurus.com/author/sarah/" title="View all posts by sarah" rel="author">sarah</a></span></span>		<span class="sep"> | </span>
		<span class="comments-link">
			<a href="https://www.ultrasaurus.com/2009/08/ruby-unit-test-frameworks/#comments"><strong>12</strong> Replies</a>		</span>
				</div><!-- .entry-meta -->
			</header><!-- .entry-header -->

		<div class="entry-content clearfix">
		<p>In preparation for teaching Ruby in a class with <a href="https://www.ultrasaurus.com/sarahblog/2009/08/test-driven-teaching/">test first teaching</a>.  I decided to evaluate a few test frameworks.  I thought initially to use Test::Unit, since it seemed easy to understand and ships with Rails.  Wolfram Arnold argued that Test::Unit would <a href="http://twitter.com/wolframarnold/status/3336210949">burden the new folks with legacy</a>.  Alex Chaffee also <a href="http://twitter.com/alexch/status/3320591021">advocated RSpec</a>, but <a href="http://twitter.com/jacobrothstein/status/3320555832">other</a> <a href="http://twitter.com/jamieflournoy/status/3323143202">friends</a> from the Twittervese had good things to say about shoulda.  Some folks declared it to be simply a <a href="http://twitter.com/noelrap/status/3319780641">matter of taste</a>.</p>
<p>Even so, I wanted to make an informed decision and refine my palette for Ruby tools, so I wrote a simple exercise in each of Test::Unit, Shoulda and RSpec.</p>
<h2>Test::Unit</h2>
<pre>
require 'test/unit'
require 'pig_latin'
 
class PigLatinTest &lt; Test::Unit::TestCase
    include PigLatinTranslator
 
    def test_simple_word
        s = translate(&quot;nix&quot;)
        assert_equal(&quot;ixnay&quot;, s)
    end
 
    def test_word_beginning_with_vowel
        s = translate(&quot;apple&quot;)
        assert_equal(&quot;appleay&quot;, s)
    end
 
    def test_two_consonant_word
        s = translate(&quot;stupid&quot;)
        assert_equal(&quot;upidstay&quot;, s)
    end
end
</pre>
<p>With the above code saved as &#8220;test_pig_latin.rb&#8221; you run it by simply executing it with Ruby.</p>
<pre>$ ruby test_pig_latin.rb
Loaded suite test_pig_latin
Started
FFF
Finished in 0.01091 seconds.

  1) Failure:
test_simple_word(PigLatinTest) [test_pig_latin.rb:9]:
 expected but was
.

  2) Failure:
test_two_consonant_word(PigLatinTest) [test_pig_latin.rb:19]:
 expected but was
.

  3) Failure:
test_word_beginning_with_vowel(PigLatinTest) [test_pig_latin.rb:14]:
 expected but was
.

3 tests, 3 assertions, 3 failures, 0 errors
</pre>
<hr />
<h2>Shoulda</h2>
<p>Notice in the code below that Shoulda is simply and extension to Test::Unit.  The PigLatinTest also subclasses Test::Unit::TestCase, just as the example above; however, the code inside the test case looks substantially different (and more readable in my opinion).  You can actually mix Shoulda tests (below) with regular TestCase test methods (above) in the same TestCase.  This is an advantage to Shoulda over RSpec if you have a codebase that already has lots of unit tests; however, I have also used RSpec and Test::Unit in the same project (you just have to remember to &#8216;rake test&#8217; and &#8216;rake spec&#8217;).</p>
<pre>require 'rubygems'
require 'shoulda'
require 'pig_latin'

class PigLatinTest &lt; Test::Unit::TestCase
  include PigLatinTranslator

  context "#translate" do

    should "translate a simple word: nix" do
      s = translate("nix")
      assert_equal("ixnay", s)
    end

    should "translate a word beginning with a vowel: apple" do
      s = translate("apple")
      assert_equal("appleay", s)
    end

    should "translate a two consonent word: stupid" do
      s = translate("stupid")
      assert_equal("upidstay", s)
    end

  end
end</pre>
<p>With the code above saved as &#8220;test_shoulda_pig_latin.rb&#8221; you use the same process as above by just executing the file with ruby.</p>
<pre>$ ruby test_shoulda_pig_latin.rb
Loaded suite test_shoulda_pig_latin
Started
FFF
Finished in 0.008268 seconds.

 1) Failure:
test: #translate should translate a simple word. (PigLatinTest)
 [test_shoulda_pig_latin.rb:12:in `__bind_1251676444_52936'
 /Library/Ruby/Gems/1.8/gems/thoughtbot-shoulda-2.10.2/lib/shoulda/context.rb:351:in `call'
 /Library/Ruby/Gems/1.8/gems/thoughtbot-shoulda-2.10.2/lib/shoulda/context.rb:351:in `test: #translate should translate a simple word. ']:
&lt;"ixnay"&gt; expected but was
&lt;"translation"&gt;.

 2) Failure:
test: #translate should translate a two consonent word. (PigLatinTest)
 [test_shoulda_pig_latin.rb:22:in `__bind_1251676444_58860'
 /Library/Ruby/Gems/1.8/gems/thoughtbot-shoulda-2.10.2/lib/shoulda/context.rb:351:in `call'
 /Library/Ruby/Gems/1.8/gems/thoughtbot-shoulda-2.10.2/lib/shoulda/context.rb:351:in `test: #translate should translate a two consonent word. ']:
&lt;"upidstay"&gt; expected but was
&lt;"translation"&gt;.

 3) Failure:
test: #translate should translate a word beginning with a vowel. (PigLatinTest)
 [test_shoulda_pig_latin.rb:17:in `__bind_1251676444_59935'
 /Library/Ruby/Gems/1.8/gems/thoughtbot-shoulda-2.10.2/lib/shoulda/context.rb:351:in `call'
 /Library/Ruby/Gems/1.8/gems/thoughtbot-shoulda-2.10.2/lib/shoulda/context.rb:351:in `test: #translate should translate a word beginning with a vowel. ']:
&lt;"appleay"&gt; expected but was
&lt;"translation"&gt;.

3 tests, 3 assertions, 3 failures, 0 errors</pre>
<hr />
<h2>RSpec</h2>
<pre>require "pig_latin"

describe "#translate" do
  include PigLatinTranslator

  it "should translate a simple word" do
    s = translate("nix")
    s.should == "ixnay"
  end

  it "should translate a word beginning with a vowel" do
    pending
    s = translate("apple")
    s.should == "appleay"
  end

  it "should translate a two consonent word: stupid" do
    pending
    s = translate("stupid")
    s.should == "upidstay"
  end

end</pre>
<p>The code above is saved in a file called &#8220;pig_latin_spec.rb&#8221; and run it using the &#8216;spec&#8217; command.  You will need to have installed the rspec gem (sudo gem install rspec).</p>
<pre>$ spec pig_latin_spec.rb
F**

Pending:

#translate should translate a word beginning with a vowel (TODO)
./pig_latin_spec.rb:11

#translate should translate a two consonent word: stupid (TODO)
./pig_latin_spec.rb:17

1)
'#translate should translate a simple word' FAILED
expected: "ixnay",
     got: "translation" (using ==)
./pig_latin_spec.rb:8:

Finished in 0.035728 seconds

3 examples, 1 failure, 2 pending</pre>
<h2>Conclusion</h2>
<p>I like RSpec best since I find the output to be most readable.  I love the pending keyword, which allows me to set up the tests as an exercise for the class with only one test failing. I find it helps focus on exactly one test and one failure.   I considered going with Shoulda because the tests are just as readable as RSpec, even if the output takes some learning to read, because of my initial thought that Test::Unit held less magic.  However, on closer inspection, I realized that Test::Unit has one significant magical incantation:  you merely declare a class and when that class is defined, it runs the test.  This seemed not the kind of topic I would want to teach in an intro class.  Even some experienced programmers might struggle with understanding the mechanism that allows such a construct to function.  I concluded that all of the test frameworks require serious magic, and picked RSpec since I found it to be most usable for test writing and analysis of the output.</p>
<p>Caveat: this exercise was for pure Ruby.  In Rails, I wonder if Shoulda tests would be more concise, making them easier to write and read and, therefore, making it worth the steeper learning curve on reading the output.  </p>
	</div><!-- .entry-content -->
	
	<footer class="entry-meta">
		<span class="cat-links block">Posted in <a href="https://www.ultrasaurus.com/category/code/" rel="category tag">code</a>.</span>	</footer><!-- #entry-meta -->
	
	</article><!-- #post-1997 -->
<article id="post-1963" class="post-1963 post type-post status-publish format-standard hentry category-general">
		
	<header class="page-header">
	<h1 class="entry-title"><a href="https://www.ultrasaurus.com/2009/08/test-driven-teaching/" title="Permalink to test-driven teaching" rel="bookmark">test-driven teaching</a></h1>		<div class="entry-meta">
			<span class="sep">Posted on </span><a href="https://www.ultrasaurus.com/2009/08/test-driven-teaching/" title="7:47 pm" rel="bookmark"><time class="entry-date" datetime="2009-08-16T19:47:01-07:00" pubdate>August 16, 2009</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="https://www.ultrasaurus.com/author/sarah/" title="View all posts by sarah" rel="author">sarah</a></span></span>		<span class="sep"> | </span>
		<span class="comments-link">
			<a href="https://www.ultrasaurus.com/2009/08/test-driven-teaching/#comments"><strong>9</strong> Replies</a>		</span>
				</div><!-- .entry-meta -->
			</header><!-- .entry-header -->

		<div class="entry-content clearfix">
		<p>In preparing to teach a new class, <a href="http://www.jccsf.org/content_main.aspx?catid=686">Ruby on Rails Fundamentals</a>, I felt strongly that I wanted to teach test-driven development (TDD).  Initially my motivation was that I found it hard to learn TDD when I learned Rails.  I found little instructional material on the web and the variety of test frameworks was a bit overwhelming.  As an experienced programmer, I understood the methodology (although I hadn&#8217;t practiced it much), but couldn&#8217;t find good resources to teach myself the basic syntax.  I found cucumber quite approachable, but struggled with TestUnit and RSpec (which I eventually learned well through <a href="https://www.ultrasaurus.com/sarahblog/2009/07/pair-programming-velocity/">pair programming</a>).  I figured that if people didn&#8217;t learn TDD in an introductory class, how the heck were they to learn it at all?  Also, the last thing I want is for graduates of my class to have experience building web applications in Ruby on Rails that have no tests.</p>
<p>There were negative reactions from some folks via email and twitter, but I had just as many people encouraging the teaching of TDD, so I decided to move forward with my plan.  <a href="http://www.rubyfocus.biz/">Wolfram Arnold</a> is a big proponent of <a href="http://twitter.com/wolframarnold/status/3336210949">throwing the newbies into the status quo</a>.  We should teach them the real thing, not yesterday&#8217;s news, and certainly not teach them practices that we would frown upon.  I reflected on my own TDD experience and realized that one of the benefits of TDD and one of the things that makes it hard is that I really need to understand what my code is doing to test it.  That might sound strange, but it is surprisingly easy to get an intended high-level effect you want without really understanding exactly what your code is doing, especially with Rails.  If you force yourself to write a test, you are creating a detailed contract with yourself.  It is a crystallization of your design that requires an understanding of the code.  I thought that would be really good for the class.  We could write tests that cover some important details that it is easy to gloss over as a newbie.  In this way, TDD would start as a teaching/learning tool, rather than the design tool that it usually is in a typical development process.</p>
<p>Today I met with another TDD teaching proponent, <a href="http://alexch.github.com/">Alex Chafee</a>.  He had <a href="http://twitter.com/alexch/status/3320883966">twittered</a> that he always teaches testing first, and I was intrigued. I joined his regular Sunday study group as a TA, where I had fun teaching about <a href="http://adam.blog.heroku.com/past/2007/12/20/nested_resources_in_rails_2/">nested routes</a>, debugging <a href="http://apidock.com/rails/ActionView/Helpers/FormOptionsHelper/collection_select">collection_select</a>, and spreading the word about <a href="http://guides.rubyonrails.org/2_3_release_notes.html#nested-attributes">nested attributes</a>.  After the class, a few students stayed late and joined me as I learned from Alex about his approach to teaching, which he calls test-driven teaching (TDT).  He did this intially in teaching java and more recently teaching Ruby.  For homework assignments he would give student tests and then they would write the code to make them pass.  This is one of those ideas that I hadn&#8217;t thought of, but as soon as he told me about it, the idea seemed an obvious way to teach.  What beter way to specify an assignment that to provide a test?</p>
<p>What I&#8217;d ike to do for the class is to start with TDT and then shift to TDD once the students are familiar enough with the Ruby syntax and the Rails object model.  It is perhaps aggressive for 6 2-hour classes, but with homework assignments between classes and students who are already programmers, it seems like it could fit into the time frame.</p>
<p>My first challenge is to figure out what are the essential Ruby language constructs that people need to know for writing Rails applications, what would be good exercises for learning those skills, and then write the tests that would require that code to be written.  It feels like a little bit &#8216;o Ruby jeopardy.  Alex has promised to meet with me again to brainstorm and I&#8217;ll publish what we come up with, but if you are reading this and you write Rails applications, I would love your feedback on what are the essential Ruby skills for a Rails engineer (plus any Ruby, Rails or TDD teaching tips would be welcome).</p>
	</div><!-- .entry-content -->
	
	<footer class="entry-meta">
		<span class="cat-links block">Posted in <a href="https://www.ultrasaurus.com/category/general/" rel="category tag">general</a>.</span>	</footer><!-- #entry-meta -->
	
	</article><!-- #post-1963 -->
<nav class="pagination pagination-centered clearfix"><ul class='page-numbers'>
	<li><span aria-current="page" class="page-numbers current">1</span></li>
	<li><a class="page-numbers" href="https://www.ultrasaurus.com/2009/08/page/2/">2</a></li>
	<li><a class="page-numbers" href="https://www.ultrasaurus.com/2009/08/page/3/">3</a></li>
	<li><a class="next page-numbers" href="https://www.ultrasaurus.com/2009/08/page/2/">Next &raquo;</a></li>
</ul>
</nav>	</div><!-- #content -->
	</section><!-- #primary -->

<section id="secondary" class="widget-area span4" role="complementary">
	<aside id="recent-comments-2" class="widget well widget_recent_comments"><h2 class="widget-title">Recent Comments</h2><ul id="recentcomments"><li class="recentcomments"><span class="comment-author-link"><a href='https://da.biomarmicrobialtechnologies.com/' rel='external nofollow ugc' class='url'>Silje Randrup</a></span> on <a href="https://www.ultrasaurus.com/2003/08/the-history-of-the-letter-c/#comment-22370">the history of the letter &#8216;C&#8217;</a></li><li class="recentcomments"><span class="comment-author-link"><a href='http://x--x.us' rel='external nofollow ugc' class='url'>Paula</a></span> on <a href="https://www.ultrasaurus.com/2003/08/the-history-of-the-letter-c/#comment-19549">the history of the letter &#8216;C&#8217;</a></li><li class="recentcomments"><span class="comment-author-link"><a href='http://x--x.us' rel='external nofollow ugc' class='url'>Michelle</a></span> on <a href="https://www.ultrasaurus.com/2003/08/the-history-of-the-letter-c/#comment-19399">the history of the letter &#8216;C&#8217;</a></li><li class="recentcomments"><span class="comment-author-link">Craig</span> on <a href="https://www.ultrasaurus.com/2019/10/http-3-starter-notes-rust-quiche/#comment-18963">http/3 starter notes, rust quiche</a></li><li class="recentcomments"><span class="comment-author-link">Kornel</span> on <a href="https://www.ultrasaurus.com/2019/10/rust-whats-a-tuple-variant/#comment-18539">[rust] what&#8217;s a tuple variant?</a></li><li class="recentcomments"><span class="comment-author-link"><a href='https://apromixately.github.io' rel='external nofollow ugc' class='url'>Simon</a></span> on <a href="https://www.ultrasaurus.com/2019/06/essential-rust-tools/#comment-13007">essential rust tools</a></li><li class="recentcomments"><span class="comment-author-link"><a href='https://balsamiq.com/company/' rel='external nofollow ugc' class='url'>balsamiqVal</a></span> on <a href="https://www.ultrasaurus.com/2018/10/the-path-is-made-by-walking/#comment-9108">the path is made by walking</a></li><li class="recentcomments"><span class="comment-author-link">Jennifer</span> on <a href="https://www.ultrasaurus.com/2018/07/optimize-for-results-not-optics/#comment-8193">optimize for results, not optics</a></li><li class="recentcomments"><span class="comment-author-link">Bernardo Gomes</span> on <a href="https://www.ultrasaurus.com/2016/06/sailsjs-testing-patterns-trunctate-database/#comment-8058">sailsjs testing: how to truncate the database</a></li><li class="recentcomments"><span class="comment-author-link">Bernardo Gomes</span> on <a href="https://www.ultrasaurus.com/2016/06/sailsjs-testing-patterns-trunctate-database/#comment-8057">sailsjs testing: how to truncate the database</a></li></ul></aside>
		<aside id="recent-posts-2" class="widget well widget_recent_entries">
		<h2 class="widget-title">Recent Posts</h2>
		<ul>
											<li>
					<a href="https://www.ultrasaurus.com/2020/07/hope-is-not-a-strategy/">hope is not a strategy</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2020/01/duck-typing-in-rust-trait-vs-type/">duck typing in rust: trait vs type</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2020/01/writing-c-library-in-rust/">writing c library in rust</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2020/01/rust-on-heroku-with-hyper-http/">rust on heroku with hyper http</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2020/01/rust-on-heroku-with-async-await-and-tokio/">rust on heroku with async/await and tokio</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/12/patterns-of-actions-are-a-making/">patterns of actions are a making</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/12/memory-safety-necessary-not-sufficient/">memory safety: necessary, not sufficient</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/12/brief-history-of-rtmp-future-thoughts/">brief history of rtmp + future thoughts</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/12/rust-2020/">rust 2020: fulfill the promise</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/11/nut-loaf-with-red-pepper-sauce/">nut loaf with red pepper sauce</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/10/http-3-starter-notes-rust-quiche/">http/3 starter notes, rust quiche</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/10/rust-whats-a-tuple-variant/">[rust] what&#8217;s a tuple variant?</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/08/graph-in-rust-using-petgraph/">graph in rust using petgraph</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/06/debugging-openssl-shared-libary/">debugging openssl shared libary</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/06/digital-identity-how-to-verify-trust/">digital identity: how to verify trust?</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/06/essential-rust-tools/">essential rust tools</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/05/learning-scala-with-graphics/">learning scala with graphics</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/04/when-reality-is-broken-change-the-rules/">when reality is broken, change the rules</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/04/subverting-saurons-business-model/">subverting Sauron&#8217;s business model</a>
									</li>
											<li>
					<a href="https://www.ultrasaurus.com/2019/02/firebase-auth-migration-from-rails-and-devise/">firebase auth migration from rails/devise</a>
									</li>
					</ul>

		</aside></section><!-- #secondary .widget-area -->
				<footer id="colophon" role="contentinfo" class="span12">
										<div id="page-footer" class="well clearfix">
						<span class="credits alignleft">&copy; 2021 <a href="https://www.ultrasaurus.com/">the evolving ultrasaurus</a>, all rights reserved.</span>						<div id="site-generator">
							<a	href="http://wordpress.org/"
								title="Semantic Personal Publishing Platform"
								target="_blank"
								rel="generator">Proudly powered by WordPress</a>
						</div>
					</div><!-- #page-footer .well .clearfix -->
									</footer><!-- #colophon -->
							</div><!-- #page -->
		</div><!-- .container -->
	<!-- 42 queries. 0.338 seconds. -->
	<script type='text/javascript' src='https://www.ultrasaurus.com/wp-content/themes/the-bootstrap/js/bootstrap.min.js?ver=2.0.3' id='tw-bootstrap-js'></script>
<script type='text/javascript' src='https://www.ultrasaurus.com/wp-content/themes/the-bootstrap/js/the-bootstrap.min.js?ver=2.0.1' id='the-bootstrap-js'></script>
<script type='text/javascript' src='https://www.ultrasaurus.com/wp-includes/js/wp-embed.min.js?ver=5.7.1' id='wp-embed-js'></script>
	</body>
</html>
