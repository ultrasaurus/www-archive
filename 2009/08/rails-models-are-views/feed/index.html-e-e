<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>
	Comments on: rails models are views?	</title>
	<atom:link href="https://www.ultrasaurus.com/2009/08/rails-models-are-views/feed/" rel="self" type="application/rss+xml" />
	<link>https://www.ultrasaurus.com/2009/08/rails-models-are-views/</link>
	<description>Sarah Allen&#039;s reflections on internet software and other topics</description>
	<lastBuildDate>Thu, 02 Sep 2010 01:35:19 +0000</lastBuildDate>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.1</generator>
	<item>
		<title>
		By: Dmitry		</title>
		<link>https://www.ultrasaurus.com/2009/08/rails-models-are-views/#comment-618</link>

		<dc:creator><![CDATA[Dmitry]]></dc:creator>
		<pubDate>Thu, 02 Sep 2010 01:35:19 +0000</pubDate>
		<guid isPermaLink="false">https://www.ultrasaurus.com/?p=2032#comment-618</guid>

					<description><![CDATA[What do you think to use something like that: http://github.com/nothingmuch/template-plugin-json

Actually I have the same problem right now, I don&#039;t want to use hard things like haml like style, argonaut or .json.erb. I want something simple, embedded in rails, but I think there aren&#039;t anykind of possibility. What can I think it&#039;s possible to create hash array in helper method, then add it into a format.json { render :json =&#062; json_generation_helper_method(@object) }

Anyway I will use plugin that I have told you in the beginning. It will be easier to move to the rails3 in the future, because rails3 now have easier api to add such kind of things, like template handlers.

Thanks,
Dmitry]]></description>
			<content:encoded><![CDATA[<p>What do you think to use something like that: <a href="http://github.com/nothingmuch/template-plugin-json" rel="nofollow ugc">http://github.com/nothingmuch/template-plugin-json</a></p>
<p>Actually I have the same problem right now, I don&#8217;t want to use hard things like haml like style, argonaut or .json.erb. I want something simple, embedded in rails, but I think there aren&#8217;t anykind of possibility. What can I think it&#8217;s possible to create hash array in helper method, then add it into a format.json { render :json =&gt; json_generation_helper_method(@object) }</p>
<p>Anyway I will use plugin that I have told you in the beginning. It will be easier to move to the rails3 in the future, because rails3 now have easier api to add such kind of things, like template handlers.</p>
<p>Thanks,<br />
Dmitry</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Sarah		</title>
		<link>https://www.ultrasaurus.com/2009/08/rails-models-are-views/#comment-617</link>

		<dc:creator><![CDATA[Sarah]]></dc:creator>
		<pubDate>Wed, 14 Apr 2010 19:34:36 +0000</pubDate>
		<guid isPermaLink="false">https://www.ultrasaurus.com/?p=2032#comment-617</guid>

					<description><![CDATA[Micheal,

Thanks for your thoughtful response to my post. I agree that the Controller&#039;s primary role is to mediate interaction with the user, but in Rails the standard pattern is for the controller to pick out the URL params and find which model to act on and then render a specific view for that model.  

The issue I was raising in the first code example was that there is no view if the controller simple calls .to_json on the model.  You suggest that this is one viable option when we are creating machine-to-machine communication and we control both ends.  You have a point that I think many would agree with.  However, I believe that it is the better pattern to think of machine-to-machine communication as a user interface. In defining the ways in which machines communication, we define protocols.  I would argue that it is never a good idea to directly expose an internal data structure in a protocol -- that may be a starting point, but at minimum you will want to add a version field!  By exposing the internal data structures of one subsystem, it can make it easy to accidentally break another subsystem when you optimize the implementation and make other non-functional changes.

That said, in thinking about this further, I wonder if the right approach to the problem I describe above would be to have the model define a custom to_json implementation with an optional version argument, so it can maintain multiple representations of its data.

Sarah]]></description>
			<content:encoded><![CDATA[<p>Micheal,</p>
<p>Thanks for your thoughtful response to my post. I agree that the Controller&#8217;s primary role is to mediate interaction with the user, but in Rails the standard pattern is for the controller to pick out the URL params and find which model to act on and then render a specific view for that model.  </p>
<p>The issue I was raising in the first code example was that there is no view if the controller simple calls .to_json on the model.  You suggest that this is one viable option when we are creating machine-to-machine communication and we control both ends.  You have a point that I think many would agree with.  However, I believe that it is the better pattern to think of machine-to-machine communication as a user interface. In defining the ways in which machines communication, we define protocols.  I would argue that it is never a good idea to directly expose an internal data structure in a protocol &#8212; that may be a starting point, but at minimum you will want to add a version field!  By exposing the internal data structures of one subsystem, it can make it easy to accidentally break another subsystem when you optimize the implementation and make other non-functional changes.</p>
<p>That said, in thinking about this further, I wonder if the right approach to the problem I describe above would be to have the model define a custom to_json implementation with an optional version argument, so it can maintain multiple representations of its data.</p>
<p>Sarah</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Michael Hines		</title>
		<link>https://www.ultrasaurus.com/2009/08/rails-models-are-views/#comment-616</link>

		<dc:creator><![CDATA[Michael Hines]]></dc:creator>
		<pubDate>Wed, 14 Apr 2010 07:29:56 +0000</pubDate>
		<guid isPermaLink="false">https://www.ultrasaurus.com/?p=2032#comment-616</guid>

					<description><![CDATA[I think you&#039;re misunderstanding MVC.  It&#039;s not the controller&#039;s job to &quot;mediate&quot; the interaction between models and views.  What you are describing is a model-view-adapter paradigm.  In MVC the role of a model is to represent the data in a machine-readable format, the role of the view is to make the model easy for the user to understand by renderering data into a human-understandable form based directly on the models, and the role of the controller is to respond to events by telling the view and/or the model what to do with that event (what, not how).  Note that the controller&#039;s job is not to translate the model for the view, that&#039;s the view&#039;s job.  Classically, you should not be joining strings or totaling numbers for the view in your controller.

MVC was designed to be appropriate for creating end-user applications in the 70s.  It was not designed with inter-process communication in mind, and so it&#039;s not surprising that the concept doesn&#039;t fit well.  Therefore there are two appropriate ways to deal with this.  The first is to consider the machine requesting data as a user, and give it a response as a view designed to represent its expected representation of the data.  This is appropriate for example when you need to conform to an arbitrary xml doctype that is not well represented by the internal state of your model.  For example, if you need to manipulate the data from the model to represent new things that are only useful to the consumer.  

When you have control over the consumer or are defining your own API, it&#039;s more appropriate to expect that the internal representations of the model are/will be the same on both ends.  With this in mind, when a consumer makes a REST API request the controller receives this event and understands it as a request for a machine-representation of the data.  This is the model&#039;s job, so it&#039;s entirely appropriate for the controller to respond by returning the model.  JSON or XML is just your chosen text-serialized representation of the internal data of your model, it&#039;s not a &quot;view&quot; in this case.

Note also, that the concept of a RESTful interface favors the second option when your resources are well represented by you models, which they are in most Rails apps.  You should be thinking twice when you do this:
      xml.sku product.sku
      xml.name product.name
      xml.brand product.brand
And it&#039;s appropriate to expect that your client already knows how to find a basic action, since you&#039;re using RESTful URIs, so you just need to give them a key (not necessarily the one in your database).  You don&#039;t need to offer them this:
      xml.img_url url_for(:controller =&#062; :products, :action =&#062; :show, :format=&#062;:png, :id =&#062;

Also, you say URIs &quot;belong in the view layer&quot;.  A URI is actually a request on the controller, not the view.  Just because your .erb files are in the folders that correspond to your URIs doesn&#039;t mean that the request for a URI is a request for a representation of that view.  The fact that the structure of views might mimic the structure of your controllers and models is not something inherently MVC.  It&#039;s actually a sign that you might have a poor user interface, since the point of MVC is to let views represent data in a structure more appropriate for user interaction than the model representation can.]]></description>
			<content:encoded><![CDATA[<p>I think you&#8217;re misunderstanding MVC.  It&#8217;s not the controller&#8217;s job to &#8220;mediate&#8221; the interaction between models and views.  What you are describing is a model-view-adapter paradigm.  In MVC the role of a model is to represent the data in a machine-readable format, the role of the view is to make the model easy for the user to understand by renderering data into a human-understandable form based directly on the models, and the role of the controller is to respond to events by telling the view and/or the model what to do with that event (what, not how).  Note that the controller&#8217;s job is not to translate the model for the view, that&#8217;s the view&#8217;s job.  Classically, you should not be joining strings or totaling numbers for the view in your controller.</p>
<p>MVC was designed to be appropriate for creating end-user applications in the 70s.  It was not designed with inter-process communication in mind, and so it&#8217;s not surprising that the concept doesn&#8217;t fit well.  Therefore there are two appropriate ways to deal with this.  The first is to consider the machine requesting data as a user, and give it a response as a view designed to represent its expected representation of the data.  This is appropriate for example when you need to conform to an arbitrary xml doctype that is not well represented by the internal state of your model.  For example, if you need to manipulate the data from the model to represent new things that are only useful to the consumer.  </p>
<p>When you have control over the consumer or are defining your own API, it&#8217;s more appropriate to expect that the internal representations of the model are/will be the same on both ends.  With this in mind, when a consumer makes a REST API request the controller receives this event and understands it as a request for a machine-representation of the data.  This is the model&#8217;s job, so it&#8217;s entirely appropriate for the controller to respond by returning the model.  JSON or XML is just your chosen text-serialized representation of the internal data of your model, it&#8217;s not a &#8220;view&#8221; in this case.</p>
<p>Note also, that the concept of a RESTful interface favors the second option when your resources are well represented by you models, which they are in most Rails apps.  You should be thinking twice when you do this:<br />
      xml.sku product.sku<br />
      xml.name product.name<br />
      xml.brand product.brand<br />
And it&#8217;s appropriate to expect that your client already knows how to find a basic action, since you&#8217;re using RESTful URIs, so you just need to give them a key (not necessarily the one in your database).  You don&#8217;t need to offer them this:<br />
      xml.img_url url_for(:controller =&gt; :products, :action =&gt; :show, :format=&gt;:png, :id =&gt;</p>
<p>Also, you say URIs &#8220;belong in the view layer&#8221;.  A URI is actually a request on the controller, not the view.  Just because your .erb files are in the folders that correspond to your URIs doesn&#8217;t mean that the request for a URI is a request for a representation of that view.  The fact that the structure of views might mimic the structure of your controllers and models is not something inherently MVC.  It&#8217;s actually a sign that you might have a poor user interface, since the point of MVC is to let views represent data in a structure more appropriate for user interaction than the model representation can.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: seth		</title>
		<link>https://www.ultrasaurus.com/2009/08/rails-models-are-views/#comment-615</link>

		<dc:creator><![CDATA[seth]]></dc:creator>
		<pubDate>Tue, 01 Sep 2009 08:00:39 +0000</pubDate>
		<guid isPermaLink="false">https://www.ultrasaurus.com/?p=2032#comment-615</guid>

					<description><![CDATA[fresh out of rails rumble, a haml-like json generation language: http://rozenbom.r09.railsrumble.com/tequila.]]></description>
			<content:encoded><![CDATA[<p>fresh out of rails rumble, a haml-like json generation language: <a href="http://rozenbom.r09.railsrumble.com/tequila" rel="nofollow ugc">http://rozenbom.r09.railsrumble.com/tequila</a>.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Robin Curry		</title>
		<link>https://www.ultrasaurus.com/2009/08/rails-models-are-views/#comment-614</link>

		<dc:creator><![CDATA[Robin Curry]]></dc:creator>
		<pubDate>Tue, 01 Sep 2009 05:35:30 +0000</pubDate>
		<guid isPermaLink="false">https://www.ultrasaurus.com/?p=2032#comment-614</guid>

					<description><![CDATA[It definitely feels like a glaring omission that there is not a JSON builder similar to xml builder. The way I&#039;ve gotten around this in an app where I had a similar issue was to create an erb template (i.e. index.json.erb) and build the json response inside by hand. Then just render the template in the format.json block instead. Seems like a kludge though.]]></description>
			<content:encoded><![CDATA[<p>It definitely feels like a glaring omission that there is not a JSON builder similar to xml builder. The way I&#8217;ve gotten around this in an app where I had a similar issue was to create an erb template (i.e. index.json.erb) and build the json response inside by hand. Then just render the template in the format.json block instead. Seems like a kludge though.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Jacob Rothstein		</title>
		<link>https://www.ultrasaurus.com/2009/08/rails-models-are-views/#comment-613</link>

		<dc:creator><![CDATA[Jacob Rothstein]]></dc:creator>
		<pubDate>Tue, 01 Sep 2009 05:31:35 +0000</pubDate>
		<guid isPermaLink="false">https://www.ultrasaurus.com/?p=2032#comment-613</guid>

					<description><![CDATA[I agree wholeheartedly about the inappropriateness of the to_json and to_xml methods.  As soon as you want to start messing with them, you&#039;re putting view code into the model layer, which is just wrong.  I was surprised there wasn&#039;t a JSON builder/template handler, so I hacked one out.  It&#039;s up on github at http://github.com/jbr/argonaut.  I&#039;m not certain that I feel the builder pattern is more elegant than just building up a Ruby hash and calling to_json on it, but it was certainly fun to build.  Yay Rails!]]></description>
			<content:encoded><![CDATA[<p>I agree wholeheartedly about the inappropriateness of the to_json and to_xml methods.  As soon as you want to start messing with them, you&#8217;re putting view code into the model layer, which is just wrong.  I was surprised there wasn&#8217;t a JSON builder/template handler, so I hacked one out.  It&#8217;s up on github at <a href="http://github.com/jbr/argonaut" rel="nofollow ugc">http://github.com/jbr/argonaut</a>.  I&#8217;m not certain that I feel the builder pattern is more elegant than just building up a Ruby hash and calling to_json on it, but it was certainly fun to build.  Yay Rails!</p>
]]></content:encoded>
		
			</item>
	</channel>
</rss>
