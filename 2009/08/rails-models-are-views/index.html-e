<!DOCTYPE html>
<html class="no-js" lang="en-US">
	<head>
				<link rel="profile" href="http://gmpg.org/xfn/11" />
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		
		<title>rails models are views? &laquo; the evolving ultrasaurus</title>
		
				<meta name='robots' content='max-image-preview:large' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="the evolving ultrasaurus &raquo; Feed" href="/feed/" />
<link rel="alternate" type="application/rss+xml" title="the evolving ultrasaurus &raquo; Comments Feed" href="/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="the evolving ultrasaurus &raquo; rails models are views? Comments Feed" href="/2009/08/rails-models-are-views/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.0.1\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.0.1\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/www.ultrasaurus.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=5.7.1"}};
			!function(e,a,t){var n,r,o,i=a.createElement("canvas"),p=i.getContext&&i.getContext("2d");function s(e,t){var a=String.fromCharCode;p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,e),0,0);e=i.toDataURL();return p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,t),0,0),e===i.toDataURL()}function c(e){var t=a.createElement("script");t.src=e,t.defer=t.type="text/javascript",a.getElementsByTagName("head")[0].appendChild(t)}for(o=Array("flag","emoji"),t.supports={everything:!0,everythingExceptFlag:!0},r=0;r<o.length;r++)t.supports[o[r]]=function(e){if(!p||!p.fillText)return!1;switch(p.textBaseline="top",p.font="600 32px Arial",e){case"flag":return s([127987,65039,8205,9895,65039],[127987,65039,8203,9895,65039])?!1:!s([55356,56826,55356,56819],[55356,56826,8203,55356,56819])&&!s([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]);case"emoji":return!s([55357,56424,8205,55356,57212],[55357,56424,8203,55356,57212])}return!1}(o[r]),t.supports.everything=t.supports.everything&&t.supports[o[r]],"flag"!==o[r]&&(t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&t.supports[o[r]]);t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&!t.supports.flag,t.DOMReady=!1,t.readyCallback=function(){t.DOMReady=!0},t.supports.everything||(n=function(){t.readyCallback()},a.addEventListener?(a.addEventListener("DOMContentLoaded",n,!1),e.addEventListener("load",n,!1)):(e.attachEvent("onload",n),a.attachEvent("onreadystatechange",function(){"complete"===a.readyState&&t.readyCallback()})),(n=t.source||{}).concatemoji?c(n.concatemoji):n.wpemoji&&n.twemoji&&(c(n.twemoji),c(n.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<link rel='stylesheet' id='mailchimpSF_main_css-css'  href='/?mcsf_action=main_css&#038;ver=5.7.1' type='text/css' media='all' />
<!--[if IE]>
<link rel='stylesheet' id='mailchimpSF_ie_css-css'  href='/wp-content/plugins/mailchimp/css/ie.css?ver=5.7.1' type='text/css' media='all' />
<![endif]-->
<link rel='stylesheet' id='wp-block-library-css'  href='/wp-includes/css/dist/block-library/style.min.css?ver=5.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='tw-bootstrap-css'  href='/wp-content/themes/the-bootstrap/css/bootstrap.min.css?ver=2.0.3' type='text/css' media='all' />
<link rel='stylesheet' id='the-bootstrap-css'  href='/wp-content/themes/the-bootstrap/style.min.css?ver=2.0.1' type='text/css' media='all' />
<style id='the-bootstrap-inline-css' type='text/css'>
body > .container{margin-top:68px;}@media(min-width: 980px){body > .container{margin-top:58px;}}
</style>
<script type='text/javascript' src='/wp-includes/js/jquery/jquery.min.js?ver=3.5.1' id='jquery-core-js'></script>
<script type='text/javascript' src='/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.3.2' id='jquery-migrate-js'></script>
<script type='text/javascript' src='/wp-content/plugins/google-analyticator/external-tracking.min.js?ver=6.5.4' id='ga-external-tracking-js'></script>
<link rel="https://api.w.org/" href="/wp-json/" /><link rel="alternate" type="application/json" href="/wp-json/wp/v2/posts/2032" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 5.7.1" />
<link rel="canonical" href="/2009/08/rails-models-are-views/" />
<link rel='shortlink' href='/?p=2032' />
<link rel="alternate" type="application/json+oembed" href="/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.ultrasaurus.com%2F2009%2F08%2Frails-models-are-views%2F" />
<link rel="alternate" type="text/xml+oembed" href="/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.ultrasaurus.com%2F2009%2F08%2Frails-models-are-views%2F&#038;format=xml" />
<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>	<style type="text/css">
				#branding hgroup {
			position: absolute !important;
			clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
			clip: rect(1px, 1px, 1px, 1px);
		}
			</style>
		<!--[if lt IE 9]>
		<script src="/wp-content/themes/the-bootstrap/js/html5shiv.min.js" type="text/javascript"></script>
		<script src="/wp-content/themes/the-bootstrap/js/respond.min.js" type="text/javascript"></script>
	<![endif]-->
	<!-- Google Analytics Tracking by Google Analyticator 6.5.4: http://www.videousermanuals.com/google-analyticator/ -->
<script type="text/javascript">
    var analyticsFileTypes = [''];
    var analyticsSnippet = 'enabled';
    var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
  
	_gaq.push(['_setAccount', 'UA-4313619-1']);
    _gaq.push(['_addDevId', 'i9k95']); // Google Analyticator App ID with Google
    _gaq.push(['_gat._anonymizeIp']);
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
		<style type="text/css" id="wp-custom-css">
			code {
	color: #70a
}

p {
	color: #333
}

blockquote p {
	font-size: 14px;
	font-weight: normal;
	padding-top: 6px;
	padding-bottom: 6px;
	padding-left: 10px;
	padding-right: 60px;
	line-height: 1.2;
}		</style>
			</head>
	
	<body class="post-template-default single single-post postid-2032 single-format-standard content-sidebar">
		<div class="container">
			<div id="page" class="hfeed row">
								<header id="branding" role="banner" class="span12">
										<hgroup>
						<h1 id="site-title">
							<a href="/" title="the evolving ultrasaurus" rel="home">
								<span>the evolving ultrasaurus</span>
							</a>
						</h1>
						<h2 id="site-description">Sarah Allen&#039;s reflections on internet software and other topics</h2>
					</hgroup>
					
					
					<nav id="access" role="navigation">
						<h3 class="assistive-text">Main menu</h3>
						<div class="skip-link"><a class="assistive-text" href="#content" title="Skip to primary content">Skip to primary content</a></div>
						<div class="skip-link"><a class="assistive-text" href="#secondary" title="Skip to secondary content">Skip to secondary content</a></div>
												<div class="navbar navbar-fixed-top navbar-inverse">
							<div class="navbar-inner">
								<div class="container">
									<!-- .btn-navbar is used as the toggle for collapsed navbar content -->
									<a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
										<span class="icon-bar"></span>
										<span class="icon-bar"></span>
										<span class="icon-bar"></span>
									</a>
																		<span class="brand">the evolving ultrasaurus</span>
																		<div class="nav-collapse">
										<div class="menu-primary-container"><ul id="menu-primary" class="nav"><li id="menu-item-4272" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4272"><a href="/about/">About</a></li>
<li id="menu-item-6605" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6605"><a href="/speaking/">Speaking</a></li>
<li id="menu-item-6366" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-6366"><a href="/code/">Code</a></li>
<li id="menu-item-4269" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4269"><a href="/archives/">Archives</a></li>
<li id="menu-item-4759" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4759"><a href="/contact/">Contact</a></li>
<li id="menu-item-4697" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4697"><a href="/ultrasaurus/">What is an ultrasaurus?</a></li>
</ul></div>	<form id="searchform" class="navbar-search pull-right" method="get" action="/">
						<label for="s" class="assistive-text hidden">Search</label>
						<input type="search" class="search-query" name="s" id="s" placeholder="Search" />
					</form>								    </div>
								</div>
							</div>
						</div>
											</nav><!-- #access -->
									</header><!-- #branding -->
<section id="primary" class="span8">
	
		<div id="content" role="main">
		<article id="post-2032" class="post-2032 post type-post status-publish format-standard hentry category-code">
		
	<header class="page-header">
		<h1 class="entry-title">rails models are views?</h1>		<div class="entry-meta"><span class="sep">Posted on </span><a href="/2009/08/rails-models-are-views/" title="7:07 pm" rel="bookmark"><time class="entry-date" datetime="2009-08-31T19:07:10-07:00" pubdate>August 31, 2009</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="/author/sarah/" title="View all posts by sarah" rel="author">sarah</a></span></span>		<span class="sep"> | </span>
		<span class="comments-link">
			<a href="/2009/08/rails-models-are-views/#comments"><strong>6</strong> Replies</a>		</span>
		</div><!-- .entry-meta -->
	</header><!-- .entry-header -->

	<div class="entry-content clearfix">
		<p>Rails appears pretty strict about separation of the abstraction layers that make up its notion of a web application: models, view and controllers.  If you were to suggest calling a presentation method, such as url_for, in your model, the stoic Rails advocate will have an allergic reaction. However, Rails thinks nothing of rendering a model directly as a view, such as:</p>
<pre>
format.json { render :json =&gt; @products }
</pre>
<p>Now, one might argue that this is controller code and the controller is allowed to interpret the model as a view.  The controller&#8217;s job is to mediate this interaction.  However, I feel that it is a dangerous shortcut, made even more so by how hard to seems to be to override.  Perhaps the json implementation is simply incomplete.</p>
<p>In xml, this strange controller pattern is easily corrected by <a href="http://danengle.us/2009/05/generating-custom-xml-for-your-rails-app/">providing an xml view</a>.  The xml builder syntax is particularly readable, and it is easy to design your XML API effectively.</p>
<p>I haven&#8217;t found an equivalent for json.  I tried to use a JSON API today to no avail.  My model included image data which breaks when auto-rendered in JSON.  What I really wanted was to include a URL instead of the image data, which I implement neatly in my xml.builder view:</p>
<pre>
xml.instruct!
xml.products("type"=&gt;"array") do
  @products.each do |product|
    xml.product do
      xml.sku product.sku
      xml.name product.name
      xml.brand product.brand
      xml.img_url url_for(:controller =&gt; :products, :action =&gt; :show, :format=&gt;:png, :id =&gt; product.id, :only_path =&gt; false)
    end
  end
end
</pre>
<p>The problem is that I want a similar view in JSON.  The to_json API leads me to put this logic in my model (gasp!).  In fact, the ActiveRecord::Serialization docs give an example of providing a method to generate JSON instead of a literal attribute.  The example is of a &#8220;permalink&#8221; which seem suspiciously like something that belongs is the view layer.</p>
<pre>
  konata.to_json(:methods =&gt; :permalink)
  # =&gt; {"id": 1, "name": "Konata Izumi", "age": 16,
        "created_at": "2006/08/01", "awesome": true,
        "permalink": "1-konata-izumi"}
</pre>
<p>Today&#8217;s solution was to go back to using my comfortable old XML API, but I would prefer to consume JSON from the other side.  I wonder if anyone is working on a JSON builder or if there is some clear solution that I haven&#8217;t yet stumbled upon.</p>
	</div><!-- .entry-content -->

	<footer class="entry-footer">
		<span class="cat-links block">Posted in <a href="/category/code/" rel="category tag">code</a>.</span>	</footer><!-- .entry-footer -->
	
	</article><!-- #post-2032 -->
		<div id="comments">
			<h2 id="comments-title">
				6 thoughts on &ldquo;<span>rails models are views?</span>&rdquo;			</h2>
		
					
			<ol class="commentlist unstyled">
						
		<li  id="li-comment-613" class="comment even thread-even depth-1">
			<article id="comment-613" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/758cc350bec6c1e6f2bb5979bd079ab6?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/758cc350bec6c1e6f2bb5979bd079ab6?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn"><a href='http://www.jacobrothstein.com/' rel='external nofollow ugc' class='url'>Jacob Rothstein</a></span> <span class="says">said</span> on <a href="/2009/08/rails-models-are-views/#comment-613"><time pubdate datetime="2009-08-31T21:31:35-07:00">August 31, 2009 at 9:31 pm</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>I agree wholeheartedly about the inappropriateness of the to_json and to_xml methods.  As soon as you want to start messing with them, you&#8217;re putting view code into the model layer, which is just wrong.  I was surprised there wasn&#8217;t a JSON builder/template handler, so I hacked one out.  It&#8217;s up on github at <a href="http://github.com/jbr/argonaut" rel="nofollow ugc">http://github.com/jbr/argonaut</a>.  I&#8217;m not certain that I feel the builder pattern is more elegant than just building up a Ruby hash and calling to_json on it, but it was certainly fun to build.  Yay Rails!</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-613 .comment -->
			
	</li><!-- #comment-## -->
		
		<li  id="li-comment-614" class="comment odd alt thread-odd thread-alt depth-1">
			<article id="comment-614" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/87c328b5e3f211e77ca52efc0f12e5d3?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/87c328b5e3f211e77ca52efc0f12e5d3?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn"><a href='http://blog.robincurry.com' rel='external nofollow ugc' class='url'>Robin Curry</a></span> <span class="says">said</span> on <a href="/2009/08/rails-models-are-views/#comment-614"><time pubdate datetime="2009-08-31T21:35:30-07:00">August 31, 2009 at 9:35 pm</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>It definitely feels like a glaring omission that there is not a JSON builder similar to xml builder. The way I&#8217;ve gotten around this in an app where I had a similar issue was to create an erb template (i.e. index.json.erb) and build the json response inside by hand. Then just render the template in the format.json block instead. Seems like a kludge though.</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-614 .comment -->
			
	</li><!-- #comment-## -->
		
		<li  id="li-comment-615" class="comment even thread-even depth-1">
			<article id="comment-615" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/4c503227d8efcf1a7eee98dbbe4f140f?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/4c503227d8efcf1a7eee98dbbe4f140f?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn">seth</span> <span class="says">said</span> on <a href="/2009/08/rails-models-are-views/#comment-615"><time pubdate datetime="2009-09-01T00:00:39-07:00">September 1, 2009 at 12:00 am</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>fresh out of rails rumble, a haml-like json generation language: <a href="http://rozenbom.r09.railsrumble.com/tequila" rel="nofollow ugc">http://rozenbom.r09.railsrumble.com/tequila</a>.</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-615 .comment -->
			
	</li><!-- #comment-## -->
		
		<li  id="li-comment-616" class="comment odd alt thread-odd thread-alt depth-1">
			<article id="comment-616" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/2f27dd0b3e9de487b4859dc21a507f64?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/2f27dd0b3e9de487b4859dc21a507f64?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn">Michael Hines</span> <span class="says">said</span> on <a href="/2009/08/rails-models-are-views/#comment-616"><time pubdate datetime="2010-04-13T23:29:56-07:00">April 13, 2010 at 11:29 pm</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>I think you&#8217;re misunderstanding MVC.  It&#8217;s not the controller&#8217;s job to &#8220;mediate&#8221; the interaction between models and views.  What you are describing is a model-view-adapter paradigm.  In MVC the role of a model is to represent the data in a machine-readable format, the role of the view is to make the model easy for the user to understand by renderering data into a human-understandable form based directly on the models, and the role of the controller is to respond to events by telling the view and/or the model what to do with that event (what, not how).  Note that the controller&#8217;s job is not to translate the model for the view, that&#8217;s the view&#8217;s job.  Classically, you should not be joining strings or totaling numbers for the view in your controller.</p>
<p>MVC was designed to be appropriate for creating end-user applications in the 70s.  It was not designed with inter-process communication in mind, and so it&#8217;s not surprising that the concept doesn&#8217;t fit well.  Therefore there are two appropriate ways to deal with this.  The first is to consider the machine requesting data as a user, and give it a response as a view designed to represent its expected representation of the data.  This is appropriate for example when you need to conform to an arbitrary xml doctype that is not well represented by the internal state of your model.  For example, if you need to manipulate the data from the model to represent new things that are only useful to the consumer.  </p>
<p>When you have control over the consumer or are defining your own API, it&#8217;s more appropriate to expect that the internal representations of the model are/will be the same on both ends.  With this in mind, when a consumer makes a REST API request the controller receives this event and understands it as a request for a machine-representation of the data.  This is the model&#8217;s job, so it&#8217;s entirely appropriate for the controller to respond by returning the model.  JSON or XML is just your chosen text-serialized representation of the internal data of your model, it&#8217;s not a &#8220;view&#8221; in this case.</p>
<p>Note also, that the concept of a RESTful interface favors the second option when your resources are well represented by you models, which they are in most Rails apps.  You should be thinking twice when you do this:<br />
      xml.sku product.sku<br />
      xml.name product.name<br />
      xml.brand product.brand<br />
And it&#8217;s appropriate to expect that your client already knows how to find a basic action, since you&#8217;re using RESTful URIs, so you just need to give them a key (not necessarily the one in your database).  You don&#8217;t need to offer them this:<br />
      xml.img_url url_for(:controller =&gt; :products, :action =&gt; :show, :format=&gt;:png, :id =&gt;</p>
<p>Also, you say URIs &#8220;belong in the view layer&#8221;.  A URI is actually a request on the controller, not the view.  Just because your .erb files are in the folders that correspond to your URIs doesn&#8217;t mean that the request for a URI is a request for a representation of that view.  The fact that the structure of views might mimic the structure of your controllers and models is not something inherently MVC.  It&#8217;s actually a sign that you might have a poor user interface, since the point of MVC is to let views represent data in a structure more appropriate for user interaction than the model representation can.</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-616 .comment -->
			
	</li><!-- #comment-## -->
		
		<li  id="li-comment-617" class="comment even thread-even depth-1">
			<article id="comment-617" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/20ee0d23c969c7740d3c936a4675bb23?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/20ee0d23c969c7740d3c936a4675bb23?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn"><a href='' rel='external nofollow ugc' class='url'>Sarah</a></span> <span class="says">said</span> on <a href="/2009/08/rails-models-are-views/#comment-617"><time pubdate datetime="2010-04-14T11:34:36-07:00">April 14, 2010 at 11:34 am</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>Micheal,</p>
<p>Thanks for your thoughtful response to my post. I agree that the Controller&#8217;s primary role is to mediate interaction with the user, but in Rails the standard pattern is for the controller to pick out the URL params and find which model to act on and then render a specific view for that model.  </p>
<p>The issue I was raising in the first code example was that there is no view if the controller simple calls .to_json on the model.  You suggest that this is one viable option when we are creating machine-to-machine communication and we control both ends.  You have a point that I think many would agree with.  However, I believe that it is the better pattern to think of machine-to-machine communication as a user interface. In defining the ways in which machines communication, we define protocols.  I would argue that it is never a good idea to directly expose an internal data structure in a protocol &#8212; that may be a starting point, but at minimum you will want to add a version field!  By exposing the internal data structures of one subsystem, it can make it easy to accidentally break another subsystem when you optimize the implementation and make other non-functional changes.</p>
<p>That said, in thinking about this further, I wonder if the right approach to the problem I describe above would be to have the model define a custom to_json implementation with an optional version argument, so it can maintain multiple representations of its data.</p>
<p>Sarah</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-617 .comment -->
			
	</li><!-- #comment-## -->
		
		<li  id="li-comment-618" class="comment odd alt thread-odd thread-alt depth-1">
			<article id="comment-618" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/832ed6ace46d61032151f4e1864c057f?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/832ed6ace46d61032151f4e1864c057f?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn"><a href='http://dmitry.eu' rel='external nofollow ugc' class='url'>Dmitry</a></span> <span class="says">said</span> on <a href="/2009/08/rails-models-are-views/#comment-618"><time pubdate datetime="2010-09-01T17:35:19-07:00">September 1, 2010 at 5:35 pm</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>What do you think to use something like that: <a href="http://github.com/nothingmuch/template-plugin-json" rel="nofollow ugc">http://github.com/nothingmuch/template-plugin-json</a></p>
<p>Actually I have the same problem right now, I don&#8217;t want to use hard things like haml like style, argonaut or .json.erb. I want something simple, embedded in rails, but I think there aren&#8217;t anykind of possibility. What can I think it&#8217;s possible to create hash array in helper method, then add it into a format.json { render :json =&gt; json_generation_helper_method(@object) }</p>
<p>Anyway I will use plugin that I have told you in the beginning. It will be easier to move to the rails3 in the future, because rails3 now have easier api to add such kind of things, like template handlers.</p>
<p>Thanks,<br />
Dmitry</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-618 .comment -->
			
	</li><!-- #comment-## -->
			</ol><!-- .commentlist .unstyled -->
		
					
		</div><!-- #comments -->
		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title"><legend>Leave a reply</legend> <small><a rel="nofollow" id="cancel-comment-reply-link" href="/2009/08/rails-models-are-views/#respond" style="display:none;">Cancel reply</a></small></h3><form action="/wp-comments-post.php" method="post" id="commentform" class="comment-form"><div class="form-horizontal"><div class="comment-form-comment control-group"><label class="control-label" for="comment">Comment</label><div class="controls"><textarea autocomplete="new-password"  class="span7" id="b42047321d"  name="b42047321d"   rows="8" aria-required="true"></textarea><textarea id="comment" aria-hidden="true" name="comment" autocomplete="new-password" style="padding:0 !important;clip:rect(1px, 1px, 1px, 1px) !important;position:absolute !important;white-space:nowrap !important;height:1px !important;width:1px !important;overflow:hidden !important;" tabindex="-1"></textarea><script data-noptimize type="text/javascript">document.getElementById("comment").setAttribute( "id", "afed23a34b6902454a2d4dbbbebd61c9" );document.getElementById("b42047321d").setAttribute( "id", "comment" );</script></div></div><div class="form-allowed-tags control-group"><label class="control-label">You may use these <abbr title="HyperText Markup Language">HTML</abbr> tags and attributes: </label><div class="controls"><pre>&lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;s&gt; &lt;strike&gt; &lt;strong&gt; </pre></div></div>
									 <div class="form-actions"><div class="comment-form-author control-group">
				<label for="author" class="control-label">Name</label>
				<div class="controls">
					<input id="author" name="author" type="text" value="" size="30" aria-required='true' />
					<p class="help-inline"><span class="required">required</span></p>
				</div>
			</div>
<div class="comment-form-email control-group">
				<label for="email" class="control-label">Email</label>
				<div class="controls">
					<input id="email" name="email" type="email" value="" size="30" aria-required='true' />
					<p class="help-inline"><span class="required">required</span>, will not be published</p>
				</div>
			</div>
<div class="comment-form-url control-group">
				<label for="url" class="control-label">Website</label>
				<div class="controls">
					<input id="url" name="url" type="url" value="" size="30" />
				</div>
			</div>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='2032' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p></div></div></form>	</div><!-- #respond -->
			
		<nav id="nav-single" class="pager">
			<h3 class="assistive-text">Post navigation</h3>
			<span class="next"><a href="/2009/09/learning-through-testing/" rel="next">Next Post <span class="meta-nav">&rarr;</span></a></span>
			<span class="previous"><a href="/2009/08/ruby-unit-test-frameworks/" rel="prev"><span class="meta-nav">&larr;</span> Previous Post</a></span>
		</nav><!-- #nav-single -->
		
			</div><!-- #content -->
	</section><!-- #primary -->

<section id="secondary" class="widget-area span4" role="complementary">
	<aside id="recent-comments-2" class="widget well widget_recent_comments"><h2 class="widget-title">Recent Comments</h2><ul id="recentcomments"><li class="recentcomments"><span class="comment-author-link"><a href='https://da.biomarmicrobialtechnologies.com/' rel='external nofollow ugc' class='url'>Silje Randrup</a></span> on <a href="/2003/08/the-history-of-the-letter-c/#comment-22370">the history of the letter &#8216;C&#8217;</a></li><li class="recentcomments"><span class="comment-author-link"><a href='http://x--x.us' rel='external nofollow ugc' class='url'>Paula</a></span> on <a href="/2003/08/the-history-of-the-letter-c/#comment-19549">the history of the letter &#8216;C&#8217;</a></li><li class="recentcomments"><span class="comment-author-link"><a href='http://x--x.us' rel='external nofollow ugc' class='url'>Michelle</a></span> on <a href="/2003/08/the-history-of-the-letter-c/#comment-19399">the history of the letter &#8216;C&#8217;</a></li><li class="recentcomments"><span class="comment-author-link">Craig</span> on <a href="/2019/10/http-3-starter-notes-rust-quiche/#comment-18963">http/3 starter notes, rust quiche</a></li><li class="recentcomments"><span class="comment-author-link">Kornel</span> on <a href="/2019/10/rust-whats-a-tuple-variant/#comment-18539">[rust] what&#8217;s a tuple variant?</a></li><li class="recentcomments"><span class="comment-author-link"><a href='https://apromixately.github.io' rel='external nofollow ugc' class='url'>Simon</a></span> on <a href="/2019/06/essential-rust-tools/#comment-13007">essential rust tools</a></li><li class="recentcomments"><span class="comment-author-link"><a href='https://balsamiq.com/company/' rel='external nofollow ugc' class='url'>balsamiqVal</a></span> on <a href="/2018/10/the-path-is-made-by-walking/#comment-9108">the path is made by walking</a></li><li class="recentcomments"><span class="comment-author-link">Jennifer</span> on <a href="/2018/07/optimize-for-results-not-optics/#comment-8193">optimize for results, not optics</a></li><li class="recentcomments"><span class="comment-author-link">Bernardo Gomes</span> on <a href="/2016/06/sailsjs-testing-patterns-trunctate-database/#comment-8058">sailsjs testing: how to truncate the database</a></li><li class="recentcomments"><span class="comment-author-link">Bernardo Gomes</span> on <a href="/2016/06/sailsjs-testing-patterns-trunctate-database/#comment-8057">sailsjs testing: how to truncate the database</a></li></ul></aside>
		<aside id="recent-posts-2" class="widget well widget_recent_entries">
		<h2 class="widget-title">Recent Posts</h2>
		<ul>
											<li>
					<a href="/2020/07/hope-is-not-a-strategy/">hope is not a strategy</a>
									</li>
											<li>
					<a href="/2020/01/duck-typing-in-rust-trait-vs-type/">duck typing in rust: trait vs type</a>
									</li>
											<li>
					<a href="/2020/01/writing-c-library-in-rust/">writing c library in rust</a>
									</li>
											<li>
					<a href="/2020/01/rust-on-heroku-with-hyper-http/">rust on heroku with hyper http</a>
									</li>
											<li>
					<a href="/2020/01/rust-on-heroku-with-async-await-and-tokio/">rust on heroku with async/await and tokio</a>
									</li>
											<li>
					<a href="/2019/12/patterns-of-actions-are-a-making/">patterns of actions are a making</a>
									</li>
											<li>
					<a href="/2019/12/memory-safety-necessary-not-sufficient/">memory safety: necessary, not sufficient</a>
									</li>
											<li>
					<a href="/2019/12/brief-history-of-rtmp-future-thoughts/">brief history of rtmp + future thoughts</a>
									</li>
											<li>
					<a href="/2019/12/rust-2020/">rust 2020: fulfill the promise</a>
									</li>
											<li>
					<a href="/2019/11/nut-loaf-with-red-pepper-sauce/">nut loaf with red pepper sauce</a>
									</li>
											<li>
					<a href="/2019/10/http-3-starter-notes-rust-quiche/">http/3 starter notes, rust quiche</a>
									</li>
											<li>
					<a href="/2019/10/rust-whats-a-tuple-variant/">[rust] what&#8217;s a tuple variant?</a>
									</li>
											<li>
					<a href="/2019/08/graph-in-rust-using-petgraph/">graph in rust using petgraph</a>
									</li>
											<li>
					<a href="/2019/06/debugging-openssl-shared-libary/">debugging openssl shared libary</a>
									</li>
											<li>
					<a href="/2019/06/digital-identity-how-to-verify-trust/">digital identity: how to verify trust?</a>
									</li>
											<li>
					<a href="/2019/06/essential-rust-tools/">essential rust tools</a>
									</li>
											<li>
					<a href="/2019/05/learning-scala-with-graphics/">learning scala with graphics</a>
									</li>
											<li>
					<a href="/2019/04/when-reality-is-broken-change-the-rules/">when reality is broken, change the rules</a>
									</li>
											<li>
					<a href="/2019/04/subverting-saurons-business-model/">subverting Sauron&#8217;s business model</a>
									</li>
											<li>
					<a href="/2019/02/firebase-auth-migration-from-rails-and-devise/">firebase auth migration from rails/devise</a>
									</li>
					</ul>

		</aside></section><!-- #secondary .widget-area -->
				<footer id="colophon" role="contentinfo" class="span12">
										<div id="page-footer" class="well clearfix">
						<span class="credits alignleft">&copy; 2021 <a href="/">the evolving ultrasaurus</a>, all rights reserved.</span>						<div id="site-generator">
							<a	href="http://wordpress.org/"
								title="Semantic Personal Publishing Platform"
								target="_blank"
								rel="generator">Proudly powered by WordPress</a>
						</div>
					</div><!-- #page-footer .well .clearfix -->
									</footer><!-- #colophon -->
							</div><!-- #page -->
		</div><!-- .container -->
	<!-- 48 queries. 0.413 seconds. -->
	<script type='text/javascript' src='/wp-content/themes/the-bootstrap/js/bootstrap.min.js?ver=2.0.3' id='tw-bootstrap-js'></script>
<script type='text/javascript' src='/wp-content/themes/the-bootstrap/js/the-bootstrap.min.js?ver=2.0.1' id='the-bootstrap-js'></script>
<script type='text/javascript' src='/wp-includes/js/wp-embed.min.js?ver=5.7.1' id='wp-embed-js'></script>
	</body>
</html>
