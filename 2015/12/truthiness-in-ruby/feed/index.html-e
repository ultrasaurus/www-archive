<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>
	Comments on: truthiness in ruby	</title>
	<atom:link href="/2015/12/truthiness-in-ruby/feed/" rel="self" type="application/rss+xml" />
	<link>/2015/12/truthiness-in-ruby/</link>
	<description>Sarah Allen&#039;s reflections on internet software and other topics</description>
	<lastBuildDate>Fri, 06 Jul 2018 03:51:37 +0000</lastBuildDate>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.1</generator>
	<item>
		<title>
		By: ultrasaurus		</title>
		<link>/2015/12/truthiness-in-ruby/#comment-5314</link>

		<dc:creator><![CDATA[ultrasaurus]]></dc:creator>
		<pubDate>Wed, 16 Dec 2015 10:03:22 +0000</pubDate>
		<guid isPermaLink="false">/?p=5737#comment-5314</guid>

					<description><![CDATA[@MarmiteJunction @bgregmc nice clarification -- I added to recent blog post on this topic: https://t.co/Mju8mKCEzC]]></description>
			<content:encoded><![CDATA[<p>@MarmiteJunction @bgregmc nice clarification &#8212; I added to recent blog post on this topic: <a href="https://t.co/Mju8mKCEzC" rel="nofollow ugc">https://t.co/Mju8mKCEzC</a></p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Dan Wilk		</title>
		<link>/2015/12/truthiness-in-ruby/#comment-5310</link>

		<dc:creator><![CDATA[Dan Wilk]]></dc:creator>
		<pubDate>Mon, 14 Dec 2015 19:22:07 +0000</pubDate>
		<guid isPermaLink="false">/?p=5737#comment-5310</guid>

					<description><![CDATA[Same behavior in Lua. Lua also likes to start numbering at 1, which is all I will say about that.
]]></description>
			<content:encoded><![CDATA[<p>Same behavior in Lua. Lua also likes to start numbering at 1, which is all I will say about that.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: ultrasaurus		</title>
		<link>/2015/12/truthiness-in-ruby/#comment-5308</link>

		<dc:creator><![CDATA[ultrasaurus]]></dc:creator>
		<pubDate>Mon, 14 Dec 2015 13:13:05 +0000</pubDate>
		<guid isPermaLink="false">/?p=5737#comment-5308</guid>

					<description><![CDATA[truthiness in ruby: https://t.co/oDZpTznFRI -- an elaboration of why:
2.2.2 :001 &#062; 1 and 0
=&#062; 0
2.2.2 :002 &#062; 0 and 1
=&#062; 1]]></description>
			<content:encoded><![CDATA[<p>truthiness in ruby: <a href="https://t.co/oDZpTznFRI" rel="nofollow ugc">https://t.co/oDZpTznFRI</a> &#8212; an elaboration of why:<br />
2.2.2 :001 &gt; 1 and 0<br />
=&gt; 0<br />
2.2.2 :002 &gt; 0 and 1<br />
=&gt; 1</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Dave Aronson		</title>
		<link>/2015/12/truthiness-in-ruby/#comment-5304</link>

		<dc:creator><![CDATA[Dave Aronson]]></dc:creator>
		<pubDate>Mon, 14 Dec 2015 11:53:39 +0000</pubDate>
		<guid isPermaLink="false">/?p=5737#comment-5304</guid>

					<description><![CDATA[I usually just advise people to avoid &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; in the first place.  Unless the reader comes from a strong Perl background, their usual usages (&lt;code&gt;do_this and do_that&lt;/code&gt; where the latter depends on the former succeeding, and &lt;code&gt;do_this or die(error_message)&lt;/code&gt;) just take Too Much Thinking to be maintainable.  Their presence also tempts people to use them in calculating a boolean value.  This is flat-out wrong if that value is then assigned into a variable.  I cover this in slides 11 and 12 (currently) of http://bit.ly/RubyGotchas .  Signed, The Codosaurus
]]></description>
			<content:encoded><![CDATA[<p>I usually just advise people to avoid <code>and</code> and <code>or</code> in the first place.  Unless the reader comes from a strong Perl background, their usual usages (<code>do_this and do_that</code> where the latter depends on the former succeeding, and <code>do_this or die(error_message)</code>) just take Too Much Thinking to be maintainable.  Their presence also tempts people to use them in calculating a boolean value.  This is flat-out wrong if that value is then assigned into a variable.  I cover this in slides 11 and 12 (currently) of <a href="http://bit.ly/RubyGotchas" rel="nofollow ugc">http://bit.ly/RubyGotchas</a> .  Signed, The Codosaurus</p>
]]></content:encoded>
		
			</item>
	</channel>
</rss>
