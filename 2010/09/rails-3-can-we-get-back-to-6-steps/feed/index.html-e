<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>
	Comments on: rails 3: can we get back to 6 steps?	</title>
	<atom:link href="/2010/09/rails-3-can-we-get-back-to-6-steps/feed/" rel="self" type="application/rss+xml" />
	<link>/2010/09/rails-3-can-we-get-back-to-6-steps/</link>
	<description>Sarah Allen&#039;s reflections on internet software and other topics</description>
	<lastBuildDate>Wed, 22 Sep 2010 11:38:20 +0000</lastBuildDate>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.1</generator>
	<item>
		<title>
		By: Sarah		</title>
		<link>/2010/09/rails-3-can-we-get-back-to-6-steps/#comment-703</link>

		<dc:creator><![CDATA[Sarah]]></dc:creator>
		<pubDate>Wed, 22 Sep 2010 11:38:20 +0000</pubDate>
		<guid isPermaLink="false">/?p=2810#comment-703</guid>

					<description><![CDATA[This is what we do for the workshops:
  rails suggestotron -m http://gist.github.com/316450.txt

That&#039;s ok for a one day class, but I wouldn&#039;t want to rely on a template for longer class.  For my personal use, templates are fine, but I find that I&#039;m updating gems and rails versions and switching between projects often enough that it isn&#039;t worth it to me to maintain a set of templates.  I did think about whether there should be a short URL services for templates, but then I thought... why not just make it even simpler and still have a command that corresponds to each cognitive steps.  The biggest problem with a template is that it hides what is inside it.  With the &quot;rails gem&quot; idea it is kind of self-documenting.]]></description>
			<content:encoded><![CDATA[<p>This is what we do for the workshops:<br />
  rails suggestotron -m <a href="http://gist.github.com/316450.txt" rel="nofollow ugc">http://gist.github.com/316450.txt</a></p>
<p>That&#8217;s ok for a one day class, but I wouldn&#8217;t want to rely on a template for longer class.  For my personal use, templates are fine, but I find that I&#8217;m updating gems and rails versions and switching between projects often enough that it isn&#8217;t worth it to me to maintain a set of templates.  I did think about whether there should be a short URL services for templates, but then I thought&#8230; why not just make it even simpler and still have a command that corresponds to each cognitive steps.  The biggest problem with a template is that it hides what is inside it.  With the &#8220;rails gem&#8221; idea it is kind of self-documenting.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Ben		</title>
		<link>/2010/09/rails-3-can-we-get-back-to-6-steps/#comment-702</link>

		<dc:creator><![CDATA[Ben]]></dc:creator>
		<pubDate>Wed, 22 Sep 2010 11:30:03 +0000</pubDate>
		<guid isPermaLink="false">/?p=2810#comment-702</guid>

					<description><![CDATA[Hmm. Wouldn&#039;t using a template solve this problem for you? 

$ rails new myapp -m my_rspec_template
$ cd myapp
$ bundle install
$ rails generate rspec:install
$ rails generate scaffold note title:string content:text
$ rake db:migrate
$ rails server

It&#039;s not *quite* as useful for introductory courses as the old way, since there&#039;s the magical (to novices) template stuff in there, but it would let you focus more on the important stuff up front.]]></description>
			<content:encoded><![CDATA[<p>Hmm. Wouldn&#8217;t using a template solve this problem for you? </p>
<p>$ rails new myapp -m my_rspec_template<br />
$ cd myapp<br />
$ bundle install<br />
$ rails generate rspec:install<br />
$ rails generate scaffold note title:string content:text<br />
$ rake db:migrate<br />
$ rails server</p>
<p>It&#8217;s not *quite* as useful for introductory courses as the old way, since there&#8217;s the magical (to novices) template stuff in there, but it would let you focus more on the important stuff up front.</p>
]]></content:encoded>
		
			</item>
	</channel>
</rss>
