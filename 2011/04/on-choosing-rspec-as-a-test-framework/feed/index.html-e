<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>
	Comments on: on choosing RSpec as a test framework	</title>
	<atom:link href="/2011/04/on-choosing-rspec-as-a-test-framework/feed/" rel="self" type="application/rss+xml" />
	<link>/2011/04/on-choosing-rspec-as-a-test-framework/</link>
	<description>Sarah Allen&#039;s reflections on internet software and other topics</description>
	<lastBuildDate>Sat, 02 Apr 2011 06:19:49 +0000</lastBuildDate>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.1</generator>
	<item>
		<title>
		By: Delicious Bookmarks for April 2nd from 01:19 to 01:46 &#171; Lâmôlabs		</title>
		<link>/2011/04/on-choosing-rspec-as-a-test-framework/#comment-744</link>

		<dc:creator><![CDATA[Delicious Bookmarks for April 2nd from 01:19 to 01:46 &#171; Lâmôlabs]]></dc:creator>
		<pubDate>Sat, 02 Apr 2011 06:19:49 +0000</pubDate>
		<guid isPermaLink="false">/?p=3068#comment-744</guid>

					<description><![CDATA[[...] on choosing RSpec as a test framework &#124; the evolving ultrasaurus &#8211; April 2nd  ( tags: rspec ruby testing tips tricks examples rails ) [...] ]]></description>
			<content:encoded><![CDATA[<p>[&#8230;] on choosing RSpec as a test framework | the evolving ultrasaurus &#8211; April 2nd  ( tags: rspec ruby testing tips tricks examples rails ) [&#8230;] </p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Jacob Richardson		</title>
		<link>/2011/04/on-choosing-rspec-as-a-test-framework/#comment-743</link>

		<dc:creator><![CDATA[Jacob Richardson]]></dc:creator>
		<pubDate>Fri, 01 Apr 2011 18:19:26 +0000</pubDate>
		<guid isPermaLink="false">/?p=3068#comment-743</guid>

					<description><![CDATA[Excellent article! I&#039;ve also found that in my experience teaching rails that RSpec is just much easier to understand for newbies. 

I use the python unittest library extensively (which has a very similar feel to t/u) but when coding ruby rspec feels like a MUST.]]></description>
			<content:encoded><![CDATA[<p>Excellent article! I&#8217;ve also found that in my experience teaching rails that RSpec is just much easier to understand for newbies. </p>
<p>I use the python unittest library extensively (which has a very similar feel to t/u) but when coding ruby rspec feels like a MUST.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Undecisive		</title>
		<link>/2011/04/on-choosing-rspec-as-a-test-framework/#comment-742</link>

		<dc:creator><![CDATA[Undecisive]]></dc:creator>
		<pubDate>Fri, 01 Apr 2011 17:18:15 +0000</pubDate>
		<guid isPermaLink="false">/?p=3068#comment-742</guid>

					<description><![CDATA[Excellent. I would argue that you should leave the error in there - if any Test::Unit evangelists notice it, you&#039;ve made your point. If any Test::Unit evangelists DON&#039;T notice it until they read the comments, you&#039;ve made your point even stronger.

For my part, I&#039;ve always used rspec and similarly see assert as counter-intuitive (Connascence of position vs Connascence of name, the latter is weaker and so usually better) If people have a preference, use what makes you smile. I&#039;m planning on giving Wrong a try (https://github.com/sconover/wrong) because let&#039;s face it, you can never do enough experimenting.]]></description>
			<content:encoded><![CDATA[<p>Excellent. I would argue that you should leave the error in there &#8211; if any Test::Unit evangelists notice it, you&#8217;ve made your point. If any Test::Unit evangelists DON&#8217;T notice it until they read the comments, you&#8217;ve made your point even stronger.</p>
<p>For my part, I&#8217;ve always used rspec and similarly see assert as counter-intuitive (Connascence of position vs Connascence of name, the latter is weaker and so usually better) If people have a preference, use what makes you smile. I&#8217;m planning on giving Wrong a try (<a href="https://github.com/sconover/wrong" rel="nofollow ugc">https://github.com/sconover/wrong</a>) because let&#8217;s face it, you can never do enough experimenting.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Dave Jones		</title>
		<link>/2011/04/on-choosing-rspec-as-a-test-framework/#comment-741</link>

		<dc:creator><![CDATA[Dave Jones]]></dc:creator>
		<pubDate>Fri, 01 Apr 2011 16:36:14 +0000</pubDate>
		<guid isPermaLink="false">/?p=3068#comment-741</guid>

					<description><![CDATA[@Michael

The tests still pass, because the two are equal no matter their position, but when the test fails, it will complain that  didn&#039;t match , which can be really confusing, especially to a newbie.

So:
assert_equal @calc.total, 4
in a failing scenario would report:
Expected nil, got 4

when of course nil is not what the test expected to get in a passing scenario.]]></description>
			<content:encoded><![CDATA[<p>@Michael</p>
<p>The tests still pass, because the two are equal no matter their position, but when the test fails, it will complain that  didn&#8217;t match , which can be really confusing, especially to a newbie.</p>
<p>So:<br />
assert_equal @calc.total, 4<br />
in a failing scenario would report:<br />
Expected nil, got 4</p>
<p>when of course nil is not what the test expected to get in a passing scenario.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Andy		</title>
		<link>/2011/04/on-choosing-rspec-as-a-test-framework/#comment-740</link>

		<dc:creator><![CDATA[Andy]]></dc:creator>
		<pubDate>Fri, 01 Apr 2011 16:19:09 +0000</pubDate>
		<guid isPermaLink="false">/?p=3068#comment-740</guid>

					<description><![CDATA[Yah, it might be good to fix the error with assert_equal.

The output will look odd in a failing test if the parameters are switched.]]></description>
			<content:encoded><![CDATA[<p>Yah, it might be good to fix the error with assert_equal.</p>
<p>The output will look odd in a failing test if the parameters are switched.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Sarah		</title>
		<link>/2011/04/on-choosing-rspec-as-a-test-framework/#comment-739</link>

		<dc:creator><![CDATA[Sarah]]></dc:creator>
		<pubDate>Fri, 01 Apr 2011 15:24:38 +0000</pubDate>
		<guid isPermaLink="false">/?p=3068#comment-739</guid>

					<description><![CDATA[LOL! proves my point. It does pass either way, but I think the test output is supposed to indicate what we are actually trying to test, versus what is expected. I think a well-written assertion makes it quicker to diagnose the problem because we can tell  the expected value and what it currently is, and knowing one from the other can help isolate a bug.]]></description>
			<content:encoded><![CDATA[<p>LOL! proves my point. It does pass either way, but I think the test output is supposed to indicate what we are actually trying to test, versus what is expected. I think a well-written assertion makes it quicker to diagnose the problem because we can tell  the expected value and what it currently is, and knowing one from the other can help isolate a bug.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Michael		</title>
		<link>/2011/04/on-choosing-rspec-as-a-test-framework/#comment-738</link>

		<dc:creator><![CDATA[Michael]]></dc:creator>
		<pubDate>Fri, 01 Apr 2011 15:13:35 +0000</pubDate>
		<guid isPermaLink="false">/?p=3068#comment-738</guid>

					<description><![CDATA[You&#039;ve got assert_equal wrong, it is intended to be:

assert_equal(expected, actual)

However, if you check out the rdoc on test/unit assertions - the order doesn&#039;t seem to matter. I reversed them in some existing tests, and all still pass.]]></description>
			<content:encoded><![CDATA[<p>You&#8217;ve got assert_equal wrong, it is intended to be:</p>
<p>assert_equal(expected, actual)</p>
<p>However, if you check out the rdoc on test/unit assertions &#8211; the order doesn&#8217;t seem to matter. I reversed them in some existing tests, and all still pass.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Matt Wynne		</title>
		<link>/2011/04/on-choosing-rspec-as-a-test-framework/#comment-737</link>

		<dc:creator><![CDATA[Matt Wynne]]></dc:creator>
		<pubDate>Fri, 01 Apr 2011 15:04:18 +0000</pubDate>
		<guid isPermaLink="false">/?p=3068#comment-737</guid>

					<description><![CDATA[Thanks for sharing your thoughts and experience Sarah. I find personal experience like this makes the best contribution to any &#039;debate&#039; like this.

For development, don&#039;t forget about RSspec&#039;s nested contexts, and also #let blocks, both of which are wonderful tools for writing really clear tests.]]></description>
			<content:encoded><![CDATA[<p>Thanks for sharing your thoughts and experience Sarah. I find personal experience like this makes the best contribution to any &#8216;debate&#8217; like this.</p>
<p>For development, don&#8217;t forget about RSspec&#8217;s nested contexts, and also #let blocks, both of which are wonderful tools for writing really clear tests.</p>
]]></content:encoded>
		
			</item>
	</channel>
</rss>
