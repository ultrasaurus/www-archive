<!DOCTYPE html>
<html class="no-js" lang="en-US">
	<head>
				<link rel="profile" href="http://gmpg.org/xfn/11" />
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		
		<title>on choosing RSpec as a test framework &laquo; the evolving ultrasaurus</title>
		
				<meta name='robots' content='max-image-preview:large' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="the evolving ultrasaurus &raquo; Feed" href="/feed/" />
<link rel="alternate" type="application/rss+xml" title="the evolving ultrasaurus &raquo; Comments Feed" href="/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="the evolving ultrasaurus &raquo; on choosing RSpec as a test framework Comments Feed" href="/2011/04/on-choosing-rspec-as-a-test-framework/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.0.1\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.0.1\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/www.ultrasaurus.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=5.7.1"}};
			!function(e,a,t){var n,r,o,i=a.createElement("canvas"),p=i.getContext&&i.getContext("2d");function s(e,t){var a=String.fromCharCode;p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,e),0,0);e=i.toDataURL();return p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,t),0,0),e===i.toDataURL()}function c(e){var t=a.createElement("script");t.src=e,t.defer=t.type="text/javascript",a.getElementsByTagName("head")[0].appendChild(t)}for(o=Array("flag","emoji"),t.supports={everything:!0,everythingExceptFlag:!0},r=0;r<o.length;r++)t.supports[o[r]]=function(e){if(!p||!p.fillText)return!1;switch(p.textBaseline="top",p.font="600 32px Arial",e){case"flag":return s([127987,65039,8205,9895,65039],[127987,65039,8203,9895,65039])?!1:!s([55356,56826,55356,56819],[55356,56826,8203,55356,56819])&&!s([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]);case"emoji":return!s([55357,56424,8205,55356,57212],[55357,56424,8203,55356,57212])}return!1}(o[r]),t.supports.everything=t.supports.everything&&t.supports[o[r]],"flag"!==o[r]&&(t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&t.supports[o[r]]);t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&!t.supports.flag,t.DOMReady=!1,t.readyCallback=function(){t.DOMReady=!0},t.supports.everything||(n=function(){t.readyCallback()},a.addEventListener?(a.addEventListener("DOMContentLoaded",n,!1),e.addEventListener("load",n,!1)):(e.attachEvent("onload",n),a.attachEvent("onreadystatechange",function(){"complete"===a.readyState&&t.readyCallback()})),(n=t.source||{}).concatemoji?c(n.concatemoji):n.wpemoji&&n.twemoji&&(c(n.twemoji),c(n.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<link rel='stylesheet' id='mailchimpSF_main_css-css'  href='/?mcsf_action=main_css&#038;ver=5.7.1' type='text/css' media='all' />
<!--[if IE]>
<link rel='stylesheet' id='mailchimpSF_ie_css-css'  href='/wp-content/plugins/mailchimp/css/ie.css?ver=5.7.1' type='text/css' media='all' />
<![endif]-->
<link rel='stylesheet' id='wp-block-library-css'  href='/wp-includes/css/dist/block-library/style.min.css?ver=5.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='tw-bootstrap-css'  href='/wp-content/themes/the-bootstrap/css/bootstrap.min.css?ver=2.0.3' type='text/css' media='all' />
<link rel='stylesheet' id='the-bootstrap-css'  href='/wp-content/themes/the-bootstrap/style.min.css?ver=2.0.1' type='text/css' media='all' />
<style id='the-bootstrap-inline-css' type='text/css'>
body > .container{margin-top:68px;}@media(min-width: 980px){body > .container{margin-top:58px;}}
</style>
<script type='text/javascript' src='/wp-includes/js/jquery/jquery.min.js?ver=3.5.1' id='jquery-core-js'></script>
<script type='text/javascript' src='/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.3.2' id='jquery-migrate-js'></script>
<script type='text/javascript' src='/wp-content/plugins/google-analyticator/external-tracking.min.js?ver=6.5.4' id='ga-external-tracking-js'></script>
<link rel="https://api.w.org/" href="/wp-json/" /><link rel="alternate" type="application/json" href="/wp-json/wp/v2/posts/3068" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 5.7.1" />
<link rel="canonical" href="/2011/04/on-choosing-rspec-as-a-test-framework/" />
<link rel='shortlink' href='/?p=3068' />
<link rel="alternate" type="application/json+oembed" href="/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.ultrasaurus.com%2F2011%2F04%2Fon-choosing-rspec-as-a-test-framework%2F" />
<link rel="alternate" type="text/xml+oembed" href="/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.ultrasaurus.com%2F2011%2F04%2Fon-choosing-rspec-as-a-test-framework%2F&#038;format=xml" />
<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>	<style type="text/css">
				#branding hgroup {
			position: absolute !important;
			clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
			clip: rect(1px, 1px, 1px, 1px);
		}
			</style>
		<!--[if lt IE 9]>
		<script src="/wp-content/themes/the-bootstrap/js/html5shiv.min.js" type="text/javascript"></script>
		<script src="/wp-content/themes/the-bootstrap/js/respond.min.js" type="text/javascript"></script>
	<![endif]-->
	<!-- Google Analytics Tracking by Google Analyticator 6.5.4: http://www.videousermanuals.com/google-analyticator/ -->
<script type="text/javascript">
    var analyticsFileTypes = [''];
    var analyticsSnippet = 'enabled';
    var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
  
	_gaq.push(['_setAccount', 'UA-4313619-1']);
    _gaq.push(['_addDevId', 'i9k95']); // Google Analyticator App ID with Google
    _gaq.push(['_gat._anonymizeIp']);
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
		<style type="text/css" id="wp-custom-css">
			code {
	color: #70a
}

p {
	color: #333
}

blockquote p {
	font-size: 14px;
	font-weight: normal;
	padding-top: 6px;
	padding-bottom: 6px;
	padding-left: 10px;
	padding-right: 60px;
	line-height: 1.2;
}		</style>
			</head>
	
	<body class="post-template-default single single-post postid-3068 single-format-standard content-sidebar">
		<div class="container">
			<div id="page" class="hfeed row">
								<header id="branding" role="banner" class="span12">
										<hgroup>
						<h1 id="site-title">
							<a href="/" title="the evolving ultrasaurus" rel="home">
								<span>the evolving ultrasaurus</span>
							</a>
						</h1>
						<h2 id="site-description">Sarah Allen&#039;s reflections on internet software and other topics</h2>
					</hgroup>
					
					
					<nav id="access" role="navigation">
						<h3 class="assistive-text">Main menu</h3>
						<div class="skip-link"><a class="assistive-text" href="#content" title="Skip to primary content">Skip to primary content</a></div>
						<div class="skip-link"><a class="assistive-text" href="#secondary" title="Skip to secondary content">Skip to secondary content</a></div>
												<div class="navbar navbar-fixed-top navbar-inverse">
							<div class="navbar-inner">
								<div class="container">
									<!-- .btn-navbar is used as the toggle for collapsed navbar content -->
									<a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
										<span class="icon-bar"></span>
										<span class="icon-bar"></span>
										<span class="icon-bar"></span>
									</a>
																		<span class="brand">the evolving ultrasaurus</span>
																		<div class="nav-collapse">
										<div class="menu-primary-container"><ul id="menu-primary" class="nav"><li id="menu-item-4272" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4272"><a href="/about/">About</a></li>
<li id="menu-item-6605" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6605"><a href="/speaking/">Speaking</a></li>
<li id="menu-item-6366" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-6366"><a href="/code/">Code</a></li>
<li id="menu-item-4269" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4269"><a href="/archives/">Archives</a></li>
<li id="menu-item-4759" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4759"><a href="/contact/">Contact</a></li>
<li id="menu-item-4697" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4697"><a href="/ultrasaurus/">What is an ultrasaurus?</a></li>
</ul></div>	<form id="searchform" class="navbar-search pull-right" method="get" action="/">
						<label for="s" class="assistive-text hidden">Search</label>
						<input type="search" class="search-query" name="s" id="s" placeholder="Search" />
					</form>								    </div>
								</div>
							</div>
						</div>
											</nav><!-- #access -->
									</header><!-- #branding -->
<section id="primary" class="span8">
	
		<div id="content" role="main">
		<article id="post-3068" class="post-3068 post type-post status-publish format-standard hentry category-general">
		
	<header class="page-header">
		<h1 class="entry-title">on choosing RSpec as a test framework</h1>		<div class="entry-meta"><span class="sep">Posted on </span><a href="/2011/04/on-choosing-rspec-as-a-test-framework/" title="6:42 am" rel="bookmark"><time class="entry-date" datetime="2011-04-01T06:42:18-07:00" pubdate>April 1, 2011</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="/author/sarah/" title="View all posts by sarah" rel="author">sarah</a></span></span>		<span class="sep"> | </span>
		<span class="comments-link">
			<a href="/2011/04/on-choosing-rspec-as-a-test-framework/#comments"><strong>8</strong> Replies</a>		</span>
		</div><!-- .entry-meta -->
	</header><!-- .entry-header -->

	<div class="entry-content clearfix">
		<p>There was <a href="http://www.rubyinside.com/dhh-offended-by-rspec-debate-4610.html">some discussion</a>, if you can call it that, on twitter yesterday about the proliferation of RSpec and Cucumber, over Test::Unit. I don&#8217;t believe that Twitter is an effective medium for well-reasoned debate. I do believe that it is worth discussing why we like one technology over another, so we can learn from each other and possibly refine our approach.</p>
<p>Since I started using RSpec there has been some evolution in the world of ruby test frameworks.  I understand that Test::Unit now supports marking a test case &#8220;pending&#8221; and we can use strings to describe test cases with <em>it</em> syntax.  It is great to see the test frameworks borrow ideas from each other and to be part of such a thriving ecosystem. </p>
<p>A couple of years ago, I <a href="/sarahblog/2009/08/ruby-unit-test-framework">evaluated ruby unit test frameworks</a> for teaching a class.  I found it a happy result that based on my evaluation of test output, I chose RSpec for teaching over Test::Unit, since that is what I use for development.  I don’t belong to a <a href="http://twitter.com/dhh/status/52815575465992194">cargo cult</a> with test coverage falling from the sky. My reasons for using RSpec have not changed, but I think it is worth elaborating on why I continue to believe that RSpec is the right choice.  I look at <a href="#teach">teaching</a> and <a href="#dev">development</a> as two separate use cases.</p>
<h2><a name="dev">For Development</a></h2>
<p>I practice test-driven development where RSpec really shines, but even when I occasionally must use a <em>test last</em> approach, I find RSpec to be a good solution.</p>
<p>I love the simplicity of starting to code, by writing something like this:</p>
<pre>
describe Whatever do
   it "should be empty when it is created"
   it "should fly faster than the speed of light"
   it "should sparkle in the moonlight"
end
</pre>
<p>I start with pending tests, then write the code to make them fail and in the process I design my API and refine my implementation. I can easily focus on that initial inspiration because my test failures contain the language of that design. Nested describes and it strings are concatenated to form sentences, which I can easily review with the &#8211;format documentation (or -f d) option:</p>
<p>Here&#8217;s an example of that from one of the exercises I use in teaching Ruby:</p>
<pre>
$ rspec --format documentation perf_spec.rb

PerformanceMonitor
  runs code
  reports how long it takes
  runs code a number of times
  reports the average

Finished in 0.00414 seconds
5 examples, 0 failures
</pre>
<p>I look forward to checking out <a href="https://github.com/TwP/turn">Turn</a> in Rails 3.1 which looks like it offers a similar kind of synopsis.   I choose RSpec for my projects, but I will happily use Test::Unit if I&#8217;m contributing to another project where it is well-loved.  I can still accomplish what I need to do for testing with Test::Unit, I just don&#8217;t find it to be as easy to <em>use</em>.</p>
<p>David Hansson <a href="http://twitter.com/dhh/status/53481175909531648">argues that Test::Unit is simpler</a>, but I think what he means is that it is simpler to learn. <a href="http://twitter.com/dhh/status/53601066520018944">David says</a> this is &#8220;mostly based on feedback from people learning Rails and RSpec at the same time. And then being introduced to t/u.&#8221; </p>
<p>It is helpful to separate how easy something is to learn from how easy it is to use. I first heard this difference clearly articulated by <a href="http://en.wikipedia.org/wiki/Douglas_Engelbart">Douglas Engelbart</a> in describing his approach to the development of the <a href="http://en.wikipedia.org/wiki/NLS_%28computer_system%29">Augment (NLS) system</a>. He invented the mouse and a chorded keyboard, so you could use one with each hand. It took some time to learn to use them, but once you knew how, you were very fast at creating and editing documents. He loved to draw the analogy of learning to ride on a child&#8217;s tricyle versus learning to ride a bike. A bicycle is harder to learn to ride, but lets you go much faster.</p>
<p>3 + __ = 5 is simpler to understand than 3 + x = 5, but once you start bring able to work with variables, you have more powerful tools that feel simpler to work with.  You need to understand addition and subtraction, before you can absorb the conceptual complexity of a variable, but once you get the concept of variables, going back to fill-in-the-blanks equations is awkward and would be even harder for complex equations.</p>
<p>I think the only aspect of RSpec that is hard to learn is the <em>should</em> syntax, as contrasted with the Test::Unit <em>assert</em> which many people are familiar with from junit (the Java unit test framework).  I think you can now use asserts in RSpec, if you like &#8217;em, but I don&#8217;t.  I do agree the syntax is a little weird at first, but for me it really helps me remember what I&#8217;m testing. I&#8217;m not a big fan of positional arguments, especially when they are similar, but act differently, because I sometimes forget which is which.</p>
<p>In Test::Unit, when I want to assert that num is equal to 4, I write</p>
<pre>
assert_equal(num, 4)
</pre>
<p>In RSpec, I write:</p>
<pre>
num.should == 4
</pre>
<p>I might make an error and write assert_equal(4, num), but I would never write 4.should == num. The latter just feels wrong, whereas with assert I need to think about the order of the parameters. Some people are probably really good at remembering that, but I think I&#8217;m like most people who have to work at remembering arbitrary binary things.</p>
<p>Lastly, the reason I most value RSpec is in its clarity of output for a test failure, which I covered in detail in my <a href="/sarahblog/2009/08/ruby-unit-test-frameworks">earlier comparison</a>. When I&#8217;m working on production code and a test fails, that is when I want to be most efficient and when I want to have the least cognitive load. I don&#8217;t mind that I spent a little more time familiarizing myself with the RSpec syntax and writing clear descriptions of my tests, because when I see a failure, I see a high level description of the failure and can easily parse the specific technical failure without extraneous text.</p>
<h2><a name="teach">For Teaching (and learning)</a></h2>
<p>I agree that trying to learn how to develop tests in RSpec while learning Ruby and Rails all at the same time is very challenging.  I don&#8217;t recommend that.  I think it is easiest to learn Ruby first, then learn Rails, and while learning both use tests as a kind of lesson planner in the test-first teaching style that has been <a href="/sarahblog/2009/09/learning-through-testing/">independently developed</a> by so many engineers. (You can learn more about Test First Teaching with <a href="http://rubykoans.com/">Ruby Koans</a> and at <a href="http://testfirst.org/">testfirst.org</a>.)</p>
<p><strong>But why use RSpec for teaching? </strong> As I&#8217;ve said, my initial bias was toward using Test::Unit for teaching.  Like David, I thought it was simpler for people to understand that instance methods were being executed as test cases. However, with a teaching approach where I deliver failing tests to students as exercises for them to solve, I feel that the format of the output for failing tests is critical and RSpec still has much cleaner failure reports. Students only have to be able to read the tests, not generate them, and I find that people can quickly do that.  Later, after they understand Ruby and Rails, developing tests with RSpec is straightforward since they have already become familiar with reading and understanding the syntax. </p>
<p>Even after reviewing results from the <a href="/sarahblog/2009/08/ruby-unit-test-frameworks">test framework comparison</a>, I was still leaning toward Test::Unit because I thought it would be easier to explain. Then I started to think about how I would explain this:</p>
<pre>
require 'test/unit'
require 'whatever'

class WhateverTest &lt; Test::Unit::TestCase
    def test_something_is_nil
        assert_equal(nil, Whatever.something)
    end
end
</pre>
<p>which we run with:</p>
<pre>
$ ruby test_whatever.rb
</pre>
<p>I imagined myself saying&#8230; </p>
<blockquote><p>Just like any other ruby file, we can run our test on with the &#8220;ruby&#8221; command. In our test file, you can see that WhateverTest is simply a subclass of Test::Unit::TestCase, and then we define instance methods with each aspect of our code that we want to test. Then&#8230; um&#8230; when Ruby reads the class definition it executes the instance methods of that class. </p></blockquote>
<p>Eek. There&#8217;s no way I wanted to say that to people on their first introduction to Ruby.  I didn&#8217;t want to introduce that sometimes classes and instance methods work differently &#8212; at least not on day 1!</p>
<p>I concluded that there is a whole lotta magic in every test framework and you need to reach a certain level of sophistication with a language before you can understand how a test framework does its job.  And just as I used a C compiler long before I ever knew how it really worked, I figured students could learn to how to make failing RSpec tests pass without needing to understand all of the nuances of syntax and how it all works. I also teach that there are other test frameworks and usually demonstrate Test::Unit. After people know Ruby, Rails and one testing framework, I figure they can make an informed choice.</p>
<p>No teaching methodology is perfect.  I&#8217;ve found this works for most students and is more effective than the old &#8220;build something that does X&#8221; methodology. At least after they finish the exercise, they know that they accomplished the assignment. The RSpec output does a good job of surfacing the Ruby and Rails error messages that I am trying to teach, and along the way, I believe I am introducing students to best practices in terms of development.  </p>
	</div><!-- .entry-content -->

	<footer class="entry-footer">
		<span class="cat-links block">Posted in <a href="/category/general/" rel="category tag">general</a>.</span>	</footer><!-- .entry-footer -->
	
	</article><!-- #post-3068 -->
		<div id="comments">
			<h2 id="comments-title">
				8 thoughts on &ldquo;<span>on choosing RSpec as a test framework</span>&rdquo;			</h2>
		
					
			<ol class="commentlist unstyled">
						
		<li  id="li-comment-737" class="comment even thread-even depth-1">
			<article id="comment-737" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/cdf378de2284d8acf137122e541caa28?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/cdf378de2284d8acf137122e541caa28?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn"><a href='http://blog.mattwynne.net' rel='external nofollow ugc' class='url'>Matt Wynne</a></span> <span class="says">said</span> on <a href="/2011/04/on-choosing-rspec-as-a-test-framework/#comment-737"><time pubdate datetime="2011-04-01T07:04:18-07:00">April 1, 2011 at 7:04 am</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>Thanks for sharing your thoughts and experience Sarah. I find personal experience like this makes the best contribution to any &#8216;debate&#8217; like this.</p>
<p>For development, don&#8217;t forget about RSspec&#8217;s nested contexts, and also #let blocks, both of which are wonderful tools for writing really clear tests.</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-737 .comment -->
			
	</li><!-- #comment-## -->
		
		<li  id="li-comment-738" class="comment odd alt thread-odd thread-alt depth-1">
			<article id="comment-738" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/c5434c54301b81c1e4460667aa29ce9c?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/c5434c54301b81c1e4460667aa29ce9c?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn"><a href='http://www.expectationgap.com' rel='external nofollow ugc' class='url'>Michael</a></span> <span class="says">said</span> on <a href="/2011/04/on-choosing-rspec-as-a-test-framework/#comment-738"><time pubdate datetime="2011-04-01T07:13:35-07:00">April 1, 2011 at 7:13 am</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>You&#8217;ve got assert_equal wrong, it is intended to be:</p>
<p>assert_equal(expected, actual)</p>
<p>However, if you check out the rdoc on test/unit assertions &#8211; the order doesn&#8217;t seem to matter. I reversed them in some existing tests, and all still pass.</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-738 .comment -->
			
	</li><!-- #comment-## -->
		
		<li  id="li-comment-739" class="comment even thread-even depth-1">
			<article id="comment-739" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/20ee0d23c969c7740d3c936a4675bb23?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/20ee0d23c969c7740d3c936a4675bb23?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn"><a href='' rel='external nofollow ugc' class='url'>Sarah</a></span> <span class="says">said</span> on <a href="/2011/04/on-choosing-rspec-as-a-test-framework/#comment-739"><time pubdate datetime="2011-04-01T07:24:38-07:00">April 1, 2011 at 7:24 am</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>LOL! proves my point. It does pass either way, but I think the test output is supposed to indicate what we are actually trying to test, versus what is expected. I think a well-written assertion makes it quicker to diagnose the problem because we can tell  the expected value and what it currently is, and knowing one from the other can help isolate a bug.</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-739 .comment -->
			
	</li><!-- #comment-## -->
		
		<li  id="li-comment-740" class="comment odd alt thread-odd thread-alt depth-1">
			<article id="comment-740" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/3da9aebb918d0d1b12d66fcca93c289d?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/3da9aebb918d0d1b12d66fcca93c289d?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn"><a href='http://andylindeman.com/' rel='external nofollow ugc' class='url'>Andy</a></span> <span class="says">said</span> on <a href="/2011/04/on-choosing-rspec-as-a-test-framework/#comment-740"><time pubdate datetime="2011-04-01T08:19:09-07:00">April 1, 2011 at 8:19 am</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>Yah, it might be good to fix the error with assert_equal.</p>
<p>The output will look odd in a failing test if the parameters are switched.</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-740 .comment -->
			
	</li><!-- #comment-## -->
		
		<li  id="li-comment-741" class="comment even thread-even depth-1">
			<article id="comment-741" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/b5e935da7b67c03dd56f385b031f485c?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/b5e935da7b67c03dd56f385b031f485c?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn"><a href='http://unixmonkey.net' rel='external nofollow ugc' class='url'>Dave Jones</a></span> <span class="says">said</span> on <a href="/2011/04/on-choosing-rspec-as-a-test-framework/#comment-741"><time pubdate datetime="2011-04-01T08:36:14-07:00">April 1, 2011 at 8:36 am</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>@Michael</p>
<p>The tests still pass, because the two are equal no matter their position, but when the test fails, it will complain that  didn&#8217;t match , which can be really confusing, especially to a newbie.</p>
<p>So:<br />
assert_equal @calc.total, 4<br />
in a failing scenario would report:<br />
Expected nil, got 4</p>
<p>when of course nil is not what the test expected to get in a passing scenario.</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-741 .comment -->
			
	</li><!-- #comment-## -->
		
		<li  id="li-comment-742" class="comment odd alt thread-odd thread-alt depth-1">
			<article id="comment-742" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/0c050926f303725d724dd46574b1035d?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/0c050926f303725d724dd46574b1035d?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn">Undecisive</span> <span class="says">said</span> on <a href="/2011/04/on-choosing-rspec-as-a-test-framework/#comment-742"><time pubdate datetime="2011-04-01T09:18:15-07:00">April 1, 2011 at 9:18 am</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>Excellent. I would argue that you should leave the error in there &#8211; if any Test::Unit evangelists notice it, you&#8217;ve made your point. If any Test::Unit evangelists DON&#8217;T notice it until they read the comments, you&#8217;ve made your point even stronger.</p>
<p>For my part, I&#8217;ve always used rspec and similarly see assert as counter-intuitive (Connascence of position vs Connascence of name, the latter is weaker and so usually better) If people have a preference, use what makes you smile. I&#8217;m planning on giving Wrong a try (<a href="https://github.com/sconover/wrong" rel="nofollow ugc">https://github.com/sconover/wrong</a>) because let&#8217;s face it, you can never do enough experimenting.</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-742 .comment -->
			
	</li><!-- #comment-## -->
		
		<li  id="li-comment-743" class="comment even thread-even depth-1">
			<article id="comment-743" class="comment row">
				<div class="comment-author-avatar span1">
					<img alt='' src='https://secure.gravatar.com/avatar/9043befcda5768864d379158a7f60559?s=70&#038;r=g' srcset='https://secure.gravatar.com/avatar/9043befcda5768864d379158a7f60559?s=140&#038;r=g 2x' class='avatar avatar-70 photo' height='70' width='70' loading='lazy'/>				</div>
				<footer class="comment-meta span7">
					<p class="comment-author vcard">
						<span class="fn">Jacob Richardson</span> <span class="says">said</span> on <a href="/2011/04/on-choosing-rspec-as-a-test-framework/#comment-743"><time pubdate datetime="2011-04-01T10:19:26-07:00">April 1, 2011 at 10:19 am</time></a>:					</p><!-- .comment-author .vcard -->
	
						
				</footer><!-- .comment-meta -->
	
				<div class="comment-content span7">
					<p>Excellent article! I&#8217;ve also found that in my experience teaching rails that RSpec is just much easier to understand for newbies. </p>
<p>I use the python unittest library extensively (which has a very similar feel to t/u) but when coding ruby rspec feels like a MUST.</p>
				</div><!-- .comment-content -->
			</article><!-- #comment-743 .comment -->
			
	</li><!-- #comment-## -->
	
		<li id="li-comment-744" class="pingback odd alt thread-odd thread-alt depth-1">
			<p class="row">
				<strong class="ping-label span1">Pingback:</strong>
				<span class="span7"><a href='http://www.lamolabs.org/blog/5468/delicious-bookmarks-for-april-2nd-from-0119-to-0146/' rel='external nofollow ugc' class='url'>Delicious Bookmarks for April 2nd from 01:19 to 01:46 &laquo; Lâmôlabs</a></span>
			</p>
	
	</li><!-- #comment-## -->
			</ol><!-- .commentlist .unstyled -->
		
					
		</div><!-- #comments -->
		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title"><legend>Leave a reply</legend> <small><a rel="nofollow" id="cancel-comment-reply-link" href="/2011/04/on-choosing-rspec-as-a-test-framework/#respond" style="display:none;">Cancel reply</a></small></h3><form action="/wp-comments-post.php" method="post" id="commentform" class="comment-form"><div class="form-horizontal"><div class="comment-form-comment control-group"><label class="control-label" for="comment">Comment</label><div class="controls"><textarea autocomplete="new-password"  class="span7" id="g361264d71"  name="g361264d71"   rows="8" aria-required="true"></textarea><textarea id="comment" aria-hidden="true" name="comment" autocomplete="new-password" style="padding:0 !important;clip:rect(1px, 1px, 1px, 1px) !important;position:absolute !important;white-space:nowrap !important;height:1px !important;width:1px !important;overflow:hidden !important;" tabindex="-1"></textarea><script data-noptimize type="text/javascript">document.getElementById("comment").setAttribute( "id", "a605d6598ef611ade202d081ae011b79" );document.getElementById("g361264d71").setAttribute( "id", "comment" );</script></div></div><div class="form-allowed-tags control-group"><label class="control-label">You may use these <abbr title="HyperText Markup Language">HTML</abbr> tags and attributes: </label><div class="controls"><pre>&lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;s&gt; &lt;strike&gt; &lt;strong&gt; </pre></div></div>
									 <div class="form-actions"><div class="comment-form-author control-group">
				<label for="author" class="control-label">Name</label>
				<div class="controls">
					<input id="author" name="author" type="text" value="" size="30" aria-required='true' />
					<p class="help-inline"><span class="required">required</span></p>
				</div>
			</div>
<div class="comment-form-email control-group">
				<label for="email" class="control-label">Email</label>
				<div class="controls">
					<input id="email" name="email" type="email" value="" size="30" aria-required='true' />
					<p class="help-inline"><span class="required">required</span>, will not be published</p>
				</div>
			</div>
<div class="comment-form-url control-group">
				<label for="url" class="control-label">Website</label>
				<div class="controls">
					<input id="url" name="url" type="url" value="" size="30" />
				</div>
			</div>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='3068' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p></div></div></form>	</div><!-- #respond -->
			
		<nav id="nav-single" class="pager">
			<h3 class="assistive-text">Post navigation</h3>
			<span class="next"><a href="/2011/04/repl-rspec-mocks/" rel="next">Next Post <span class="meta-nav">&rarr;</span></a></span>
			<span class="previous"><a href="/2011/02/legacy-testing-with-capybaramechanize/" rel="prev"><span class="meta-nav">&larr;</span> Previous Post</a></span>
		</nav><!-- #nav-single -->
		
			</div><!-- #content -->
	</section><!-- #primary -->

<section id="secondary" class="widget-area span4" role="complementary">
	<aside id="recent-comments-2" class="widget well widget_recent_comments"><h2 class="widget-title">Recent Comments</h2><ul id="recentcomments"><li class="recentcomments"><span class="comment-author-link"><a href='https://da.biomarmicrobialtechnologies.com/' rel='external nofollow ugc' class='url'>Silje Randrup</a></span> on <a href="/2003/08/the-history-of-the-letter-c/#comment-22370">the history of the letter &#8216;C&#8217;</a></li><li class="recentcomments"><span class="comment-author-link"><a href='http://x--x.us' rel='external nofollow ugc' class='url'>Paula</a></span> on <a href="/2003/08/the-history-of-the-letter-c/#comment-19549">the history of the letter &#8216;C&#8217;</a></li><li class="recentcomments"><span class="comment-author-link"><a href='http://x--x.us' rel='external nofollow ugc' class='url'>Michelle</a></span> on <a href="/2003/08/the-history-of-the-letter-c/#comment-19399">the history of the letter &#8216;C&#8217;</a></li><li class="recentcomments"><span class="comment-author-link">Craig</span> on <a href="/2019/10/http-3-starter-notes-rust-quiche/#comment-18963">http/3 starter notes, rust quiche</a></li><li class="recentcomments"><span class="comment-author-link">Kornel</span> on <a href="/2019/10/rust-whats-a-tuple-variant/#comment-18539">[rust] what&#8217;s a tuple variant?</a></li><li class="recentcomments"><span class="comment-author-link"><a href='https://apromixately.github.io' rel='external nofollow ugc' class='url'>Simon</a></span> on <a href="/2019/06/essential-rust-tools/#comment-13007">essential rust tools</a></li><li class="recentcomments"><span class="comment-author-link"><a href='https://balsamiq.com/company/' rel='external nofollow ugc' class='url'>balsamiqVal</a></span> on <a href="/2018/10/the-path-is-made-by-walking/#comment-9108">the path is made by walking</a></li><li class="recentcomments"><span class="comment-author-link">Jennifer</span> on <a href="/2018/07/optimize-for-results-not-optics/#comment-8193">optimize for results, not optics</a></li><li class="recentcomments"><span class="comment-author-link">Bernardo Gomes</span> on <a href="/2016/06/sailsjs-testing-patterns-trunctate-database/#comment-8058">sailsjs testing: how to truncate the database</a></li><li class="recentcomments"><span class="comment-author-link">Bernardo Gomes</span> on <a href="/2016/06/sailsjs-testing-patterns-trunctate-database/#comment-8057">sailsjs testing: how to truncate the database</a></li></ul></aside>
		<aside id="recent-posts-2" class="widget well widget_recent_entries">
		<h2 class="widget-title">Recent Posts</h2>
		<ul>
											<li>
					<a href="/2020/07/hope-is-not-a-strategy/">hope is not a strategy</a>
									</li>
											<li>
					<a href="/2020/01/duck-typing-in-rust-trait-vs-type/">duck typing in rust: trait vs type</a>
									</li>
											<li>
					<a href="/2020/01/writing-c-library-in-rust/">writing c library in rust</a>
									</li>
											<li>
					<a href="/2020/01/rust-on-heroku-with-hyper-http/">rust on heroku with hyper http</a>
									</li>
											<li>
					<a href="/2020/01/rust-on-heroku-with-async-await-and-tokio/">rust on heroku with async/await and tokio</a>
									</li>
											<li>
					<a href="/2019/12/patterns-of-actions-are-a-making/">patterns of actions are a making</a>
									</li>
											<li>
					<a href="/2019/12/memory-safety-necessary-not-sufficient/">memory safety: necessary, not sufficient</a>
									</li>
											<li>
					<a href="/2019/12/brief-history-of-rtmp-future-thoughts/">brief history of rtmp + future thoughts</a>
									</li>
											<li>
					<a href="/2019/12/rust-2020/">rust 2020: fulfill the promise</a>
									</li>
											<li>
					<a href="/2019/11/nut-loaf-with-red-pepper-sauce/">nut loaf with red pepper sauce</a>
									</li>
											<li>
					<a href="/2019/10/http-3-starter-notes-rust-quiche/">http/3 starter notes, rust quiche</a>
									</li>
											<li>
					<a href="/2019/10/rust-whats-a-tuple-variant/">[rust] what&#8217;s a tuple variant?</a>
									</li>
											<li>
					<a href="/2019/08/graph-in-rust-using-petgraph/">graph in rust using petgraph</a>
									</li>
											<li>
					<a href="/2019/06/debugging-openssl-shared-libary/">debugging openssl shared libary</a>
									</li>
											<li>
					<a href="/2019/06/digital-identity-how-to-verify-trust/">digital identity: how to verify trust?</a>
									</li>
											<li>
					<a href="/2019/06/essential-rust-tools/">essential rust tools</a>
									</li>
											<li>
					<a href="/2019/05/learning-scala-with-graphics/">learning scala with graphics</a>
									</li>
											<li>
					<a href="/2019/04/when-reality-is-broken-change-the-rules/">when reality is broken, change the rules</a>
									</li>
											<li>
					<a href="/2019/04/subverting-saurons-business-model/">subverting Sauron&#8217;s business model</a>
									</li>
											<li>
					<a href="/2019/02/firebase-auth-migration-from-rails-and-devise/">firebase auth migration from rails/devise</a>
									</li>
					</ul>

		</aside></section><!-- #secondary .widget-area -->
				<footer id="colophon" role="contentinfo" class="span12">
										<div id="page-footer" class="well clearfix">
						<span class="credits alignleft">&copy; 2021 <a href="/">the evolving ultrasaurus</a>, all rights reserved.</span>						<div id="site-generator">
							<a	href="http://wordpress.org/"
								title="Semantic Personal Publishing Platform"
								target="_blank"
								rel="generator">Proudly powered by WordPress</a>
						</div>
					</div><!-- #page-footer .well .clearfix -->
									</footer><!-- #colophon -->
							</div><!-- #page -->
		</div><!-- .container -->
	<!-- 48 queries. 0.358 seconds. -->
	<script type='text/javascript' src='/wp-content/themes/the-bootstrap/js/bootstrap.min.js?ver=2.0.3' id='tw-bootstrap-js'></script>
<script type='text/javascript' src='/wp-content/themes/the-bootstrap/js/the-bootstrap.min.js?ver=2.0.1' id='the-bootstrap-js'></script>
<script type='text/javascript' src='/wp-includes/js/wp-embed.min.js?ver=5.7.1' id='wp-embed-js'></script>
	</body>
</html>
