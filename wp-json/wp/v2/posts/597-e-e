{"id":597,"date":"2008-12-13T12:45:41","date_gmt":"2008-12-13T20:45:41","guid":{"rendered":"https:\/\/www.ultrasaurus.com\/sarahblog\/2008\/12\/getting-started-with-rails-2-day-1\/"},"modified":"2008-12-13T12:45:41","modified_gmt":"2008-12-13T20:45:41","slug":"getting-started-with-rails-2-day-1","status":"publish","type":"post","link":"https:\/\/www.ultrasaurus.com\/2008\/12\/getting-started-with-rails-2-day-1\/","title":{"rendered":"getting started with rails 2 &#8211; day 1"},"content":{"rendered":"<p>The <a href=\"http:\/\/guides.rubyonrails.org\/getting_started_with_rails.html\">Getting Started Guide<\/a> introduces several guiding principles from the Rails philosophy:<\/p>\n<ul>\n<li>DRY &#8211; &#8220;Don&#8217;t Repeat Yourself&#8221; &#8211; suggests that writing the same code over and over again is a bad thing.<\/li>\n<li>Convention Over Configuration &#8211; means that Rails makes assumptions about what you want to do and how you&#8217;re going to do it, rather than letting you tweak every little thing through endless configuration files.<\/li>\n<li> REST is the best pattern for web applications &#8211; organizing your application around resources and standard HTTP verbs is the fastest way to go. <\/li>\n<\/ul>\n<p>Aside from that very nice guide, there seem to be few tutorials for the newbie that are in Rails 2.  I really like the approach I see in <a href=\"http:\/\/rails.homelinux.org\/\">Four Days on Rails<\/a>, so I&#8217;ve decided to see if I can replicate that tutorials in the latest version of Rails.  I got through the first day in 3.5 hours and then spent another couple of hours reading up on what I had learned.  Since it is hard for me to find contiguous stretches of time and other newbies may benefit from my experience, I&#8217;ve decided to document the process.<\/p>\n<p>Sources:<\/p>\n<ul>\n<li><a href=\"http:\/\/rails.homelinux.org\/\">Four Days on Rails<\/a><\/li>\n<li><a href=\"http:\/\/akitaonrails.com\/2007\/12\/12\/rolling-with-rails-2-0-the-first-full-tutorial\">Akita on Rails: the First Full Tutorial<\/a><\/li>\n<li><a href=\"http:\/\/fairleads.blogspot.com\/2007\/12\/rails-20-and-scaffolding-step-by-step.html\">Sean Lynch at Fairleads: Rails 2.0 step by step<\/a><\/li>\n<\/ul>\n<p>My intent is not to plagiarize, but rather to give back to a most excellent community &#8212; the tutorial content is directly from Rails4Days.  I quote <a href=\"http:\/\/akitaonrails.com\/about\">Fabio Akita<\/a> and <a href=\"http:\/\/www.blogger.com\/profile\/16196715129586398563\">Sean Lynch<\/a> regularly and will give credit as I go. <\/p>\n<p>In today&#8217;s tutorial, we will:<\/p>\n<ol>\n<li><a href=\"#setup\">Set up the environment<\/a><\/li>\n<li><a href=\"#create\">Create the application<\/a><\/li>\n<li><a href=\"#db\">Create the database<\/a><\/li>\n<li><a href=\"#scaffold\">Generate Scaffold<\/a><\/li>\n<li><a href=\"#review\">Review what we learned<\/a> (or how to do it next time in 5 mins)<\/li>\n<\/ol>\n<p>&nbsp;<\/p>\n<hr \/>\n<p>&nbsp;<\/p>\n<p>code {background-color:silver}<br \/>\nh1 {font-size: 150%}<br \/>\nh1 {font-style: bold}<br \/>\nimg<br \/>\n{<br \/>\nborder:2px solid silver;<br \/>\nmargin:0px 0px 15px 20px;<br \/>\n}<\/p>\n<p>&lt;a name=&quot;setup&quot;<\/p>\n<h1>Set up the environment<\/h1>\n<p><\/a><\/p>\n<p>I&#8217;ve already got Apache installed on my Mac (see <a href=\"http:\/\/oreilly.com\/pub\/a\/mac\/2001\/12\/07\/apache.html\">nice O&#8217;Reilly article<\/a>).  I didn&#8217;t actually use apache on the first day, but it just seems like a good idea to be working in my webroot and it was fun to actually find the webserver pre-installed on my new Mac.<\/p>\n<p>For convenience, I defined webroot in my .bashrc:<\/p>\n<p><code>webroot=\/Library\/WebServer\/Documents<\/code><\/p>\n<p \/>\n<p>The first thing you have to do is update your gems:<\/p>\n<p><code>sudo gem install rails --include-dependencies<\/code><\/p>\n<p \/>\n<p>You may probably need to update RubyGems as well:<\/p>\n<p><code>sudo gem update --system<\/code><\/p>\n<p \/>\n<p>There&#8217;s a little trick to working with MySql (via <a href=\"http:\/\/wonko.com\/post\/how-to-install-the-mysqlruby-gem-on-mac-os-x-leopard\">wonko<\/a> ) First, download and install <a href=\"http:\/\/dev.mysql.com\/downloads\/mysql\/5.0.html#macosx-dmg\">MySQL for Mac OS X 10.5 (x86)<\/a>. Don&#8217;t install the x86_64 build or Ruby will refuse to speak to it. If you&#8217;ve already installed the x86_64 build, backup your databases,<br \/>\ninstall the x86 build on top of it, and restore your databases.<\/p>\n<p>Once you&#8217;ve got the correct build of MySQL installed, pop open a terminal and run the following to install the MySQL\/Ruby gem:<\/p>\n<p><code>sudo env ARCHFLAGS=\"-arch i386\" gem install mysql --<br \/>\n--with-mysql-dir=\/usr\/local\/mysql --with-mysql-lib=\/usr\/local\/mysql\/lib<br \/>\n--with-mysql-include=\/usr\/local\/mysql\/include<\/code><\/p>\n<p \/>\n<p>Now that the setup is compete, onward to creating the app&#8230;<\/p>\n<p><a name=\"create\"><\/p>\n<h1>Create the application<\/h1>\n<p><\/a><br \/>\n<code>cd $webroot<\/code><br \/>\n<code>rails -d mysql todo<\/code><\/p>\n<p \/>\n<p>This creates an overwhelming number of files.  You&#8217;ll soon see that Rails does this a lot, but the trick is to understand what&#8217;s going on as you use the shortcuts.  The tutorial dives into these directories one by one, but for those of you who like an overview, the Getting Started Guide has a nice overview of the directory structure.   If you are more of a bottoms-up learner, just skip the table and read on.<\/p>\n<table cellpadding=\"4\" cellspacing=\"0\" rules=\"all\">\n<col width=\"137\">\n<col width=\"1440\">\n<thead>\n<tr>\n<th align=\"left\">\nFile\/Folder\n<\/th>\n<th align=\"left\">\nPurpose\n<\/th>\n<\/tr>\n<\/thead>\n<tbody valign=\"top\">\n<tr>\n<td align=\"left\">\n<tt>README<\/tt>\n<\/td>\n<td align=\"left\">\nThis is a brief instruction manual for your application. Use it to tell others what your application does, how to set it up, and so on.\n<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">\n<tt>Rakefile<\/tt>\n<\/td>\n<td align=\"left\">\nThis file contains batch jobs that can be run from the terminal.\n<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">\n<tt>app\/<\/tt>\n<\/td>\n<td align=\"left\">\nContains the controllers, models, and views for your application. You&#8217;ll focus on this folder for the remainder of this guide.\n<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">\n<p><tt>config\/<\/tt>\n<\/td>\n<td align=\"left\">\nConfigure your application&#8217;s runtime rules, routes, database, and more.\n<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">\n<tt>db\/<\/tt><\/p>\n<\/td>\n<td align=\"left\">\nShows your current database schema, as well as the database migrations. You&#8217;ll learn about migrations shortly.\n<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">\n<tt>doc\/<\/tt>\n<\/td>\n<td align=\"left\">\nIn-depth documentation for your application.\n<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">\n<tt>lib\/<\/tt>\n<\/td>\n<td align=\"left\">\n<p>Extended modules for your application (not covered in this guide).\n<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">\n<tt>log\/<\/tt>\n<\/td>\n<td align=\"left\">\nApplication log files.\n<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">\n<tt>public\/<\/tt>\n<\/td>\n<td align=\"left\">\nThe only folder seen to the world as-is.  This is where your images, javascript, stylesheets (CSS), and other static files go.\n<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">\n<tt>script\/<\/tt>\n<\/td>\n<td align=\"left\">\nScripts provided by Rails to do recurring tasks, such as benchmarking, plugin installation, and starting the console or the web server.\n<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">\n<tt>test\/<\/tt>\n<\/td>\n<td align=\"left\">\nUnit tests, fixtures, and other test apparatus. These are covered in &lt;a href=&quot;<a href=\"http:\/\/guides.rubyonrails.org\/testing_rails_applications.html\">..\/testing_rails_applications.html<\/a>&#8220;&gt;Testing Rails Applications<\/a>\n<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">\n<tt>tmp\/<\/tt>\n<\/td>\n<td align=\"left\">\nTemporary files\n<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">\n<tt>vendor\/<\/tt>\n<\/td>\n<td align=\"left\">\nA place for third-party code. In a typical Rails application, this includes Ruby Gems, the Rails source code (if you install it into your project) and plugins containing additional prepackaged functionality.\n<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>&nbsp;<\/p>\n<p><a name=\"db\"><\/p>\n<h1>Create Your Database<\/h1>\n<p><\/a><\/p>\n<p>Next we&#8217;ll create a database. If you look at <strong>config\/database.yml<\/strong>, you&#8217;ll see that separate environments of dev, test, and production may be defined.  Because you specified <code>-d mysql<\/code> when creating the todo app the database settings are all of MySql.  Neat, huh?<\/p>\n<blockquote><p><code><\/p>\n<pre>\ndevelopment:\nadapter: mysql\nencoding: utf8\ndatabase: todo_development\npool: 5\nusername: root\npassword:\nhost: localhost\n\n# Warning: The database defined as \"test\" will be erased and\n# re-generated from your development database when you run \"rake\".\n# Do not set this db to the same as development or production.\ntest:\nadapter: mysql\nencoding: utf8\ndatabase: todo_test\npool: 5\nusername: root\npassword:\nhost: localhost\n\nproduction:\nadapter: mysql\nencoding: utf8\ndatabase: todo_production\npool: 5\nusername: root\npassword:\nhost: localhost\n<\/pre>\n<p><\/code><\/p><\/blockquote>\n<p>Notice the repeated text?  Rails spells it all out for you to make it easy to modify for three separate environments.  If you&#8217;ve got them all in one place, you can follow the DRY principle with this handy Rails shortcut.<\/p>\n<blockquote><p><code><\/p>\n<pre>\ndefaults: &amp;defaults\nadapter: mysql\nencoding: utf8\nusername: root\npassword:\n\ndevelopment:\ndatabase: todo_development\n&lt;&lt;: *defaults\n\ntest:\ndatabase: todo_test\n&lt;&lt;: *defaults\n\nproduction:\ndatabase: todo_production\n&lt;&lt;: *defaults\n<\/pre>\n<p><\/code><\/p><\/blockquote>\n<p>we can set a bunch of defaults at the top, then specify what is different about our dev, test and production environments.<\/p>\n<p>Akita notes: Notice that now you have a &#8216;encoding&#8217; options that&#8217;s set to UTF8 by default. The Rails app itself loads up with KCODE<br \/>\n= true by default as well, meaning that it silently starts with Unicode support already, which is great. But that &#8216;encoding&#8217; configuration has<br \/>\na new usage as well: everytime Rails connects to the database it will tell it to use this &#8216;encoding&#8217; setting. Like issuing a &#8216;SET NAMES UTF8&#8217;.<\/p>\n<p>Rails 2 has far better database support.  In the older versions, we&#8217;d have to actually type SQL commands and manually create the database.  The procrastinating programmer who is only now learning Rails scores!<\/p>\n<p>To create the database, simply type:<\/p>\n<p><code>rake db:create:all<\/code><\/p>\n<p \/>\n<p>Note: MySql has to be started for it to work.  If you get errors, make sure you set your db name and password correctly in config\/database.yml (I made that mistake and got a weird error that said: <\/p>\n<pre>Couldn't create database for {\"encoding\"=&gt;\"utf8\", \"username\"=&gt;\"root\",\n\"adapter\"=&gt;\"mysql\", \"host\"=&gt;\"localhost\", \"password\"=&gt;nil,\n\"database\"=&gt;\"todo_development\", \"pool\"=&gt;5}, charset: utf8,\ncollation: utf8_general_ci (if you set the charset manually, make\nsure you have a matching collation)<\/pre>\n<p>All good?  Now you can look at mysql and see your brand new databases<\/p>\n<blockquote>\n<pre>\n$ mysql -uroot\nWelcome to the MySQL monitor.  Commands end with ; or g.\nYour MySQL connection id is 12\nServer version: 5.0.67 MySQL Community Server (GPL)\n\nType 'help;' or 'h' for help. Type 'c' to clear the buffer.\n\nmysql&gt; show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| ....               |\n| todo_development   |\n| todo_production    |\n| todo_test          |\n+--------------------+\n6 rows in set (0.00 sec)\n\nmysql&gt; exit\n<\/pre>\n<\/blockquote>\n<p>You can try other fun rake commands&#8230;<\/p>\n<p><code>$ rake db:charset<\/code><\/p>\n<pre>\n(in \/Library\/WebServer\/Documents\/todo)\nutf8\n<\/pre>\n<p><code>$ rake db:version<\/code><\/p>\n<pre>\n(in \/Library\/WebServer\/Documents\/todo)\nCurrent version: 0\n<\/pre>\n<p>Here&#8217;s a handy table of Rake database tasks from Akita:<\/p>\n<table>\n<tbody>\n<tr>\n<td> db:charset                <\/td>\n<td> Retrieves the charset for the current environment&#8217;s database<\/td>\n<\/tr>\n<tr>\n<td> db:collation              <\/td>\n<td> Retrieves the collation for the current environment&#8217;s database<\/td>\n<\/tr>\n<tr>\n<td> db:create                 <\/td>\n<td> Create the database defined in config\/database.yml for the current RAILS_ENV<\/td>\n<\/tr>\n<tr>\n<td> db:create:all             <\/td>\n<td> Create all the local databases defined in config\/database.yml<\/td>\n<\/tr>\n<tr>\n<td> db:drop                   <\/td>\n<td> Drops the database for the current RAILS_ENV<\/td>\n<\/tr>\n<tr>\n<td> db:drop:all               <\/td>\n<td> Drops all the local databases defined in config\/database.yml<\/td>\n<\/tr>\n<tr>\n<td> db:reset                  <\/td>\n<td> Drops and recreates the database from db\/schema.rb for the current environment.<\/td>\n<\/tr>\n<tr>\n<td> db:rollback               <\/td>\n<td> Rolls the schema back to the previous version. Specify the number of steps with <span class=\"caps\">STEP<\/span>=n<\/td>\n<\/tr>\n<tr>\n<td> db:version                <\/td>\n<td> Retrieves the current schema version number<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>Akita says&#8230; If we want to start from scratch, we can do db:drop:all. And in the middle of development we can do db:rollback to undo the latest migration file.<\/p>\n<p>Ok, now you have some databases, but there is nothing in them<\/p>\n<blockquote>\n<pre>\nmysql&gt; show tables;\nEmpty set (0.00 sec)\n<\/pre>\n<\/blockquote>\n<p>&nbsp;<\/p>\n<p><a name=\"scaffold\"><\/p>\n<h1>Generate Scaffold<\/h1>\n<p><\/a><\/p>\n<p>Hold on to your hat and types these two lines into your terminal&#8230;.<\/p>\n<p>Note: the text you type is highlighted gray, the other text is expected output<\/p>\n<p><code>.\/script\/generate scaffold Category title:string<\/code><\/p>\n<pre>\nexists  app\/models\/\nexists  app\/controllers\/\nexists  app\/helpers\/\ncreate  app\/views\/categories\nexists  app\/views\/layouts\/\nexists  test\/functional\/\nexists  test\/unit\/\nexists  public\/stylesheets\/\ncreate  app\/views\/categories\/index.html.erb\ncreate  app\/views\/categories\/show.html.erb\ncreate  app\/views\/categories\/new.html.erb\ncreate  app\/views\/categories\/edit.html.erb\ncreate  app\/views\/layouts\/categories.html.erb\ncreate  public\/stylesheets\/scaffold.css\ncreate  app\/controllers\/categories_controller.rb\ncreate  test\/functional\/categories_controller_test.rb\ncreate  app\/helpers\/categories_helper.rb\nroute  map.resources :categories\ndependency  model\nexists    app\/models\/\nexists    test\/unit\/\nexists    test\/fixtures\/\ncreate    app\/models\/category.rb\ncreate    test\/unit\/category_test.rb\ncreate    test\/fixtures\/categories.yml\ncreate    db\/migrate\ncreate    db\/migrate\/20081213223324_create_categories.rb\n<\/pre>\n<p><code>rake db:migrate<code><\/p>\n<pre>\n(in \/Library\/WebServer\/Documents\/todo)\n==  CreateCategories: migrating ===============================================\n-- create_table(:categories)\n-&gt; 0.0032s\n==  CreateCategories: migrated (0.0034s) ======================================\n<\/pre>\n<p>What just happened? Let's go back to mysql and check it out.<\/p>\n<blockquote>\n<pre>\nmysql&gt; use todo_development;\nDatabase changed\n\nmysql&gt; show tables;\n+----------------------------+\n| Tables_in_todo_development |\n+----------------------------+\n| categories                 |\n| schema_migrations          |\n+----------------------------+\n2 rows in set (0.00 sec)\n\nmysql&gt; show columns from categories;\n+------------+--------------+------+-----+---------+----------------+\n| Field      | Type         | Null | Key | Default | Extra          |\n+------------+--------------+------+-----+---------+----------------+\n| id         | int(11)      | NO   | PRI | NULL    | auto_increment |\n| title      | varchar(255) | YES  |     | NULL    |                |\n| created_at | datetime     | YES  |     | NULL    |                |\n| updated_at | datetime     | YES  |     | NULL    |                |\n+------------+--------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n<\/pre>\n<\/blockquote>\n<p>Now with a little help from <a href=\"http:\/\/fairleads.blogspot.com\/2007\/12\/rails-20-and-scaffolding-step-by-step.html\">fairleads<\/a>, let's poke around what rails has generated for us..<\/p>\n<p><code>.\/script\/server<\/code><\/p>\n<pre>\n=&gt; Booting Mongrel (use 'script\/server webrick' to force WEBrick)\n=&gt; Rails 2.2.2 application starting on http:\/\/0.0.0.0:3000\n=&gt; Call with -d to detach\n=&gt; Ctrl-C to shutdown server\n** Starting Mongrel listening at 0.0.0.0:3000\n** Starting Rails with development environment...\n** Rails loaded.\n** Loading any Rails specific GemPlugins\n** Signals ready.  TERM =&gt; stop.  USR2 =&gt; restart.  INT =&gt; stop (no restart).\n** Rails signals registered.  HUP =&gt; reload (without restart).  It might not work well.\n** Mongrel 1.1.4 available at 0.0.0.0:3000\n** Use CTRL-C to stop.\n<\/pre>\n<p>Note: In development mode, Rails does not generally require you to stop the server; changes you make in files will be automatically picked up by the server.<\/p>\n<p><p>point your browser at:  http:\/\/localhost:3000\/categories<\/p>\n<p>You'll see a page generated from the rails view<\/p>\n<p><img src=\"http:\/\/farm4.static.flickr.com\/3251\/3106006774_a351f9b531.jpg?v=0\" \/><\/p>\n<p>You can use the links to create new catgories...<\/p>\n<p><img src=\"http:\/\/farm4.static.flickr.com\/3072\/3106006788_4fc135e099.jpg?v=0\" \/><\/p>\n<p>then when you go back to the categories page, you will see that is dynamically displays the list of categories<\/p>\n<p><img src=\"http:\/\/farm4.static.flickr.com\/3269\/3106051722_fa758ea181.jpg?v=0\" \/><\/p>\n<p><a name=\"review\"><\/p>\n<h1>What did we learn?<\/h1>\n<p><\/a><\/p>\n<ul>\n<li>By typing 4 lines into your terminal you can create a database application with basic (<a href=\"http:\/\/en.wikipedia.org\/wiki\/Create,_read,_update_and_delete\">CRUD<\/a>) list operations:<br \/>\n<blockquote>\n<pre>\n\nrails -d mysql todo\nrake db:create:all\n.\/script\/generate scaffold Category title:string\nrake db:migrate\n<\/pre>\n<\/blockquote>\n<li>You can run your application using the Rails browser<br \/>\n<blockquote>\n<pre>\n\n.\/script\/server\npoint your browser at: http:\/\/localhost:3000\/categories\n<\/pre>\n<\/blockquote>\n<\/li>\n<li>There's still a lot of magic going on, which we'll learn about on day 2<\/li>\n<\/ul>\n<p>Stay tuned.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>The Getting Started Guide introduces several guiding principles from the Rails philosophy: DRY &#8211; &#8220;Don&#8217;t Repeat Yourself&#8221; &#8211; suggests that writing the same code over and over again is a bad thing. Convention Over Configuration &#8211; means that Rails makes assumptions about what you want to do and how you&#8217;re going to do it, rather&hellip; <a href=\"https:\/\/www.ultrasaurus.com\/2008\/12\/getting-started-with-rails-2-day-1\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a> <a href=\"https:\/\/www.ultrasaurus.com\/2008\/12\/getting-started-with-rails-2-day-1\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a><\/p>\n","protected":false},"author":84,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[2],"tags":[],"_links":{"self":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/597"}],"collection":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/users\/84"}],"replies":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/comments?post=597"}],"version-history":[{"count":0,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/597\/revisions"}],"wp:attachment":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/media?parent=597"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/categories?post=597"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/tags?post=597"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}