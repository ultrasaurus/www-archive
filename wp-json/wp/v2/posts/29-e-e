{"id":29,"date":"2003-06-18T06:19:38","date_gmt":"2003-06-18T14:19:38","guid":{"rendered":"https:\/\/www.ultrasaurus.com\/wordpress\/?p=29"},"modified":"2003-06-18T06:19:38","modified_gmt":"2003-06-18T14:19:38","slug":"notes-on-how-lzx-becomes-a-swf","status":"publish","type":"post","link":"https:\/\/www.ultrasaurus.com\/2003\/06\/notes-on-how-lzx-becomes-a-swf\/","title":{"rendered":"Notes on how LZX becomes a SWF"},"content":{"rendered":"<p>Don Park recently spent some time with the <a href=\"http:\/\/www.laszlosystems.com\/\">Laszlo Presentation Server<\/a> and drew a nice architecture diagram in his <a href=\"http:\/\/www.docuverse.com\/blog\/donpark\/2003\/06\/16.html#a596\">blog<\/a>.  Generating an LZX from a JSP is one way to create applications in Laszlo.  A more common development pattern is to simply write an LZX file that references an XML data source.  I&#8217;ve drawn a diagram with a similar structure to Don&#8217;s that shows the HTTP requests from the browser, to illustrate how this works.<\/p>\n<p><img loading=\"lazy\" src=\"\/images\/blog\/lzx.gif\" width=\"315\" height=\"284\" align=\"right\"><br \/>\n1. The user goes to the web page &#8220;http:\/\/mysite.com\/hello.html&#8221;<br \/>\n(a) the browser requests &#8220;hello.html&#8221; from mysite.com<br \/>\n(b)The web server sends that document it to the browser.<\/p>\n<p>2. The browser notices that &#8220;hello.html&#8221; references &#8220;http:\/\/mysite.com\/hello.lzx&#8221;<br \/>\n(a) The browser requests &#8220;hello.lzx&#8221; from mysite.com<br \/>\n(b) The Laszlo Presentation (LPS) finds &#8220;hello.lzx,&#8221; creates a SWF and sends it to the browser.<\/p>\n<p>3. Your app has referenced a data source (an XML file on the server&#8217;s local file system, on any other server, or dynamically created XML develivered over HTTP)<br \/>\n(a) The LPS-generated SWF makes a native Flash call that causes the browser to send a request to LPS<br \/>\n(b) LPS fetches the data (which is in standard XML).  It transforms the data into native Flash goop and sends it back to the browser.<br \/>\n(c) It appears in the SWF auto-magically datamapped to the appropriate view or whatever you asked it to do in your LZX file.<\/p>\n<p>What Laszlo has done is to normalize the Flash runtime for the creation of applications.  It all ends up running in the Flash player, but there is a bunch of Laszlo magic that lets you focus on application development and interface design.  Laszlo provides a framework, which includes a view system, data mapping, layouts, constraints and all sorts of useful stuff.<\/p>\n<p>One last technical note, LPS does a bunch of smart caching.  If an LZX file or the data source hasn&#8217;t changed, LPS efficiently delivers the same bunch of bits it created for the previous request.  Incremental compiles are achieved by breaking up your app into separate files, typically using the &lt;library&gt; tag.  Then LPS only compiles the file that has changed.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Don Park recently spent some time with the Laszlo Presentation Server and drew a nice architecture diagram in his blog. Generating an LZX from a JSP is one way to create applications in Laszlo. A more common development pattern is to simply write an LZX file that references an XML data source. I&#8217;ve drawn a&hellip; <a href=\"https:\/\/www.ultrasaurus.com\/2003\/06\/notes-on-how-lzx-becomes-a-swf\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a> <a href=\"https:\/\/www.ultrasaurus.com\/2003\/06\/notes-on-how-lzx-becomes-a-swf\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a><\/p>\n","protected":false},"author":84,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[1],"tags":[],"_links":{"self":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/29"}],"collection":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/users\/84"}],"replies":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/comments?post=29"}],"version-history":[{"count":0,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/29\/revisions"}],"wp:attachment":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/media?parent=29"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/categories?post=29"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/tags?post=29"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}