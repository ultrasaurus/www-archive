{"id":4686,"date":"2013-10-19T19:41:18","date_gmt":"2013-10-20T03:41:18","guid":{"rendered":"https:\/\/www.ultrasaurus.com\/?p=4686"},"modified":"2013-10-19T19:41:18","modified_gmt":"2013-10-20T03:41:18","slug":"rails-4-twitter-omniauth-with-mongodb","status":"publish","type":"post","link":"https:\/\/www.ultrasaurus.com\/2013\/10\/rails-4-twitter-omniauth-with-mongodb\/","title":{"rendered":"rails 4 twitter omniauth with mongodb"},"content":{"rendered":"<p>If you are brand new to MongoDB and Rails 4, take a quick look at my very basic <a href=\"https:\/\/www.ultrasaurus.com\/sarahblog\/code\/\">rails 4 mongodb tutorial<\/a> before diving into this one.<\/p>\n<p>Gems: <a href=\"http:\/\/mongoid.org\">mongoid<\/a>, <a href=\"http:\/\/www.omniauth.org\/\">omniauth<\/a>, <a href=\"https:\/\/github.com\/laserlemon\/figaro\">figaro<\/a><\/p>\n<h2>Let&#8217;s get started<\/h2>\n<p>Make sure you have Rails 4 (rails -v).  We&#8217;ll make a Rails app skipping test-unit (-T), since I prefer RSpec, and omitting ActiveRecord (-O) since we&#8217;ll be using MongoDB.<\/p>\n<pre>\nrails new parakeet -T -O\ncd parakeet\n<\/pre>\n<p>Add the following to the Gemfile<\/p>\n<pre>\ngem \"mongoid\", git: 'git:\/\/github.com\/mongoid\/mongoid.git'\ngem \"omniauth-twitter\"\ngem \"figaro\"    # key configuration using ENV \n<\/pre>\n<p>Now some auto-code generation for quick setup:<\/p>\n<pre>\nrails g mongoid:config\n#      create  config\/mongoid.yml\n\nrails generate figaro:install\n#      create  config\/application.yml\n#      append  .gitignore\n<\/pre>\n<p>I&#8217;ve decided to use figaro which allows me to easily configure my API keys without committing them to my source repo, which is very helpful when posting open source code.  We need to set up the app for an API key in order to auth with Twitter. <\/p>\n<h2>Get Developer Key from Twitter<\/h2>\n<p>Sign in using your regular Twitter account at: <a href=\"https:\/\/dev.twitter.com\/\">https:\/\/dev.twitter.com\/<\/a><\/p>\n<p>Then in the upper-right, select &#8220;my applications&#8221;<br \/>\n<img src=\"https:\/\/www.monosnap.com\/image\/GagljLkbhcGSDhZNnegf0246b.png\"><\/p>\n<p>Click &#8220;Create a new application&#8221; and fill in the form.   I called my app blue-parakeet for uniqueness &#8212; you&#8217;ll have to make up your own name.<br \/>\n<img src=\"https:\/\/www.monosnap.com\/image\/CUWsk5qmrLGsoOBZxmqvldb8x.png\"><br \/>\nMake sure you put in a callback URL, even though you won&#8217;t use it for development (since omniauth tells twitter the callback URL to override this setting) &#8212; if you don&#8217;t supply one you will get a 401 unauthorized error.<\/p>\n<p>Read and Accept the Terms, then click &#8220;Create Your Twitter Application&#8221;<\/p>\n<p>Now you have a &#8220;key&#8221; and &#8220;secret&#8221;  (called &#8220;consumer key&#8221; and &#8220;consumer secret&#8221;) which you will need to configure your rails app.<\/p>\n<h2>Using Figaro gem for Configuring API keys<\/h2>\n<p>Edit  <strong>config\/application.yml<\/strong><\/p>\n<pre>\n# config via Figaro gem, see: https:\/\/github.com\/laserlemon\/figaro\n# rake figaro:heroku to push these to Heroku\nTWITTER_KEY: ABCLConsumerKeyCopiedFromTwitterDevPortal\nTWITTER_SECRET: XYZConsumerSecretCopiedFromTwitterDevPortal\n<\/pre>\n<h2>Configuring Omniauth<\/h2>\n<p>Edit <strong>config\/initializers\/omniauth.rb<\/strong><\/p>\n<pre>\nRails.application.config.middleware.use OmniAuth::Builder do\n  provider :twitter, ENV['TWITTER_KEY'], ENV['TWITTER_SECRET']\nend\n<\/pre>\n<p>Now Omniauth is already setup to auth with twitter.  Let&#8217;s run the server.  Install mongo with <code>brew install mongodb<\/code> if you haven&#8217;t already.  Also, if you don&#8217;t have mongo set up to run automatically at startup, then run Mongo:<\/p>\n<pre>\nmongod\n<\/pre>\n<p>Then run Rails server:<\/p>\n<pre>\nrails s\n<\/pre>\n<p>Go to <a href=\"http:\/\/localhost:3000\/auth\/twitter\">http:\/\/localhost:3000\/auth\/twitter<\/a> and you&#8217;ll be presented with twitter auth<br \/>\n<img loading=\"lazy\" width=\"50%\" height=\"50%\" src=\"https:\/\/www.monosnap.com\/image\/OBdV4vFem0tOo4Nzn3lFpEjeB.png\"><\/p>\n<p>However, when we authenticate, we get an error, since we have&#8217;t configured our routes yet:<br \/>\n<img loading=\"lazy\" width=\"50%\" height=\"50%\" src=\"https:\/\/www.monosnap.com\/image\/g0cDeKYAWVglRMuFtkcP5PKMU.png\"><\/p>\n<h2>Create a Sessions Controller, Add Routes<\/h2>\n<p>Next step is a sessions controller and a route for the OAuth callback.  We&#8217;ll make a placeholder create action that just reports the auth info we get back from Twitter.<\/p>\n<p>On the command line:<\/p>\n<pre>\nrails generate controller sessions\n<\/pre>\n<p>Edit the newly created file, <strong>app\/controllers\/sessions_controller.rb<\/strong><\/p>\n<pre>\nrequire 'json'\nclass SessionsController  request.env[\"omniauth.auth\"]\n  end\nend\n<\/pre>\n<p>add the following to <strong>config\/routes.rb<\/strong><\/p>\n<pre>\nget '\/auth\/:provider\/callback' =&gt; 'sessions#create'\nget '\/auth\/failure' =&gt; 'sessions#failure'\nget '\/signout' =&gt; 'sessions#destroy', :as =&gt; :signout\nroot :to =&gt; redirect(\"\/auth\/twitter\")  # for convenience\n<\/pre>\n<p>Now go to <a href=\"http:\/\/localhost:3000\/auth\/twitter\">http:\/\/localhost:3000\/auth\/twitter<\/a> &#8212; after authenticating with Twitter, you will see the user info that Twitter sends to the app from the authentication request (see <a href=\"https:\/\/dev.twitter.com\/docs\/platform-objects\/users\">docs for explanation of each field<\/a>).  The general stuff which is more consistent across providers is in the &#8216;info&#8217; section, and most of the interesting twitter-specific info is in the &#8220;extra&#8221; section:<br \/>\n<img loading=\"lazy\" width=\"50%\" height=\"50%\" src=\"https:\/\/www.monosnap.com\/image\/4YQsosoWhSxJgZh8bLG5N0xgc.png\"><\/img><\/p>\n<h2>User Registration<\/h2>\n<p>For this app, we&#8217;ll use a simple user model, just to show that there&#8217;s no magic here &#8212; we&#8217;re only using Twitter auth not storing our own passwords, so we don&#8217;t really need the full features of the lovely Devise gem.<\/p>\n<pre>\nrails generate scaffold user provider:string uid:string name:string\n<\/pre>\n<p>Add to <strong>app\/models\/user.rb<\/strong><\/p>\n<pre>\n  def self.create_with_omniauth(auth)\n    create! do |user|\n      user.provider = auth['provider']\n      user.uid = auth['uid']\n      if auth['info']\n        user.name = auth['info']['name'] || \"\"\n      end\n    end\n  end\n<\/pre>\n<p>With Rails 4 the recommended pattern to lock down model attributes that we don&#8217;t want changed from form submits (or malicious attacks) is in the controller.  In <strong>app\/controllers\/users_controller.rb<\/strong> change:<\/p>\n<pre>\n    def user_params\n      params.require(:user).permit(:provider, :uid, :name)\n    end\n<\/pre>\n<p>to:<\/p>\n<pre>\n    def user_params\n      params.require(:user).permit(:name)\n    end\n<\/pre>\n<p>and then remove the corresponding fields from <strong>app\/views\/users\/_form.html.erb<\/strong><\/p>\n<p>Finally, the real create action for the sessions controller, plus a destroy action for the \/signout url we defined earlier:<\/p>\n<pre>\n  def create\n    auth = request.env[\"omniauth.auth\"]\n    user = User.where(:provider =&gt; auth['provider'],\n                      :uid =&gt; auth['uid']).first || User.create_with_omniauth(auth)\n    session[:user_id] = user.id\n    redirect_to user_path(user), :notice =&gt; \"Signed in!\"\n  end\n\n  def destroy\n    reset_session\n    redirect_to root_url\n  end\n<\/pre>\n<p>With this app, we&#8217;ve got a basic understanding to Twitter OAuth using Rails 4 and the OmniAuth gem.  We didn&#8217;t actually do anything specific to MongoDB and no testing yet.  It is important to understand the technology we&#8217;re working with before testing or even writing production code.<\/p>\n<p>Special thanks to <a href=\"http:\/\/twitter.com\/railsapps\">Daniel Kehoe<\/a> of RailsApps.  His <a href=\"http:\/\/railsapps.github.io\/tutorial-rails-mongoid-omniauth.html\">Rails 3 OmniAuth Mongoid<\/a> tutorial provided a helpful foundation.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>If you are brand new to MongoDB and Rails 4, take a quick look at my very basic rails 4 mongodb tutorial before diving into this one. Gems: mongoid, omniauth, figaro Let&#8217;s get started Make sure you have Rails 4 (rails -v). We&#8217;ll make a Rails app skipping test-unit (-T), since I prefer RSpec, and&hellip; <a href=\"https:\/\/www.ultrasaurus.com\/2013\/10\/rails-4-twitter-omniauth-with-mongodb\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a><\/p>\n","protected":false},"author":84,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[2],"tags":[],"_links":{"self":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/4686"}],"collection":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/users\/84"}],"replies":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/comments?post=4686"}],"version-history":[{"count":0,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/4686\/revisions"}],"wp:attachment":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/media?parent=4686"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/categories?post=4686"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/tags?post=4686"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}