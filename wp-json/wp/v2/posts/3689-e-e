{"id":3689,"date":"2012-10-23T01:02:12","date_gmt":"2012-10-23T09:02:12","guid":{"rendered":"https:\/\/www.ultrasaurus.com\/?p=3689"},"modified":"2012-10-23T01:02:12","modified_gmt":"2012-10-23T09:02:12","slug":"getting-started-with-r","status":"publish","type":"post","link":"https:\/\/www.ultrasaurus.com\/2012\/10\/getting-started-with-r\/","title":{"rendered":"getting started with r"},"content":{"rendered":"<p>I installed the &#8220;roasted marshmallows&#8221; version of R (2.15.1) from <a href=\"http:\/\/www.r-project.org\/\">www.r-project.org<\/a>, which went smoothly on my MacBookPro running Lion. I was happy to find its REPL ran easily on the command line in Terminal.<\/p>\n<blockquote><p>R is a free implementation of a dialect of the S language, the statistics and graphics environment for which John Chambers won the ACM Software Systems award. S was consciously designed to blur the distinction between users and programmers. S is a high-level programming language, with similarities to Scheme and Python. It is a good system for rapid development of statistical applications.<br \/>\n\u2014 <a href=\"http:\/\/faculty.washington.edu\/tlumley\/Rcourse\/R-fundamentals.pdf\">R fundamentals<\/a>\n<\/p><\/blockquote>\n<p>R has amazing built-in primitives and libraries for what scientists like to do with data and incredible graphing options.  I struggled to find good, simple resources to approach learning R as a programmer. I loved this <a href=\"http:\/\/www.stat.cmu.edu\/~fienberg\/Stat36-315\/SomeFundamentalsofR.pdf\">tutorial<\/a>.  Here are my cliff notes:<\/p>\n<p>The most fundamental objects are vectors &#8212; basically an array, where index starts at 1.<br \/>\nNames of objects are case sensitive<br \/>\nComments starts with &#8216;#&#8217;<\/p>\n<p>Examples:<\/p>\n<pre>n &lt;- 25\nv1 &lt;- c(2,5,1,9)        # create a vector, combine a list of columns\nv2 &lt;- numeric(4)        # initialize a vector of specific length (with zeros)\nv3 &lt;- rep(3, 10)        # initialize a vector with number: repeat 3, 10x\nv4 &lt;- 1:4                  # specify a vector using the range 1-4\nv4 &lt;- 4:1                  # you can count down, 4,3,2,1\nv4 &lt;- 3:-1                 # even to negative numbers: 3,2,1,0,-1\nv4 &lt;- seq(1, 1.5, by=.1)   # easy to generate a sequence of equality spaced non-integers\nv5 &lt;- c(v3, v4, 7)        # c will combine or concatenate vectors<\/pre>\n<pre>v2[1] &lt;- 4         # use bracket notation to access (or set) an element\nv2[1:3] &lt;- 4:6\u00a0    # you can even access (or set) a range<\/pre>\n<p>For those of us who already know it from Math class (or computer graphics), vector math in R works the way you would expect:<\/p>\n<ul>\n<li>when an operation involves a vector and a number, the number is used to modify each element of the vector as specified by the operation<\/li>\n<li>when arithmetic involves two vectors of the same length, then the operation applies\u00a0to elements with the same index.<\/li>\n<\/ul>\n<p>Adding vectors of different length doesn&#8217;t really make sense in real life (although maybe there&#8217;s an application for that I don&#8217;t know about), but R conveniently defines that the shorter vector is repeated as often a needed to match the length of the longer vector.<\/p>\n<p>Like many languages, and more importantly, like Math, functions are a name with its arguments enclosed in parentheses. \u00a0Here are some common ones:<\/p>\n<pre>max(v1)\nmean(v1)\nsum(v1)\nprod(v1)\nlength(v1)\nunique(v1)<\/pre>\n<p>By using parentheses for grouping, one can combine several expressions that involve<br \/>\nfunctions.<\/p>\n<pre>(sum(v2^2) - (sum(v2)^2)\/length(v2)) \/ (length(v2) - 1)<\/pre>\n<p>A simpler way to get the same result would be to use the <code>var<\/code> function.<\/p>\n<pre>var(v2)<\/pre>\n<p>The standard deviation is computed by using the expression <code>sqrt(var(v2))<\/code><\/p>\n<p>Comparisons are cool.<\/p>\n<pre>\n&gt; 1  1:2  v6  v6[v6 &lt; 3]    # find all elements in a vector which are  length(v6[v6 &lt; 3])    # count how many are &lt; 3\n[1] 2\n<\/pre>\n","protected":false},"excerpt":{"rendered":"<p>I installed the &#8220;roasted marshmallows&#8221; version of R (2.15.1) from www.r-project.org, which went smoothly on my MacBookPro running Lion. I was happy to find its REPL ran easily on the command line in Terminal. R is a free implementation of a dialect of the S language, the statistics and graphics environment for which John Chambers&hellip; <a href=\"https:\/\/www.ultrasaurus.com\/2012\/10\/getting-started-with-r\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a><\/p>\n","protected":false},"author":84,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[3],"tags":[],"_links":{"self":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/3689"}],"collection":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/users\/84"}],"replies":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/comments?post=3689"}],"version-history":[{"count":0,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/3689\/revisions"}],"wp:attachment":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/media?parent=3689"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/categories?post=3689"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/tags?post=3689"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}