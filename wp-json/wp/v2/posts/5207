{"id":5207,"date":"2014-08-27T21:11:19","date_gmt":"2014-08-28T04:11:19","guid":{"rendered":"https:\/\/www.ultrasaurus.com\/?p=5207"},"modified":"2014-08-28T06:13:15","modified_gmt":"2014-08-28T13:13:15","slug":"test-first-express","status":"publish","type":"post","link":"https:\/\/www.ultrasaurus.com\/2014\/08\/test-first-express\/","title":{"rendered":"simple test first express setup &amp; tutorial"},"content":{"rendered":"<p>It has been surprisingly hard to find a very simple tutorial to get started with Express, along with some common helpful tools, including tests!<\/p>\n<p>Here&#8217;s a little tutorial for Node.js v0.10 and Express 4.  I&#8217;m learning Express, since I&#8217;m working on an app in SailsJS, so I will pick options that mirror choices made by the SailsJS framework.<\/p>\n<h3>Install Express<\/h3>\n<p>Express is a popular simple web app framework for Node (similar to Sinatra for Ruby), and is easily instally with the fabulous Node Package Manager, npm. I find the generators to be handy (at least for learning) and don&#8217;t ship with Express anymore, so you need to install them separately.<\/p>\n<pre>\nnpm install -g express\nnpm install -g express-generator\n<\/pre>\n<h3>Create an Express App<\/h3>\n<p>Let&#8217;s create an app named &#8216;test-app&#8217; &#8212; this will create a new directory of that name with all the app files in it.<\/p>\n<pre>\nexpress test-app -e\n<\/pre>\n<p>The <code>-e<\/code> option tells express-generator to use ejs. (From the <a href=\"http:\/\/expressjs.com\/guide.html\">Express guide<\/a>: Jade is the default. Express-generator supports only a few template engines, whereas Express itself supports virtually any template engine built for node. For the complete list, see <code>express --help<\/code><\/p>\n<p>It shows you all the files it creates and even gives a hint about next steps:<\/p>\n<pre>\ncd test-app\nnpm install\n<\/pre>\n<p><code>npm install<\/code> will download all of the dependencies specified in our &#8220;package.json&#8221; file and put them in the the node_modules directory.  This directory will get big fast, so we probably want to add to .gitignore.<\/p>\n<h3>Run the App!<\/h3>\n<p>Start the server<\/p>\n<pre>\nnpm start\n<\/pre>\n<p>Then go to <a href=\"http:\/\/localhost:3000\/\">http:\/\/localhost:3000\/<\/a> and see:<br \/>\n<img loading=\"lazy\" src=\"https:\/\/www.ultrasaurus.com\/wp-content\/uploads\/2014\/08\/1-welcome-to-express-300x197.png\" alt=\"Browser with URL http:\/\/localhost:3000 shows Express in large letters, smaller letters below display &quot;Welcome to Express&quot;\" width=\"300\" height=\"197\" \/><\/p>\n<p>Stop the server with ctrl-C.<\/p>\n<p>Take a moment to review the contents of the generated package.json, the <a href=\"https:\/\/www.npmjs.org\/doc\/files\/package.json.html\">npm docs<\/a> are a good reference for the defaults.  All of the dependencies that we have right now are ones that express decided we should have. <a href=\"https:\/\/twitter.com\/maxogden\">Max Ogden<\/a> has some nice docs <a href=\"https:\/\/github.com\/maxogden\/art-of-node#modules\">about Node modules<\/a>.<\/p>\n<p>Add a &#8220;devDependency&#8221; section to package.json:<\/p>\n<pre>\n  \"devDependencies\": {\n    \"mocha\": \"*\",\n    \"chai\": \"*\",\n    \"supertest\": \"*\",\n    \"supervisor\": \"*\"\n   }\n<\/pre>\n<p>We&#8217;re adding a set of tools that are installed with npm but only used for development and testing.<\/p>\n<p>Don&#8217;t forget to add a comma or we&#8217;ll get a scary looking error:<\/p>\n<pre>\nnpm ERR! install Couldn't read dependencies\nnpm ERR! Failed to parse json\nnpm ERR! Unexpected string\n...\n<\/pre>\n<p>Also in &#8220;package.json,&#8221; change<\/p>\n<pre>\n  \"scripts\": {\n    \"start\": \"node .\/bin\/www\"\n  },\n<\/pre>\n<p>to<\/p>\n<pre>\n  \"scripts\": {\n    \"start\": \"supervisor .\/bin\/www\",\n    \"test\": \".\/node_modules\/.bin\/mocha\"\n  },\n<\/pre>\n<p>the install the new packages with:<\/p>\n<pre>\nnpm install\n<\/pre>\n<p>We&#8217;ve just added a set of development tools for rapid iteration and testing.  The scripts section lets us create shortcuts for the npm command.<\/p>\n<h3>Supervisor Allows Fast Experimentation<\/h3>\n<p>Supervisor makes it so you can edit files and just refresh the page to see the change.  Now that we have edited the npm &#8216;start&#8217; script to use supervisor, we can:<\/p>\n<pre>\nnpm start\n<\/pre>\n<p>We can view the main index page, by going to <a href=\"http:\/\/localhost:3000\">http:\/\/localhost:3000<\/a>. Then without stopping the server, let&#8217;s edit<\/p>\n<pre>views\/index.ejs<\/pre>\n<p>so the H1 text says &#8220;Hello!&#8221; instead of Express. We can refresh the page to see the update.<\/p>\n<h3>Mocha, Chai and Supertest for Testing<\/h3>\n<p><a href=\"http:\/\/visionmedia.github.io\/mocha\">Mocha<\/a> will serially run a set of tests and report failures nicely. It supports a number of different assertion libraries. <a href=\"http:\/\/chaijs.com\/\">Chai<\/a> is a single assertion library that supports the popular variants: assert, expect and should.<\/p>\n<p>You&#8217;ll need to create a test directory, empty for now.  Let&#8217;s make sure we&#8217;re set up right:<\/p>\n<pre>\nmkdir test\nnpm test\n<\/pre>\n<p>We should see:<\/p>\n<pre>\n  0 passing (2ms)\n<\/pre>\n<p>create the file<\/p>\n<pre>test\/index.test.js<\/pre>\n<p>with a test<\/p>\n<pre>\nvar request = require('supertest')\n  , express = require('express');\n \nvar app = require('..\/app');\n \ndescribe('Index Page', function() {\n  it(\"renders successfully\", function(done) {\n    request(app).get('\/').expect(200, done);    \n  })\n})\n<\/pre>\n<p>run the test with<\/p>\n<pre>npm test<\/pre>\n<p>and it passes!<\/p>\n<h3>Adding New Behavior Test First<\/h3>\n<p>We can add expectations to our test.  Let&#8217;s plan to add the text &#8220;Hello World to the index page.  Supertest supports simple regex syntax for comparing text.  The super test API cleverly supports concise testing by assuming a number as the first param is a status code, but a regex or a string wants to compare to the body.<\/p>\n<pre>\n  it(\"renders successfully\", function(done) {\n    request(app).get('\/')\n      .expect(200)\n      .expect(\/Hello World\/, done);    \n  })\n<\/pre>\n<p>This will fail<\/p>\n<pre>\n  1) Index Page renders successfully:\n     Error: expected body '\\n\\n  \\n    <title>Express<\/title>\\n    \\n  \\n  \\n    &lt;h1&gt;Hello!&lt;\/h1&gt;\\n    <p>Welcome to Express<\/p>\\n  \\n\\n' to match \/Hello World\/\n<\/pre>\n<p>Now we can edit the page in<\/p>\n<pre>views\/index.ejs<\/pre>\n<p>and run the test again with<\/p>\n<pre>npm test<\/pre>\n<p>to see it pass!<\/p>\n<pre>\n  Index Page\nGET \/ 200 10ms - 211b\n    \u2713 renders successfully \n\n\n  1 passing (34ms)\n<\/pre>\n","protected":false},"excerpt":{"rendered":"<p>It has been surprisingly hard to find a very simple tutorial to get started with Express, along with some common helpful tools, including tests! Here&#8217;s a little tutorial for Node.js v0.10 and Express 4. I&#8217;m learning Express, since I&#8217;m working on an app in SailsJS, so I will pick options that mirror choices made by&hellip; <a href=\"https:\/\/www.ultrasaurus.com\/2014\/08\/test-first-express\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a><\/p>\n","protected":false},"author":84,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[2],"tags":[],"_links":{"self":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/5207"}],"collection":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/users\/84"}],"replies":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/comments?post=5207"}],"version-history":[{"count":0,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/5207\/revisions"}],"wp:attachment":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/media?parent=5207"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/categories?post=5207"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/tags?post=5207"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}