{"id":6524,"date":"2018-02-25T08:05:01","date_gmt":"2018-02-25T16:05:01","guid":{"rendered":"https:\/\/www.ultrasaurus.com\/?p=6524"},"modified":"2018-02-25T08:05:01","modified_gmt":"2018-02-25T16:05:01","slug":"listening-to-very-specific-events","status":"publish","type":"post","link":"https:\/\/www.ultrasaurus.com\/2018\/02\/listening-to-very-specific-events\/","title":{"rendered":"listening to very specific events"},"content":{"rendered":"<p>The model of <a href=\"https:\/\/www.ultrasaurus.com\/2018\/02\/declarative-eventing\/\">declarative eventing<\/a> allows for listening to very specific events and then triggering specific actions. This model simplifies the developer experience, as well as optimizing the system by reducing network traffic.<\/p>\n<h3>AWS S3 bucket trigger<\/h3>\n<p>In looking AWS to explain changes in S3 can trigger Lambda functions, I found that the AWS product docs focus on the GUI configuration experience. This probably makes it easy for new folks to write a specific Lambda function; however, it a little harder to see the system patterns before gaining a lot of hands-on experience.<\/p>\n<p>The trigger-action association can be seen more clearly in a <a href=\"https:\/\/www.terraform.io\/docs\/providers\/aws\/r\/s3_bucket_notification.html\">Terraform configuration<\/a>. Under the hood, Teraform must be using AWS APIs for setting up the trigger). The configuration below specifies that whenever a json file is uploaded to a specific bucket with the path prefix \u201ccontent-packages\u201d then a specific Lambda function will be executed:<\/p>\n<pre><code>resource \"aws_s3_bucket_notification\" \"bucket_terraform_notification\" {\n    bucket = \"${aws_s3_bucket.terraform_bucket.id}\"\n    lambda_function {\n        lambda_function_arn = \"${aws_lambda_function.terraform_func.arn}\"\n        events = [\"s3:ObjectCreated:*\"]\n        filter_prefix = \"content-packages\/\"\n        filter_suffix = \".json\"\n    }\n}\n<\/code><\/pre>\n<p>&#8212; via <a href=\"https:\/\/gist.github.com\/justinsoliz\/8fe711039a76d8261c15f9199c0b29ea\">justinsoliz&#8217; github gist<\/a><\/p>\n<h3>Google Cloud events<\/h3>\n<p>To illustrate an alternate developer experience, the examples below are shown with <strong>Firebase JavaScript SDK for Google Cloud Functions<\/strong>, which is idiomatic for JavaScript developers using the <a href=\"https:\/\/www.martinfowler.com\/bliki\/FluentInterface.html\">Fluent API style<\/a>, popularized by jQuery.  The same functionality is available via command line options using <code>gcloud<\/code>, the Google Cloud CLI.<\/p>\n<p>** Cloud Storage trigger**<\/p>\n<p>Below is an example of specifying a trigger for a change to a Google Cloud Storage object in a specific bucket:<\/p>\n<pre><code>exports.generateThumbnail = functions.storage.bucket('my-bucket').object().onChange((event) =&gt; {\n  \/\/ ...\n});\n<\/code><\/pre>\n<h3>Cloud Firestore trigger<\/h3>\n<p>This approach to filtering events at their source is very powerful when applied to database operations, where a developer can listen to a specific database path, such as with <a href=\"https:\/\/firebase.google.com\/docs\/functions\/firestore-events\">Cloud Firestore events<\/a>:<\/p>\n<pre><code>exports.createProduct = functions.firestore\n  .document('products\/{productId}')\n  .onCreate(event =&gt; {\n    \/\/ Get an object representing the document\n    \/\/ e.g. {'name': 'Wooden Doll', 'description': '...}\n    var newValue = event.data.data();\n\n    \/\/ access a particular field as you would any JS property\n    var name = newValue.name;\n\n    \/\/ perform desired operations ...\n});\n<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>The model of declarative eventing allows for listening to very specific events and then triggering specific actions. This model simplifies the developer experience, as well as optimizing the system by reducing network traffic. AWS S3 bucket trigger In looking AWS to explain changes in S3 can trigger Lambda functions, I found that the AWS product&hellip; <a href=\"https:\/\/www.ultrasaurus.com\/2018\/02\/listening-to-very-specific-events\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a><\/p>\n","protected":false},"author":84,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[2],"tags":[],"_links":{"self":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/6524"}],"collection":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/users\/84"}],"replies":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/comments?post=6524"}],"version-history":[{"count":12,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/6524\/revisions"}],"predecessor-version":[{"id":6537,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/6524\/revisions\/6537"}],"wp:attachment":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/media?parent=6524"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/categories?post=6524"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/tags?post=6524"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}