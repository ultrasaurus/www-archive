{"id":5737,"date":"2015-12-13T23:10:24","date_gmt":"2015-12-14T07:10:24","guid":{"rendered":"https:\/\/www.ultrasaurus.com\/?p=5737"},"modified":"2018-07-05T20:51:37","modified_gmt":"2018-07-06T03:51:37","slug":"truthiness-in-ruby","status":"publish","type":"post","link":"https:\/\/www.ultrasaurus.com\/2015\/12\/truthiness-in-ruby\/","title":{"rendered":"truthiness in ruby"},"content":{"rendered":"<p>I found myself confronting some unexpected truths in Ruby the other day&#8230;<\/p>\n<p><code><br \/>\n2.2.2 :001 &gt; 1 and 0<br \/>\n =&gt; 0<br \/>\n2.2.2 :002 &gt; 0 and 1<br \/>\n =&gt; 1<br \/>\n<\/code><\/p>\n<p>In most programming languages, 0 is false and 1 is true, or more accurately we say that 1 is &#8220;truthy.&#8221; In popular culture, <a href=\"http:\/\/www.cc.com\/video-clips\/63ite2\/the-colbert-report-the-word---truthiness\">truthiness<\/a> is believing something to be true from gut feelings, rather than relying on those pesky facts. Google defines truthiness as &#8220;the quality of seeming or being felt to be true, even if not necessarily true.&#8221;  This is closer to what programming languages mean. 1 is 1, but it treated as true if used within a conditional.<\/p>\n<p><code><br \/>\n2.2.0 :001 &gt; 1 == true<br \/>\n =&gt; false<br \/>\n2.2.0 :002 &gt; if 1<br \/>\n2.2.0 :003?&gt;   puts \"1 is truthy\"<br \/>\n2.2.0 :004?&gt; else<br \/>\n2.2.0 :005 &gt;   puts \"this doesn't happen\"<br \/>\n2.2.0 :006?&gt; end<br \/>\n1 is truthy<\/p>\n<p><\/code><\/p>\n<p>In Ruby, every number, every value is an instance of an object:<\/p>\n<p><code><br \/>\n2.2.0 :007 &gt; 1.class<br \/>\n =&gt; Fixnum<br \/>\n2.2.0 :008 &gt; true.class<br \/>\n =&gt; TrueClass<br \/>\n2.2.0 :009 &gt; \"potato\".class<br \/>\n =&gt; String<br \/>\n<\/code><\/p>\n<p>So every object, is a thing, which has a value and evaluates to true in a conditional expression, which means 0 is truthy&#8230;<\/p>\n<p><code><br \/>\n2.2.0 :001 &gt; if 0<br \/>\n2.2.0 :002?&gt;   puts \"0 is truthy\"<br \/>\n2.2.0 :003?&gt; else<br \/>\n2.2.0 :004 &gt;   puts \"never gets here\"<br \/>\n2.2.0 :005?&gt; end<br \/>\n0 is truthy<br \/>\n<\/code><\/p>\n<p>So, both 0 and 1 will act like true in a conditional. <a href=\"https:\/\/twitter.com\/MarmiteJunction\/status\/676464619708358656\">@MarmiteJunction notes<\/a> that this works completely as expected:<\/p>\n<p><code><br \/>\n(1 and 0) ? true : false #true<br \/>\n(0 and 1) ? true : false #true<br \/>\n<\/code><\/p>\n<p>The last piece of the puzzle is the behavior of <code>and<\/code> which is one of the &#8220;boolean operators&#8221; and I usually think about them as evaluating to true or false, but that&#8217;s not exactly how they work.<\/p>\n<p><code><br \/>\n2.2.0 :006 &gt; \"cat\" or \"dog\"<br \/>\n =&gt; \"cat\"<br \/>\n2.2.0 :007 &gt; \"nuts\" and \"berries\"<br \/>\n =&gt; \"berries\"<br \/>\n<\/code><\/p>\n<p>Each of boolean expressions above are truthy, but are not <code>true<\/code>.  The OR expression will return the first truthy value, and the AND expression will return the last one.  In other contexts, I&#8217;m used to the commutative property of AND and OR, but in Ruby that&#8217;s not at all true:<\/p>\n<p><code><br \/>\n2.2.2 :001 &gt; 1 and 0<br \/>\n =&gt; 0<br \/>\n2.2.2 :002 &gt; 0 and 1<br \/>\n =&gt; 1<br \/>\n<\/code><\/p>\n<p>hmmm.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>I found myself confronting some unexpected truths in Ruby the other day&#8230; 2.2.2 :001 &gt; 1 and 0 =&gt; 0 2.2.2 :002 &gt; 0 and 1 =&gt; 1 In most programming languages, 0 is false and 1 is true, or more accurately we say that 1 is &#8220;truthy.&#8221; In popular culture, truthiness is believing something&hellip; <a href=\"https:\/\/www.ultrasaurus.com\/2015\/12\/truthiness-in-ruby\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a><\/p>\n","protected":false},"author":84,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[3],"tags":[],"_links":{"self":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/5737"}],"collection":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/users\/84"}],"replies":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/comments?post=5737"}],"version-history":[{"count":1,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/5737\/revisions"}],"predecessor-version":[{"id":6638,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/5737\/revisions\/6638"}],"wp:attachment":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/media?parent=5737"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/categories?post=5737"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/tags?post=5737"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}