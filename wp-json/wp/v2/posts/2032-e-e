{"id":2032,"date":"2009-08-31T19:07:10","date_gmt":"2009-09-01T03:07:10","guid":{"rendered":"https:\/\/www.ultrasaurus.com\/?p=2032"},"modified":"2009-08-31T19:07:10","modified_gmt":"2009-09-01T03:07:10","slug":"rails-models-are-views","status":"publish","type":"post","link":"https:\/\/www.ultrasaurus.com\/2009\/08\/rails-models-are-views\/","title":{"rendered":"rails models are views?"},"content":{"rendered":"<p>Rails appears pretty strict about separation of the abstraction layers that make up its notion of a web application: models, view and controllers.  If you were to suggest calling a presentation method, such as url_for, in your model, the stoic Rails advocate will have an allergic reaction. However, Rails thinks nothing of rendering a model directly as a view, such as:<\/p>\n<pre>\nformat.json { render :json =&gt; @products }\n<\/pre>\n<p>Now, one might argue that this is controller code and the controller is allowed to interpret the model as a view.  The controller&#8217;s job is to mediate this interaction.  However, I feel that it is a dangerous shortcut, made even more so by how hard to seems to be to override.  Perhaps the json implementation is simply incomplete.<\/p>\n<p>In xml, this strange controller pattern is easily corrected by <a href=\"http:\/\/danengle.us\/2009\/05\/generating-custom-xml-for-your-rails-app\/\">providing an xml view<\/a>.  The xml builder syntax is particularly readable, and it is easy to design your XML API effectively.<\/p>\n<p>I haven&#8217;t found an equivalent for json.  I tried to use a JSON API today to no avail.  My model included image data which breaks when auto-rendered in JSON.  What I really wanted was to include a URL instead of the image data, which I implement neatly in my xml.builder view:<\/p>\n<pre>\nxml.instruct!\nxml.products(\"type\"=&gt;\"array\") do\n  @products.each do |product|\n    xml.product do\n      xml.sku product.sku\n      xml.name product.name\n      xml.brand product.brand\n      xml.img_url url_for(:controller =&gt; :products, :action =&gt; :show, :format=&gt;:png, :id =&gt; product.id, :only_path =&gt; false)\n    end\n  end\nend\n<\/pre>\n<p>The problem is that I want a similar view in JSON.  The to_json API leads me to put this logic in my model (gasp!).  In fact, the ActiveRecord::Serialization docs give an example of providing a method to generate JSON instead of a literal attribute.  The example is of a &#8220;permalink&#8221; which seem suspiciously like something that belongs is the view layer.<\/p>\n<pre>\n  konata.to_json(:methods =&gt; :permalink)\n  # =&gt; {\"id\": 1, \"name\": \"Konata Izumi\", \"age\": 16,\n        \"created_at\": \"2006\/08\/01\", \"awesome\": true,\n        \"permalink\": \"1-konata-izumi\"}\n<\/pre>\n<p>Today&#8217;s solution was to go back to using my comfortable old XML API, but I would prefer to consume JSON from the other side.  I wonder if anyone is working on a JSON builder or if there is some clear solution that I haven&#8217;t yet stumbled upon.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Rails appears pretty strict about separation of the abstraction layers that make up its notion of a web application: models, view and controllers. If you were to suggest calling a presentation method, such as url_for, in your model, the stoic Rails advocate will have an allergic reaction. However, Rails thinks nothing of rendering a model&hellip; <a href=\"https:\/\/www.ultrasaurus.com\/2009\/08\/rails-models-are-views\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a><\/p>\n","protected":false},"author":84,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[2],"tags":[],"_links":{"self":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/2032"}],"collection":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/users\/84"}],"replies":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/comments?post=2032"}],"version-history":[{"count":0,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/2032\/revisions"}],"wp:attachment":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/media?parent=2032"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/categories?post=2032"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/tags?post=2032"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}