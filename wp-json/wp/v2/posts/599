{"id":599,"date":"2008-12-22T00:42:19","date_gmt":"2008-12-22T08:42:19","guid":{"rendered":"https:\/\/www.ultrasaurus.com\/sarahblog\/2008\/12\/rails-2-day-3-behavior-driven-development\/"},"modified":"2008-12-22T00:42:19","modified_gmt":"2008-12-22T08:42:19","slug":"rails-2-day-3-behavior-driven-development","status":"publish","type":"post","link":"https:\/\/www.ultrasaurus.com\/2008\/12\/rails-2-day-3-behavior-driven-development\/","title":{"rendered":"rails 2 day 3: behavior-driven development"},"content":{"rendered":"<p>Now that we have learned some basic Ruby syntax and gained some understanding about what the Rails generate scaffold script does, it is high time we started using a more modern approach to coding.  In fact, if you recall at the end of <a href=\"https:\/\/www.ultrasaurus.com\/code\/2008\/12\/rails-day2.html\">day 2<\/a>, I realized with horror that we had actually modified code and added features without developing the tests first.  This defied everything I had ever heard about good coding practices from the Ruby crowd and I set off to mend my ways.<\/p>\n<p><a href=\"http:\/\/www.ruby-forum.com\/topic\/94721#264483\">Rick Denatale<\/a> describes the process of test-driven\/behavior-driven development as:<\/p>\n<ol>\n<li>Write the test\/spec<\/li>\n<li>Ensure that it FAILS<\/li>\n<li>Write the code to make it pass<\/li>\n<li>Goto step 1<\/li>\n<\/ol>\n<p>After <a href=\"https:\/\/www.ultrasaurus.com\/sarahblog\/archives\/000543.html\">reading a bit<\/a> about test- and behavior-driven development, I decided to use a relatively new framework called <a href=\"http:\/\/github.com\/aslakhellesoy\/cucumber\/wikis\">cucumber<\/a> which uses natural language to describe features.<\/p>\n<p>Today we will:<\/p>\n<ol>\n<li><a href=\"#install\">Install cucumber<\/a><\/li>\n<li><a href=\"#setup\">Set up the application<\/a><\/li>\n<li><a href=\"#spec\">Describe a feature<\/a><\/li>\n<li><a href=\"#fail\">Execute the feature and Watch it fail<\/a><\/li>\n<li><a href=\"#code\">Write the code to make it pass<\/a><\/li>\n<li><a href=\"#review\">Review what we learned<\/a><\/li>\n<\/ol>\n<p>&nbsp;<\/p>\n<hr \/>\n<p>&nbsp;<\/p>\n<p>h1 {font-size: 150%}<br \/>\nh1,h2 {font-style: bold}<br \/>\nimg<br \/>\n{<br \/>\nborder:2px solid silver;<br \/>\nmargin:0px 0px 15px 20px;<br \/>\n}<br \/>\nblockquote, pre.code {<br \/>\nborder: solid 1px #aaa;<br \/>\npadding: 6px;<br \/>\nbackground-color: #eee;<br \/>\ncolor: inherit;<br \/>\noverflow:auto;<br \/>\nmargin: 10px 0px;<br \/>\n}<\/p>\n<p><a name=\"install\"><\/p>\n<h1>Install Cucumber<\/h1>\n<p><\/a><\/p>\n<p>Based on these <a href=\"http:\/\/github.com\/aslakhellesoy\/cucumber\/wikis\/ruby-on-rails\">install instructions<\/a><\/p>\n<pre class=\"code\">sudo gem install rspec rspec-rails cucumber webrat<\/pre>\n<p><strong>important<\/strong>: Cucumber 0.1.12 and up depends on Webrat 0.3.2.1 or higher, which as of this writing is not yet officially released to Rubyforge&#8217;s gem repository. In the meanwhile, install Bryan Helkamp&#8217;s snapshot gem:<\/p>\n<pre class=\"code\">\ngem sources -a http:\/\/gems.github.com\nsudo gem install brynary-webrat\n<\/pre>\n<p>The plugins&#8217; dependencies must be installed separately:<\/p>\n<pre class=\"code\">\ngem install term-ansicolor treetop diff-lcs nokogiri\n<\/pre>\n<p>&nbsp;<\/p>\n<p><a name=\"setup\"><\/p>\n<h1>Setup the Application<\/h1>\n<p><\/a><\/p>\n<p>First we&#8217;ll create the Rails &#8220;to do list&#8221; application:<\/p>\n<pre class=\"code\">\ncd $webroot\nrails -d mysql todolist\ncd todolist\nrake db:create:all\nrake db:migrate\n<\/pre>\n<p>Now we&#8217;ll set up cucumber for the project<\/p>\n<pre class=\"code\">\nruby script\/generate cucumber\ncreate  features\/step_definitions\ncreate  features\/step_definitions\/webrat_steps.rb\ncreate  features\/support\ncreate  features\/support\/env.rb\nexists  lib\/tasks\ncreate  lib\/tasks\/cucumber.rake\ncreate  script\/cucumber\n<\/pre>\n<p>Just to make sure that everything is installed correctly:<\/p>\n<pre class=\"code\">rake features<\/pre>\n<p>If that runs without errors you are ready to rock.<\/p>\n<p><p>&nbsp;<\/a><\/p>\n<p><a name=\"spec\"><\/p>\n<h1>Describe a Feature<\/h1>\n<p><\/a><\/p>\n<p>In the features directory that was auto-created for us with the cucumber script, we create a .feature file which starts with a description of the feature.  The first section that describes the feature appears to be purely documentation; however the &#8220;scenario&#8221; sections will each become part of the executable feature definition.  For starters we&#8217;ll do something simple.<\/p>\n<p><code><strong>features\/tasklist.feature<\/strong><\/code><\/p>\n<pre class=\"code\">\nFeature: Tasks\nIn order to keep track of tasks\nPeople should be able to\nCreate a list of tasks\n\nScenario: List Tasks\nGiven that I have created a task \"task 1\"\nWhen I go to the tasks page\nThen I should see \"task 1\"\n<\/pre>\n<p>We know we haven&#8217;t written any executable steps, but we&#8217;ll execute it anyhow:<\/p>\n<p><img src=\"http:\/\/farm4.static.flickr.com\/3243\/3126961149_b267e27c02_o.png\" \/><\/p>\n<p>Note that one of the steps is already defined in webrat.  Isn&#8217;t that cool? When we set up cucumber for the project, it automatically includes step_definitions\/webrat_steps.rb which defines some common steps.  As you get the hang of this, you reuse certain word patterns which map to specific tests.  But we&#8217;re getting ahead of ourselves.  We need to dive into the creation of &#8220;steps&#8221; which make up our executable spec. Cucumber gives a some handy snippets to get us started (in the output of &#8220;rake features&#8221; above).  We&#8217;ll paste these into a new file that we&#8217;ll create in the &#8220;features\/step_definitions&#8221; directory:<\/p>\n<p><code><strong>features\/step_definitions\/tasklist_steps.rb<\/strong><\/code><\/p>\n<pre class=\"code\">\nGiven \/^that I have created a task \"(.*)\"$\/ do |desc|\nTask.create!(:description =&gt; desc)\nend\n\nWhen \/^I go to the tasks page$\/ do\nvisit \"\/tasks\"\nend\n<\/pre>\n<p>Note that I touched up the first step to include a regular expression.  This means I could add <code>Given that I have created a task \"foo\"<\/code> to another scenario and it would match this step.<\/p>\n<blockquote><p>\n<a name=\"syntax\"><\/p>\n<h2>Short aside on task creation syntax<\/h2>\n<p><\/a><\/p>\n<p>To create the task, I&#8217;m calling my Task model directly (since I&#8217;m new to Rails, I looked up the ActiveRecord::Base syntax in the<a href=\"http:\/\/api.rubyonrails.org\/\"> Rails Framework API docs<\/a>).  In my first pass I wrote:<\/p>\n<pre>\ntask = Task.new(:description =&gt; desc);\ntask.save\n<\/pre>\n<p>However, Aslak Helles\u00f8y <a href=\"http:\/\/www.ruby-forum.com\/topic\/174015#762400\">kindly pointed out<\/a> that it would fail silently with that syntax, and instead I should call <code>task.save!<\/code> or the even simpler <code>Task.create!(:description =&gt; desc)<\/code>.  I had missed create! in the documentation, since it is part of <a href=\"http:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/Validations\/ClassMethods.html#M001902\">ActiveRecord::Validations<\/a>.  The API doc is a little confusing on this point, but looking at the source shows that <a href=\"http:\/\/www.ruby-forum.com\/topic\/174015#762531\">ActiveRecord::Validations is included as a module<\/a>.  <a href=\"http:\/\/www.ruby-forum.com\/topic\/174015#762550\">Pat Maddox notes<\/a> that he uses the bang version (.save!) in tests, and the non-bang version (.save) in production code since validation errors aren&#8217;t exceptional.<\/p>\n<\/blockquote>\n<p><a name=\"step3\"><\/p>\n<h2>Back to Step 3<\/h2>\n<p><\/a><\/p>\n<p>Looking in <code>features\/step_definitions\/webrat_steps.rb<\/code>, you can see the definition of our third step:<\/p>\n<pre class=\"code\">\nThen \/^I should see \"(.*)\"$\/ do |text|\nresponse.body.should =~ \/#{text}\/m\nend\n<\/pre>\n<p>Ok, now we have a simple spec.  Is it time to write the code?  No!<\/p>\n<p><a name=\"fail\"><\/p>\n<h1>Execute the Feature and Watch it Fail<\/h1>\n<p><\/a><br \/>\n<img src=\"http:\/\/farm4.static.flickr.com\/3131\/3127004017_c31be47724_o.png\" \/><\/p>\n<p>As expected, we see errors on our first step, since we have not yet written any code for the application.<\/p>\n<p><a name=\"code\"><\/p>\n<h1>Write the code to make it pass<\/h1>\n<p><\/a><\/p>\n<p>Now, at last it is time to write code<\/p>\n<pre class=\"code\">\n$ .\/script\/generate scaffold Task description:string\n$ rake db:migrate\n<\/pre>\n<p>Run the spec again..<\/p>\n<p>\n<img src=\"http:\/\/farm4.static.flickr.com\/3131\/3127010689_8d6948843c_o.png\" \/><\/p>\n<p>It passes, yay!<\/p>\n<p><a name=\"review\"><\/p>\n<h1>What did we learn?<\/h1>\n<p><\/a><\/p>\n<p>When we first set up our app, to setup cucumber:<\/p>\n<p><pre class=\"code\">\nruby script\/generate cucumber\n<\/pre>\n<p>To describe our feature, we create two files:<\/p>\n<ul>\n<li>features\/xxx.feature<\/li>\n<li>features\/step_definitions\/xxx_steps.rb<\/li>\n<\/ul>\n<p>To run the feature description:<\/p>\n<pre class=\"code\">\nrake features\n<\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Now that we have learned some basic Ruby syntax and gained some understanding about what the Rails generate scaffold script does, it is high time we started using a more modern approach to coding. In fact, if you recall at the end of day 2, I realized with horror that we had actually modified code&hellip; <a href=\"https:\/\/www.ultrasaurus.com\/2008\/12\/rails-2-day-3-behavior-driven-development\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a> <a href=\"https:\/\/www.ultrasaurus.com\/2008\/12\/rails-2-day-3-behavior-driven-development\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a><\/p>\n","protected":false},"author":84,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[2],"tags":[],"_links":{"self":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/599"}],"collection":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/users\/84"}],"replies":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/comments?post=599"}],"version-history":[{"count":0,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/599\/revisions"}],"wp:attachment":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/media?parent=599"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/categories?post=599"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/tags?post=599"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}