{"id":1028,"date":"2009-04-17T09:31:16","date_gmt":"2009-04-17T17:31:16","guid":{"rendered":"https:\/\/www.ultrasaurus.com\/?p=1028"},"modified":"2009-04-17T09:31:16","modified_gmt":"2009-04-17T17:31:16","slug":"macruby-and-hot-cocoa","status":"publish","type":"post","link":"https:\/\/www.ultrasaurus.com\/2009\/04\/macruby-and-hot-cocoa\/","title":{"rendered":"MacRuby and Hot Cocoa"},"content":{"rendered":"<p>great session by<a href=\"http:\/\/gogaruco.com\/speakers\/index.html#kilmer\"> Rich Kilmer<\/a> at Golden Gate Ruby Conference.<\/p>\n<p><a href=\"http:\/\/www.macruby.org\/\">MacRuby<\/a>, started toward the end of &#8217;07.\u00a0 It has two ambitious goals:<\/p>\n<ul>\n<li>Make Mac OSX the best platform for Ruby developers<\/li>\n<li>Make Ruby the best Cocoa programming language on OSX<\/li>\n<\/ul>\n<p>Apple has the higher level APIs in Objective-C.\u00a0 RubyCocoa (2001) mostly written in C will bridge\u00a0 Ruby &amp; Objective-C.\u00a0 Quite verbose. Rich showed a &#8220;hello world&#8221; that was about a page of code in small type.\u00a0 Problem: it&#8217;s a bridge.\u00a0 Thereare holes, expensive (slow), messaging syntax is diferent.\u00a0 Ruby uses green threads (it is not re-entrant) &#8212; only one native thread can enter the Ruby runtime at any time. Tricky garbage collection, etc.<\/p>\n<p>The development of MacRuby leveraged the key observation that Ruby is actually similar to Objective-C.\u00a0 MacRuby replaced the Ruby 1.9 garbage collector with the Objective-C garbage collector.\u00a0 Ruby&#8217;s hash is actually an NsMetuable dictionary.\u00a0 Every Ruby class is an Objective-C class.\u00a0 You can use MacRuby, at runtime to add methods to an Objective-C object.<\/p>\n<p>MacRuby is 0.4.\u00a0 Syntax is better, but still a lot of code for &#8220;Hello World&#8221;<\/p>\n<p><strong>HotCocoa<\/strong><br \/>\nIn the MacRuby &#8220;hello world&#8221; a lot of the code is in configuring, setting up the app, wiring things together.\u00a0 <a href=\"http:\/\/www.macruby.org\/trac\/wiki\/HotCocoa\">HotCocoa<\/a> is just a library that helps simplify this setup process.<\/p>\n<p>Much more concise, but it isn&#8217;t magic.\u00a0 &#8216;window&#8217; returns an NSWindow, it isn&#8217;t obscured, just decorated.\u00a0 You have all the NSWindow methods available,<\/p>\n<p>Hello World turns into 7 lines of code!\u00a0 [update: <a href=\"http:\/\/pivotallabs.com\/users\/edward\/blog\/articles\/779-gogaruco-talk-macruby-hotcocoa\">nice post<\/a> with code snippets]<\/p>\n<p>hotcocoa &lt;app&gt; (similar to rails &lt;app&gt;) will generate all the files needs for a Mac application.\u00a0 Framework is dropped in there, so you can give the code to someone and they don&#8217;t need<\/p>\n<p>HotConsole: written in MacRuby and it is irb, but {}.methods(true,true) will show you all of the methods in an MSMutable dictionary, but otherwise {} behaves just like a Ruby hash. Also let you interactively create native Mac OS widgets (create a window, add a button, make it do something) all by typing in a few lines into this interactive console.<\/p>\n<p><strong>MacRuby Experimental<\/strong><\/p>\n<p>LLVM replaces yarv.\u00a0 In this, using MacRuby the jit generates machine code. This makes it 4-5x faster than 1.9 (which is 4-5 times faster than 1.8).\u00a0 Goal is to pass all of 1.9 Ruby specs, and it is well on its way to doing this.\u00a0 Also plans to make it reentrant.\u00a0 Goal is to automatically generate GrandCentral code hich allows the code to run across all the cores in the machine.\u00a0 Rich expects this to be complete by the end of the year.\u00a0 This could also be applied to compiling ahead of time which would enable running the code on a certain devices that don&#8217;t run Ruby, yet run OSX code :)<\/p>\n","protected":false},"excerpt":{"rendered":"<p>great session by Rich Kilmer at Golden Gate Ruby Conference. MacRuby, started toward the end of &#8217;07.\u00a0 It has two ambitious goals: Make Mac OSX the best platform for Ruby developers Make Ruby the best Cocoa programming language on OSX Apple has the higher level APIs in Objective-C.\u00a0 RubyCocoa (2001) mostly written in C will&hellip; <a href=\"https:\/\/www.ultrasaurus.com\/2009\/04\/macruby-and-hot-cocoa\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a><\/p>\n","protected":false},"author":84,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[3],"tags":[9,18],"_links":{"self":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/1028"}],"collection":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/users\/84"}],"replies":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/comments?post=1028"}],"version-history":[{"count":0,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/1028\/revisions"}],"wp:attachment":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/media?parent=1028"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/categories?post=1028"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/tags?post=1028"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}