{"id":3428,"date":"2011-11-02T06:40:59","date_gmt":"2011-11-02T14:40:59","guid":{"rendered":"https:\/\/www.ultrasaurus.com\/?p=3428"},"modified":"2011-11-02T06:40:59","modified_gmt":"2011-11-02T14:40:59","slug":"debugging-objective-c-in-xcode-for-ios","status":"publish","type":"post","link":"https:\/\/www.ultrasaurus.com\/2011\/11\/debugging-objective-c-in-xcode-for-ios\/","title":{"rendered":"debugging objective-c in xcode for iOS"},"content":{"rendered":"<p>I&#8217;m coding again in native Objective-C coding for iOS with the lovely XCode.\u00a0 It has been a while so I&#8217;ve been reading up on debugging tricks.\u00a0 Sadly, it still feels a bit like debugging in Macsbug in 1990&#8230; <\/p>\n<p>The graphical display of object values is fairly useless, but in gdb, we can use the <strong>po<\/strong> command to get a pretty printing of the object if it comes with a built in description (for details see <a href=\"http:\/\/cocoawithlove.com\/2008\/10\/debugging-tips-for-objective-c.html\">nice writeup from cocoa with love<\/a>).<\/p>\n<p>For our own objects, we can define a debugDescription method.  For example, if I have a Thing class which is a subclass of NSObject and just has a title and subtitle:<\/p>\n<blockquote>\n<pre>@implementation Thing\n\n@synthesize title;\n@synthesize subtitle;\n\n- (NSString *)debugDescription { return [NSString stringWithFormat:@\"title: %@n subtitle: %@\", title, subtitle]; }\n\n@end<\/pre>\n<\/blockquote>\n<p>Then if I find myself at a breakpoint with an instance of Thing in scope, called &#8220;thing&#8221;:<\/p>\n<blockquote>\n<pre>(gdb) po thing\ntitle: Another\nsubtitle: Another example<\/pre>\n<\/blockquote>\n<p>Or if I have an array of Thing instances, called &#8220;things&#8221;:<\/p>\n<blockquote>\n<pre>(gdb) po things\n&lt;__NSArrayM 0x6a157a0&gt;(\ntitle: Basic\nsubtitle: My Thing,\ntitle: Something\nsubtitle: Example of something,\ntitle: Another\nsubtitle: Another example\n)<\/pre>\n<\/blockquote>\n<p><a href=\"http:\/\/iphonedevelopertips.com\/cocoa\/overriding-nsobject-description-method.html\">iphonedevelopertips illustrates<\/a> this nicely in more detail with the description method which will do the same thing for any subclass of NSObject.<\/p>\n<p><strong>Note:<\/strong> <code>print-object<\/code> actually calls the <code>debugDescription<\/code> method of the specified object. <code>NSObject<\/code> implements this method by calling through to the <code>description<\/code> method. Thus, by default, an object&#8217;s debug description is the same as its description. However, you can override <code>debugDescription<\/code> if you want to decouple these; many Cocoa objects do this. (via <a href=\"http:\/\/developer.apple.com\/library\/mac\/#technotes\/tn2124\/_index.html\">Apple Tech Note 2124<\/a>)<\/p>\n<h2>Update: LLVM Debugger sucks less<\/h2>\n<p>If you <a href=\"http:\/\/developer.apple.com\/library\/mac\/#documentation\/IDEs\/Conceptual\/Xcode4TransitionGuide\/Debugging\/Debugging.html\">choose the LLVM Debugger<\/a>, instead of gdb, you can see properties on an object without defining a description or debugDescription method:<\/p>\n<blockquote>\n<pre>\n(lldb) po thing\n(Thing *) $8 = 0x06a487d0 \n(lldb) po thing.title\n(NSString *) $9 = 0x00005984 Another\n(lldb) po thing.subtitle\n(NSString *) $10 = 0x00005994 Another example\n<\/pre>\n<\/blockquote>\n<p>&#8230;but still no love for Arrays:<\/p>\n<blockquote>\n<pre>\n(lldb) po things\n(NSMutableArray *) $11 = 0x06a0b6a0 (\n,\n,\n\n)\n<\/pre>\n<\/blockquote>\n<p>&#8230;just for fun, let&#8217;s see how to look at a property of the first object in an array:<\/p>\n<blockquote>\n<pre>\n(lldb) po [things objectAtIndex:0]\n(id) $12 = 0x06a44d20 \n(lldb) po [things objectAtIndex:0].title\nerror: warning: instance method '-objectAtIndex:' not found (return type defaults to 'id')\nerror: property 'title' not found on object of type 'id'\nerror: 1 errors parsing expression\n(lldb) po (Thing*)[things objectAtIndex:0].title\nerror: warning: instance method '-objectAtIndex:' not found (return type defaults to 'id')\nerror: property 'title' not found on object of type 'id'\nerror: 1 errors parsing expression\n(lldb) po ((Thing*)[things objectAtIndex:0]).title\n(NSString *) $14 = 0x00005944 Basic\n(lldb) po [[things objectAtIndex:0] valueForKey:@\"title\"]\n(id) $15 = 0x00005944 Basic\n<\/pre>\n<\/blockquote>\n<p>Whew!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>I&#8217;m coding again in native Objective-C coding for iOS with the lovely XCode.\u00a0 It has been a while so I&#8217;ve been reading up on debugging tricks.\u00a0 Sadly, it still feels a bit like debugging in Macsbug in 1990&#8230; The graphical display of object values is fairly useless, but in gdb, we can use the po&hellip; <a href=\"https:\/\/www.ultrasaurus.com\/2011\/11\/debugging-objective-c-in-xcode-for-ios\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a><\/p>\n","protected":false},"author":84,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[3],"tags":[],"_links":{"self":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/3428"}],"collection":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/users\/84"}],"replies":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/comments?post=3428"}],"version-history":[{"count":0,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/3428\/revisions"}],"wp:attachment":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/media?parent=3428"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/categories?post=3428"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/tags?post=3428"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}