{"id":6818,"date":"2019-06-17T21:49:03","date_gmt":"2019-06-18T04:49:03","guid":{"rendered":"https:\/\/www.ultrasaurus.com\/?p=6818"},"modified":"2019-06-17T21:49:03","modified_gmt":"2019-06-18T04:49:03","slug":"debugging-openssl-shared-libary","status":"publish","type":"post","link":"https:\/\/www.ultrasaurus.com\/2019\/06\/debugging-openssl-shared-libary\/","title":{"rendered":"debugging openssl shared libary"},"content":{"rendered":"<p>I&#8217;m debugging an issue where my app uses a library that requires me to dynamically link with an openssl library.  What&#8217;s more I&#8217;m debugging it on an old linux version. Sigh.<\/p>\n<p><code>gdb<\/code> to the rescue!<\/p>\n<p>After figuring out how to build openssl from source, I stumbled upon a gdb trick&#8230; suppose you are using a fairly standard open source library (like openssl) and you want to debug something that uses it (some other library that doesn&#8217;t work over ssl), gdb will let you know if there&#8217;s an easy way to download the symbols!  Just type <code>gdb<\/code> + <code>library name<\/code>.<\/p>\n<p>Here&#8217;s an example<\/p>\n<pre><code>gdb openssl\nGNU gdb (GDB) Red Hat Enterprise Linux (7.2-92.el6)\nCopyright (C) 2010 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later &lt;http:\/\/gnu.org\/licenses\/gpl.html&gt;\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-redhat-linux-gnu\".\nFor bug reporting instructions, please see:\n&lt;http:\/\/www.gnu.org\/software\/gdb\/bugs\/&gt;...\nReading symbols from \/usr\/bin\/openssl...(no debugging symbols found)...done.\nMissing separate debuginfos, use: debuginfo-install openssl-1.0.1e-57.el6.x86_64\n(gdb) quit\n<\/code><\/pre>\n<p>Now I can use this command to install the debug symbols for the specific version of openssl that is installed on this system:<\/p>\n<pre><code>debuginfo-install openssl-1.0.1e-57.el6.x86_64\n<\/code><\/pre>\n<p>then I can debug my app looking at how it calls openssl. In the gdb session below, I first set a breakpoint in main, and run to that point&#8230;<\/p>\n<pre><code>(gdb) b main\n(gdb) run\nStarting program: \/home\/builder\/src\/app \nwarning: no loadable sections found in added symbol-file system-supplied DSO at 0x7ffff7ffa000\n[Thread debugging using libthread_db enabled]\n\nBreakpoint 1, main (argc=4, argv=0x7fffffffe698) at sample.cpp:226\n226         LOG(\"Here I am in main!\")\n<\/code><\/pre>\n<p>now the openssl library is loaded and I can set a breakpoint in it:<\/p>\n<pre><code>(gdb) b SSL_CTX_set_verify\nBreakpoint 2 at 0x7ffff7734bb0: file ssl_lib.c, line 2040.\n(gdb) c\nContinuing.\nCreating connection object\n[New Thread 0x7ffff4bd6700 (LWP 53)]\nConnecting to server\/app URL: rtmps:\/\/live-api-s.facebook.com\/rtmp\/\n\nBreakpoint 2, SSL_CTX_set_verify (ctx=0x62efe0, mode=1, cb=0x7ffff7acb6c0 &lt;SecuredConnectionIO::VerifyCallback(int, x509_store_ctx_st*)&gt;)\n    at ssl_lib.c:2040\n2040        ctx-&gt;verify_mode=mode;\n<\/code><\/pre>\n<p>I can look at variables or all of the function arguments:<\/p>\n<pre><code>(gdb) p mode\n$1 = 1\n(gdb) info args\nctx = 0x62efe0\nmode = 1\ncb = 0x7ffff7acb6c0 &lt;SecuredConnectionIO::VerifyCallback(int, x509_store_ctx_st*)&gt;\n<\/code><\/pre>\n<p>How cool is that?<\/p>\n","protected":false},"excerpt":{"rendered":"<p>I&#8217;m debugging an issue where my app uses a library that requires me to dynamically link with an openssl library. What&#8217;s more I&#8217;m debugging it on an old linux version. Sigh. gdb to the rescue! After figuring out how to build openssl from source, I stumbled upon a gdb trick&#8230; suppose you are using a&hellip; <a href=\"https:\/\/www.ultrasaurus.com\/2019\/06\/debugging-openssl-shared-libary\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a><\/p>\n","protected":false},"author":84,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[2],"tags":[],"_links":{"self":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/6818"}],"collection":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/users\/84"}],"replies":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/comments?post=6818"}],"version-history":[{"count":2,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/6818\/revisions"}],"predecessor-version":[{"id":6820,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/6818\/revisions\/6820"}],"wp:attachment":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/media?parent=6818"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/categories?post=6818"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/tags?post=6818"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}