{"id":3127,"date":"2011-04-04T17:59:19","date_gmt":"2011-04-05T01:59:19","guid":{"rendered":"https:\/\/www.ultrasaurus.com\/?p=3127"},"modified":"2011-04-04T17:59:19","modified_gmt":"2011-04-05T01:59:19","slug":"repl-rspec-mocks","status":"publish","type":"post","link":"https:\/\/www.ultrasaurus.com\/2011\/04\/repl-rspec-mocks\/","title":{"rendered":"repl rspec mocks"},"content":{"rendered":"<p><a href=\"http:\/\/en.wikipedia.org\/wiki\/Read-eval-print_loop\">REPL<\/a> (Read-Eval-Print-Loop) is a great way to learn.  With Ruby, the experience is enabled with irb.  Sometimes, to do this we need to peek into the innards of things, which I find to be an extremely effective way to explain mocks and stubs.  It&#8217;s a regular part of my Ruby curriculum, even though I have needed to figure out the syntax three times in the last couple of years.  (Many thanks to Jen-Mei Wu for the most recent iteration.)  I still think it is worth it, even though it seems to change with crazy frequency.  <\/p>\n<p>Just in case anyone else ever wants to do this with current or previous versions of RSpec, I thought I would write it down before old versions become lost in the mists of time:<\/p>\n<h2>RSpec 2.9<\/h2>\n<p>[update for <a href=\"http:\/\/blog.blazingcloud.net\/2012\/04\/14\/repl-mocks-in-rspec-2-9\/\">repl mocks for RSpec 2.9 by Curtis Schofield<\/a>]<\/p>\n<pre>\n&gt;&gt; require 'rspec\/mocks\/standalone'\n&gt;&gt;Time.stub(:now).and_return(10,20)\n&gt;&gt;Time.now\n10\n&gt;&gt;Time.now\n20\n&gt;&gt;Time.now\n20\n <\/pre>\n<h2>RSpec 2.5<\/h2>\n<pre>\n&gt;&gt; require 'rspec\/mocks'\n&gt;&gt; include RSpec::Mocks::Methods\n&gt;&gt;Time.stub(:now).and_return(10,20)\n&gt;&gt;Time.now\n10\n&gt;&gt;Time.now\n20\n&gt;&gt;Time.now\n20\n<\/pre>\n<h2>RSpec 2.0<\/h2>\n<pre>\n&gt;&gt; require 'rspec\/mocks'\n&gt;&gt; require 'rspec\/mocks\/extensions\/object'\n&gt;&gt;Time.stub(:now).and_return(10,20)\n&gt;&gt;Time.now\n10\n&gt;&gt;Time.now\n20\n&gt;&gt;Time.now\n20\n<\/pre>\n<h2>RSpec 1.3<\/h2>\n<pre>\n&gt;&gt; require 'spec'\n&gt;&gt; require 'spec\/mocks'\n&gt;&gt;Time.stub(:now).and_return(10,20)\n&gt;&gt;Time.now\n10\n&gt;&gt;Time.now\n20\n&gt;&gt;Time.now\n20\n<\/pre>\n","protected":false},"excerpt":{"rendered":"<p>REPL (Read-Eval-Print-Loop) is a great way to learn. With Ruby, the experience is enabled with irb. Sometimes, to do this we need to peek into the innards of things, which I find to be an extremely effective way to explain mocks and stubs. It&#8217;s a regular part of my Ruby curriculum, even though I have&hellip; <a href=\"https:\/\/www.ultrasaurus.com\/2011\/04\/repl-rspec-mocks\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a><\/p>\n","protected":false},"author":84,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[2],"tags":[],"_links":{"self":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/3127"}],"collection":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/users\/84"}],"replies":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/comments?post=3127"}],"version-history":[{"count":0,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/3127\/revisions"}],"wp:attachment":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/media?parent=3127"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/categories?post=3127"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/tags?post=3127"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}