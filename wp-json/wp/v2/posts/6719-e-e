{"id":6719,"date":"2019-01-18T08:16:43","date_gmt":"2019-01-18T16:16:43","guid":{"rendered":"https:\/\/www.ultrasaurus.com\/?p=6719"},"modified":"2019-01-19T08:57:05","modified_gmt":"2019-01-19T16:57:05","slug":"golang-philosophy","status":"publish","type":"post","link":"https:\/\/www.ultrasaurus.com\/2019\/01\/golang-philosophy\/","title":{"rendered":"golang philosophy"},"content":{"rendered":"<p>In learning a new programming language, it&#8217;s helpful to understand it&#8217;s philosophy. I seek to learn patterns that are idiomatic, and more importantly: why the syntax is the way it is. This allows me to write original code more quickly, gaining an intuition for simple things like when to look for a library and when to just write code.<\/p>\n<p>I rarely find good resources for learning a new language that are targeted at experienced programmers. So I&#8217;ve developed a habit of looking for language koans. Inspired by <a href=\"http:\/\/rubykoans.com\/\">Ruby Koans<\/a>, these are unit tests which guide a programmer through basic language constructs by presenting a failing test and let you write simple code to learn the syntax of a language.  These tests typically include a bit of text that helps newcomers reflect on what is special and interesting about this particular programming language.<\/p>\n<p>In learning Go, I found <a href=\"https:\/\/github.com\/cdarwin\/go-koans\">cdarwin\/go-koans<\/a>, which helped me to reflect on the philosophy of golang, the Go programming language.<\/p>\n<p>The koans caused me to meditate on the basics, leading me to read more and reflect. While <a href=\"https:\/\/github.com\/cdarwin\/go-koans\/blob\/master\/about_basics.go\">about_basics.go<\/a> is quick to solve technically, it sparked my curiosity on two points.<\/p>\n<h2>1. The uninitialized variable<\/h2>\n<p>I really wanted the comments in the <code>go-koans<\/code> to be a bit more like Zen koans (or Ruby koans), so I wrote these:<\/p>\n<pre><code>\/\/ listen to the darkness of an unset variable\n\/\/ what is the code that is not written?\n\/\/ consider the emptiness of a string\n\n\/\/ create meaning from emptiness\n\/\/ undefined structure isn't\n<\/code><\/pre>\n<p>&#8220;Make the zero value useful&#8221; &#8212;<a href=\"https:\/\/go-proverbs.github.io\/\">Go Proverbs<\/a><\/p>\n<p>It reminds me of the <a href=\"http:\/\/bengtwendel.com\/your-teacup-is-full-empty-your-cup\/\">Zen teacup parable<\/a>. An empty cup has utility, even before it is filled.<\/p>\n<h2>2. The implications of a string<\/h2>\n<p>One of the most deceptively simple types in modern programming languages is the string. In Go, there is a <a href=\"https:\/\/golang.org\/pkg\/builtin\/#string\">built-in string type<\/a> with short, unsatisfying descriptive text.<\/p>\n<p><a href=\"https:\/\/blog.golang.org\/strings\">Strings, bytes, runes and characters in Go<\/a> explains that strings are a read-only slice of bytes (at runtime). Go source code is UTF-8, so string literals always contain UTF-8 text (except for <a href=\"https:\/\/golang.org\/ref\/spec#String_literals\">byte-level escapes<\/a>.<\/p>\n<p>Strings always cause me to reflect on how memory management works in a language. In my search for basic answers about how and when memory happens in string operations, I read about <a href=\"https:\/\/segment.com\/blog\/allocation-efficiency-in-high-performance-go-services\/\">allocation efficiency in high-performance Go services<\/a> which includes a nice explanation of heap vs stack memory allocation in Go.<\/p>\n<h2>Reflections<\/h2>\n<p>At this point, I don&#8217;t know what I need to know about this new programming language. I just like to know what the code I&#8217;m typing actually does. Learning syntax is boring, so I need to occupy my mind with something more interesting while I practice typing unfamiliar sequences of text. To write good code, I need to know so much more than the syntax, but I need to be careful not get get too attached to certain details. For example, future compiler versions change the patterns of how code is transformed into machine operations. However, if I attach just a little deeper meaning to these syntax constructs and get a feel for what my code ends up doing under-the-hood, I can more quickly understand the implications of the code I write.<\/p>\n<p>When I emerge from these learning meditations and I can finally construct this new syntax without thinking and start to solve actual problems that matter to humans, then I will have created these little trails in my mind that lead to empty spaces, which have shape and meaning, like the Go zero value and the Zen teacup.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>In learning a new programming language, it&#8217;s helpful to understand it&#8217;s philosophy. I seek to learn patterns that are idiomatic, and more importantly: why the syntax is the way it is. This allows me to write original code more quickly, gaining an intuition for simple things like when to look for a library and when&hellip; <a href=\"https:\/\/www.ultrasaurus.com\/2019\/01\/golang-philosophy\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a><\/p>\n","protected":false},"author":84,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[1],"tags":[],"_links":{"self":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/6719"}],"collection":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/users\/84"}],"replies":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/comments?post=6719"}],"version-history":[{"count":9,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/6719\/revisions"}],"predecessor-version":[{"id":6728,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/6719\/revisions\/6728"}],"wp:attachment":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/media?parent=6719"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/categories?post=6719"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/tags?post=6719"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}