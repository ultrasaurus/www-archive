{"id":5797,"date":"2016-01-02T23:46:40","date_gmt":"2016-01-03T07:46:40","guid":{"rendered":"https:\/\/www.ultrasaurus.com\/?p=5797"},"modified":"2016-01-03T06:47:39","modified_gmt":"2016-01-03T14:47:39","slug":"xcode-playground-for-parse-in-swift","status":"publish","type":"post","link":"https:\/\/www.ultrasaurus.com\/2016\/01\/xcode-playground-for-parse-in-swift\/","title":{"rendered":"xcode playground for parse in swift"},"content":{"rendered":"<p>Xcode playgrounds are a delightful way to explore the Swift language &#8212; once you get them set up.  I admit that I&#8217;ve grown to love environments where I can code with simple text files, however, I also love to develop iOS apps and so I find myself digging once again thru the byzantine Xcode GUI. It seems I always forget the magic incantations!<\/p>\n<p>Here are the notes for my future self and other intrepid explorers:<\/p>\n<p>Experimenting with <a href=\"https:\/\/www.parse.com\/\">Parse.com<\/a> in Swift 2, Xcode 7.2, OSX 10.10.5 (Yosemite)<\/p>\n<p>note: cocoapods 0.39.0 has issue with Ruby 2.3 (https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/4345) \u2014 likely fixed in the 1.0 beta, but I stuck with older ruby and released cocoapod for this exercise.<\/p>\n<p><code>rvm use ruby-2.2.4<br \/>\ngem install cocoapods<br \/>\n<\/code><\/p>\n<p>Make a new Xcode project, and add a new Empty file to your project called Podfile  (New &gt; File\u2026 &gt; Other &gt; Empty), with the following contents:<\/p>\n<p><code>platform :ios, '8.1'<br \/>\nxcodeproj 'ParsePlayground'<br \/>\n&nbsp;<br \/>\nuse_frameworks!<br \/>\ntarget :ParsePlayground, :exclusive =&gt; true do<br \/>\n&nbsp;&nbsp;pod 'Parse'<br \/>\nend<br \/>\n<\/code><\/p>\n<p>back on the command-line:<\/p>\n<p><code>pod install<\/code><\/p>\n<p>This creates a new Xcode workspace, so we need to close the project in Xcode, then re-open Xcode with the file named something ending in .xcworkspace.<\/p>\n<p>This new workspace should have both the original project and a new one called Pods.  Now we can create the Playground, by selecting the menu: File &gt; New &gt; Playground\u2026  Then we save it in the root of our project directory, then add it to the project with the menu:  File &gt; Add Files To \u201cParsePlayground\u201d<\/p>\n<p>Now this code should compile:<\/p>\n<p><code>import Parse<br \/>\nimport XCPlayground<br \/>\nXCPlaygroundPage.currentPage.needsIndefiniteExecution = true<br \/>\n<\/code><\/p>\n<p>We want to set needsIndefiniteExecution so that the async commands will work.<\/p>\n<p>I made a new Parse app to experiment, then in the parse docs, in the <a href=\"https:\/\/parse.com\/apps\/quickstart#parse_data\/mobile\/ios\/swift\/new\">QuickStart Guide<\/a>, they set up some sample code already customized with the app ID and client key, it should be something like:<\/p>\n<p><code>Parse.setApplicationId(\"abunchofnumbersandletters\",<br \/>\n      clientKey: \"morelettersandnumbers\")<br \/>\n<\/code><\/p>\n<p>Then we can start coding!  I made an item class in Parse with a string property &#8220;info.&#8221;  Here some code that worked for me:<\/p>\n<p><code>let testObject = PFObject(className: \"TestObject\")<br \/>\n&nbsp;<br \/>\ntestObject[\"foo\"] = \"bar\"<br \/>\ntestObject.saveInBackgroundWithBlock { (success: Bool, error: NSError?) -&gt; Void in<br \/>\n  print(\"Object has been saved: &#40;success)\")<br \/>\n}<br \/>\n&nbsp;<br \/>\nvar query = PFQuery(className: \"item\")<br \/>\nvar items = try query.findObjects()<br \/>\nprint(\"got some items\")<br \/>\nfor item in items {<br \/>\n  var info = item[\"info\"]<br \/>\n  print(\"   item #&#40;item.objectId!) info:&#40;info)\")<br \/>\n}<br \/>\n&nbsp;<br \/>\nprint(\"not the end... wait for the sync call to finish\")<br \/>\n<\/code><\/p>\n<p>When I run the above code it works fine, but I do get some of the following errors.  Not sure why&#8230;<\/p>\n<p><code>Failed to obtain sandbox extension for path=\/var\/folders\/hz\/vnvkxt7x4236fp6nqt5zy2wr0000gn\/T\/com.apple.dt.Xcode.pg\/containers\/com.apple.dt.playground.stub.iOS_Simulator.experiment-3C8D4B75-8EA0-4BE8-8467-1B06C9B1F881\/Library\/Caches<\/code><\/p>\n<p>I&#8217;ve posted the full <a href=\"https:\/\/github.com\/ultrasaurus\/ParsePlayground\">ParsePlayground project <\/a>on Github with some notes on how to set up the Parse app if you want to jump right in!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Xcode playgrounds are a delightful way to explore the Swift language &#8212; once you get them set up. I admit that I&#8217;ve grown to love environments where I can code with simple text files, however, I also love to develop iOS apps and so I find myself digging once again thru the byzantine Xcode GUI.&hellip; <a href=\"https:\/\/www.ultrasaurus.com\/2016\/01\/xcode-playground-for-parse-in-swift\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a><\/p>\n","protected":false},"author":84,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[2],"tags":[],"_links":{"self":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/5797"}],"collection":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/users\/84"}],"replies":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/comments?post=5797"}],"version-history":[{"count":0,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/5797\/revisions"}],"wp:attachment":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/media?parent=5797"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/categories?post=5797"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/tags?post=5797"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}