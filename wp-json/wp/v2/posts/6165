{"id":6165,"date":"2017-02-19T20:12:35","date_gmt":"2017-02-20T04:12:35","guid":{"rendered":"https:\/\/www.ultrasaurus.com\/?p=6165"},"modified":"2018-07-05T20:49:36","modified_gmt":"2018-07-06T03:49:36","slug":"the-vision-thing","status":"publish","type":"post","link":"https:\/\/www.ultrasaurus.com\/2017\/02\/the-vision-thing\/","title":{"rendered":"the vision thing"},"content":{"rendered":"<p>Someone recently observed that I was motivated by a big vision and that some engineers are not, and that\u2019s ok. In my experience, it\u2019s not okay.  I wish it was. It\u2019s fun to sink into the code and get into the zone and not worry about the complicated real world. However, it\u2019s not fun to work hard and create something over months or years and have it fail in the marketplace or, worse, never ship at all.  I\u2019m not talking about research projects where the primary outcome is learning something or publishing a paper.  I\u2019m talking about the kind of software I work on, which is intended to be used by other humans, whether they be developers or regular folks.<\/p>\n<p>There are a few common problems I\u2019ve seen happen when a team writes software without a clear and focused vision.<\/p>\n<ol>\n<li><strong>Lots of bugs are discovered late.<\/strong> When engineers are focused on their own specific component or library, it often happens that another engineer will use that library in a slightly different way than was intended.  This is especially true for internal libraries where there is little need for documentation since we can see each other\u2019s source code; however, we don\u2019t typically review all off the code our systems depend on.  So each part of the code does what it is supposed to do on its own, but when we put them all together, slight miscommunications add up to things not working quite right, typically discovered late in the development cycle.  <\/li>\n<li><strong>The system doesn\u2019t work well.<\/strong> When you are building software as a team, engineers work on different parts of the software.  If one engineer is making a gaming engine, and another engineer is making presentation software, it rarely comes together to work well at the end.  The gaming engine needs a high framerate and quick response to user input. The marketing presentation software need to display text at large font sizes.  It\u2019s likely one or the other will suffer, or more typically the software won\u2019t actually work well for either use case.  <\/li>\n<li><strong>You delivered the features your manager asked for, but the product isn&#8217;t successful.<\/strong> Customers aren\u2019t happy\u2026 or they aren\u2019t buying in the first place. New users and people already using your product have different needs and slightly different use cases. It can be a delicate balance to walk. When developing a &#8220;feature&#8221; it can be easy to miss a step in between what you are working on and something that seems unrelated from the inside, but which people need to use together or in sequence. I call these <em>features in between the features<\/em>, which are very hard for engineers to see if they don&#8217;t have a complete picture of how people will use the product.<\/li>\n<li><strong>Customers are happy and the product is cancelled.<\/strong>  Companies have internal metrics by which they evaluate success.  Someone on the business side has determined if we expect immediate revenue, or if this is going to be a long bet and expect slow revenue growth while we focus on strategic customer adoption, or if we need a large base of free users before we expect significant revenue.  Sometimes it\u2019s a product that supports larger business goals and drives adoption of a different product.  If the engineers don\u2019t know what those goals are, they may not get the important details right to make those goals happen.<\/li>\n<\/ol>\n<p>So, you need to tell engineers the internal metrics, but that&#8217;s not enough. No one writes code that by itself increases 28-day active users. Somewhere in the product plans (or the minds of the executives) is a hypothesis that there are some new or improved use cases that will cause people to  use the app more (or to sign up in the first place). A lot of teams do document use cases or user journeys and share them with the engineers, which is important, but not sufficient.<\/p>\n<p>Engineers need to know the use cases that everyone believes will be required to make the product successful; however, usually software engineers have to make all sorts of decisions outside of the required use cases for the next release. The software will work better if all of these little decisions are aligned somehow, and the easiest way to do this (in fact the only way that I&#8217;ve found to do this), is for the developers to have a shared vision of what this software wants to be \u2014 not just in its next release, but in the future. This vision can be somewhat arbitrary for it to work (which means it is totally fine if it changes), the key point is that it needs to be shared, and when it changes, the change and reasons for the change need to be communicated effectively. A shared vision not only aligns all of the little decisions that developers make independently, but also makes all of the design discussions more efficient. We can focus on how we are building a thing, because we already know what we are building and why.<\/p>\n<p>To create a shared vision, we need to answer: who is the <em>target<\/em> customer? what are the key problems we are solving? what will our customers be able to do with the initial release and what do we hope they will be able to do in the future? Who are the customers who might not be satisfied with our product and that would be ok?<\/p>\n<p>Good engineers will build something that works for a wider audience. Often the software will enable those people to do many more things than the minimum requirements, but focus is key to creating robust software that works well.<\/p>\n<p>I&#8217;ve been talking about engineers, since that&#8217;s my focus these days and because there remains a persistent myth that engineers don&#8217;t need to be distracted with all this business stuff. All of these questions and answers are even more important for designers, technical writers, support, developer relations, support, sales, business development and everyone involved in the making of and communication about the product.<\/p>\n<p>I\u2019m not motivated by a big vision.  I\u2019m motivated by impact \u2014 not potential impact, real impact.  I need to believe that my day to day work is going to add up to something that solves real problems for real people in the real world.  I\u2019ve discovered that to reduce risk in software projects, every member of my team must be able to see a through-line from their day-to-day work to shipping software that causes a large number of humans to be empowered to do something new or better, enabling them to solve real-world problems.  To do that, I need to convey a vision that lets the individual team members innovate, coming up with creative solutions in their domain that add up to a system that actually works.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Someone recently observed that I was motivated by a big vision and that some engineers are not, and that\u2019s ok. In my experience, it\u2019s not okay. I wish it was. It\u2019s fun to sink into the code and get into the zone and not worry about the complicated real world. However, it\u2019s not fun to&hellip; <a href=\"https:\/\/www.ultrasaurus.com\/2017\/02\/the-vision-thing\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a><\/p>\n","protected":false},"author":84,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[3],"tags":[],"_links":{"self":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/6165"}],"collection":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/users\/84"}],"replies":[{"embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/comments?post=6165"}],"version-history":[{"count":5,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/6165\/revisions"}],"predecessor-version":[{"id":6623,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/posts\/6165\/revisions\/6623"}],"wp:attachment":[{"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/media?parent=6165"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/categories?post=6165"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.ultrasaurus.com\/wp-json\/wp\/v2\/tags?post=6165"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}