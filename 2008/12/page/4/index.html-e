<!DOCTYPE html>
<html class="no-js" lang="en-US">
	<head>
				<link rel="profile" href="http://gmpg.org/xfn/11" />
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		
		<title>December &laquo; 2008 &laquo; the evolving ultrasaurus</title>
		
				<meta name='robots' content='max-image-preview:large' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="the evolving ultrasaurus &raquo; Feed" href="/feed/" />
<link rel="alternate" type="application/rss+xml" title="the evolving ultrasaurus &raquo; Comments Feed" href="/comments/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.0.1\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.0.1\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/www.ultrasaurus.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=5.7.1"}};
			!function(e,a,t){var n,r,o,i=a.createElement("canvas"),p=i.getContext&&i.getContext("2d");function s(e,t){var a=String.fromCharCode;p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,e),0,0);e=i.toDataURL();return p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,t),0,0),e===i.toDataURL()}function c(e){var t=a.createElement("script");t.src=e,t.defer=t.type="text/javascript",a.getElementsByTagName("head")[0].appendChild(t)}for(o=Array("flag","emoji"),t.supports={everything:!0,everythingExceptFlag:!0},r=0;r<o.length;r++)t.supports[o[r]]=function(e){if(!p||!p.fillText)return!1;switch(p.textBaseline="top",p.font="600 32px Arial",e){case"flag":return s([127987,65039,8205,9895,65039],[127987,65039,8203,9895,65039])?!1:!s([55356,56826,55356,56819],[55356,56826,8203,55356,56819])&&!s([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]);case"emoji":return!s([55357,56424,8205,55356,57212],[55357,56424,8203,55356,57212])}return!1}(o[r]),t.supports.everything=t.supports.everything&&t.supports[o[r]],"flag"!==o[r]&&(t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&t.supports[o[r]]);t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&!t.supports.flag,t.DOMReady=!1,t.readyCallback=function(){t.DOMReady=!0},t.supports.everything||(n=function(){t.readyCallback()},a.addEventListener?(a.addEventListener("DOMContentLoaded",n,!1),e.addEventListener("load",n,!1)):(e.attachEvent("onload",n),a.attachEvent("onreadystatechange",function(){"complete"===a.readyState&&t.readyCallback()})),(n=t.source||{}).concatemoji?c(n.concatemoji):n.wpemoji&&n.twemoji&&(c(n.twemoji),c(n.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<link rel='stylesheet' id='mailchimpSF_main_css-css'  href='/?mcsf_action=main_css&#038;ver=5.7.1' type='text/css' media='all' />
<!--[if IE]>
<link rel='stylesheet' id='mailchimpSF_ie_css-css'  href='/wp-content/plugins/mailchimp/css/ie.css?ver=5.7.1' type='text/css' media='all' />
<![endif]-->
<link rel='stylesheet' id='wp-block-library-css'  href='/wp-includes/css/dist/block-library/style.min.css?ver=5.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='tw-bootstrap-css'  href='/wp-content/themes/the-bootstrap/css/bootstrap.min.css?ver=2.0.3' type='text/css' media='all' />
<link rel='stylesheet' id='the-bootstrap-css'  href='/wp-content/themes/the-bootstrap/style.min.css?ver=2.0.1' type='text/css' media='all' />
<style id='the-bootstrap-inline-css' type='text/css'>
body > .container{margin-top:68px;}@media(min-width: 980px){body > .container{margin-top:58px;}}
</style>
<script type='text/javascript' src='/wp-includes/js/jquery/jquery.min.js?ver=3.5.1' id='jquery-core-js'></script>
<script type='text/javascript' src='/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.3.2' id='jquery-migrate-js'></script>
<script type='text/javascript' src='/wp-content/plugins/google-analyticator/external-tracking.min.js?ver=6.5.4' id='ga-external-tracking-js'></script>
<link rel="https://api.w.org/" href="/wp-json/" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 5.7.1" />
<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>	<style type="text/css">
				#branding hgroup {
			position: absolute !important;
			clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
			clip: rect(1px, 1px, 1px, 1px);
		}
			</style>
		<!--[if lt IE 9]>
		<script src="/wp-content/themes/the-bootstrap/js/html5shiv.min.js" type="text/javascript"></script>
		<script src="/wp-content/themes/the-bootstrap/js/respond.min.js" type="text/javascript"></script>
	<![endif]-->
	<!-- Google Analytics Tracking by Google Analyticator 6.5.4: http://www.videousermanuals.com/google-analyticator/ -->
<script type="text/javascript">
    var analyticsFileTypes = [''];
    var analyticsSnippet = 'enabled';
    var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
  
	_gaq.push(['_setAccount', 'UA-4313619-1']);
    _gaq.push(['_addDevId', 'i9k95']); // Google Analyticator App ID with Google
    _gaq.push(['_gat._anonymizeIp']);
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
		<style type="text/css" id="wp-custom-css">
			code {
	color: #70a
}

p {
	color: #333
}

blockquote p {
	font-size: 14px;
	font-weight: normal;
	padding-top: 6px;
	padding-bottom: 6px;
	padding-left: 10px;
	padding-right: 60px;
	line-height: 1.2;
}		</style>
			</head>
	
	<body class="archive date paged paged-4 date-paged-4 content-sidebar">
		<div class="container">
			<div id="page" class="hfeed row">
								<header id="branding" role="banner" class="span12">
										<hgroup>
						<h1 id="site-title">
							<a href="/" title="the evolving ultrasaurus" rel="home">
								<span>the evolving ultrasaurus</span>
							</a>
						</h1>
						<h2 id="site-description">Sarah Allen&#039;s reflections on internet software and other topics</h2>
					</hgroup>
					
					
					<nav id="access" role="navigation">
						<h3 class="assistive-text">Main menu</h3>
						<div class="skip-link"><a class="assistive-text" href="#content" title="Skip to primary content">Skip to primary content</a></div>
						<div class="skip-link"><a class="assistive-text" href="#secondary" title="Skip to secondary content">Skip to secondary content</a></div>
												<div class="navbar navbar-fixed-top navbar-inverse">
							<div class="navbar-inner">
								<div class="container">
									<!-- .btn-navbar is used as the toggle for collapsed navbar content -->
									<a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
										<span class="icon-bar"></span>
										<span class="icon-bar"></span>
										<span class="icon-bar"></span>
									</a>
																		<span class="brand">the evolving ultrasaurus</span>
																		<div class="nav-collapse">
										<div class="menu-primary-container"><ul id="menu-primary" class="nav"><li id="menu-item-4272" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4272"><a href="/about/">About</a></li>
<li id="menu-item-6605" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6605"><a href="/speaking/">Speaking</a></li>
<li id="menu-item-6366" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-6366"><a href="/code/">Code</a></li>
<li id="menu-item-4269" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4269"><a href="/archives/">Archives</a></li>
<li id="menu-item-4759" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4759"><a href="/contact/">Contact</a></li>
<li id="menu-item-4697" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4697"><a href="/ultrasaurus/">What is an ultrasaurus?</a></li>
</ul></div>	<form id="searchform" class="navbar-search pull-right" method="get" action="/">
						<label for="s" class="assistive-text hidden">Search</label>
						<input type="search" class="search-query" name="s" id="s" placeholder="Search" />
					</form>								    </div>
								</div>
							</div>
						</div>
											</nav><!-- #access -->
									</header><!-- #branding -->
<section id="primary" class="span8">

		<div id="content" role="main">
		
			<header class="page-header">
				<h1 class="page-title">
					Monthly Archives: <span>December 2008</span>				</h1>
			</header><!-- .page-header -->

			<article id="post-598" class="post-598 post type-post status-publish format-standard hentry category-code">
		
	<header class="page-header">
	<h1 class="entry-title"><a href="/2008/12/getting-started-with-rails-2-day-2/" title="Permalink to getting started with rails 2 &#8211; day 2" rel="bookmark">getting started with rails 2 &#8211; day 2</a></h1>		<div class="entry-meta">
			<span class="sep">Posted on </span><a href="/2008/12/getting-started-with-rails-2-day-2/" title="11:22 am" rel="bookmark"><time class="entry-date" datetime="2008-12-14T11:22:46-08:00" pubdate>December 14, 2008</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="/author/sarah/" title="View all posts by sarah" rel="author">sarah</a></span></span>		<span class="sep"> | </span>
		<span class="comments-link">
			<a href="/2008/12/getting-started-with-rails-2-day-2/#comments"><strong>1</strong> Reply</a>		</span>
				</div><!-- .entry-meta -->
			</header><!-- .entry-header -->

		<div class="entry-content clearfix">
		<p>In <a href="/code/2008/12/getting-started-with-rails.html">Day 1</a> with Rails, we built a simple application that let us manage a list of categories using the powerful generate scaffold script.  Today, we&#8217;ll look under the hood and learn about the code that was created for us, so that we can modify the application to do just what we want (or, rather, what the tutorial <a href="http://rails.homelinux.org/">Four Days on Rails</a> tutorial did, as I continue to update that tutorial for Rails 2.)</p>
<p>You&#8217;ll get the most out of Day 2, if you already know Ruby or you first read chapters 0-3 of the <a href="/code/2008/12/great-ruby-book.html">humble little Ruby book</a> or some other introduction to the language.  Or, of course, you can just wing it.</p>
<p>You also should know about the MVC (Model View Controller) design pattern.  Although if you don&#8217;t know MVC already, you&#8217;ll get the hang of it soon, at least from the Rails perspective.  The Getting Started Guide has a <a href="http://guides.rubyonrails.org/getting_started_with_rails.html#_the_mvc_architecture">nice intro</a> to MVC and elaborates on how Rails applies this venerated pattern:</p>
<blockquote>
<p>2.1.1. <strong>Models</strong>  A model represents the information (data) of the application and the rules to manipulate that data. In the case of Rails, models are primarily used for managing the rules of interaction with a corresponding database table. In most cases, one table in your database will correspond to one model in your application. The bulk of your application&#8217;s business logic will be concentrated in the models.</p>
<p>2.1.2. <strong>Views</strong> Views represent the user interface of your application. In Rails, views are often HTML files with embedded Ruby code that performs tasks related solely to the presentation of the data. Views handle the job of providing data to the web browser or other tool that is used to make requests from your application.</p>
<p>2.1.3. <strong>Controllers</strong> Controllers provide the &#8220;glue&#8221; between models and views. In Rails, controllers are responsible for processing the incoming requests from the web browser, interrogating the models for data, and passing that data on to the views for presentation.</p>
</blockquote>
<p>In today&#8217;s tutorial, we will learn about:</p>
<ol>
<li><a href="#model">The Model</a>
<ul>
<li><a href="#validation">Validation</a></li>
</ul>
</li>
<li><a href="#controller">The Controller</a></li>
<li><a href="#views">Views</a>
<ul>
<li><a href="#layout">Layout</a></li>
<li> <a href="#templates">Templates</a></li>
</ul>
</li>
<li><a href="#edit">Tailoring the Generated Scaffold Code</a>
<ul>
<li><a href="#edit-controller">Modifying the Controller</a></li>
<li> <a href="#vars">Sharing Variables</a></li>
<li> <a href="#partial">Partial Templates</a></li>
</ul>
</li>
<li><a href="#review">Review what we learned</a></li>
</ol>
<p>h1 {font-size: 150%}<br />
h1,h2 {font-style: bold}<br />
img<br />
{<br />
border:2px solid silver;<br />
margin:0px 0px 15px 20px;<br />
}<br />
blockquote, pre.code {<br />
border: solid 1px #aaa;<br />
padding: 6px;<br />
background-color: #eee;<br />
color: inherit;<br />
overflow:auto;<br />
margin: 10px 0px;<br />
}</p>
<p>&nbsp;</p>
<hr />
<p>&nbsp;</p>
<p>h1 {font-size: 150%}<br />
h1,h2 {font-style: bold}<br />
img<br />
{<br />
border:2px solid silver;<br />
margin:0px 0px 15px 20px;<br />
}</p>
<p><a name="model"></p>
<h1>The Model</h1>
<p></a></p>
<p>The definition of the model is in one of the files generated by scaffold:</p>
<pre><strong>app/models/category.rb</strong></pre>
<blockquote>
<pre>
class Category &lt; ActiveRecord::Base
end
</pre>
</blockquote>
<p>This is a Ruby file that declare a class named Category that inherits from class ActiveRecord::Base. To define a class in Ruby, you place the class keyword at the beginning of a line, followed by the class name and a &lt; and the class it inherits from.</p>
<p>Active Record is one of the &#8220;gems&#8221; installed with Rails. Looking in the <a href="http://api.rubyonrails.org/">Ruby on Rails api documentation</a> for ActiveRecord::Base in the Classes section shows all of the methods, attributes, exceptions and other parts available in class ActiveRecord::Base.</p>
<p>An instance of the class Category could be called anything but the Rails convention is to use a variable named category or @category. The :: symbol is the Ruby scope operator. In ActiveRecord::Base it means that you are referring to the Base of ActiveRecord and not some other base.  </p>
<p>note: I&#8217;ve adapted this nice explanation from <a href="http://fairleads.blogspot.com/2007/12/rails-20-and-scaffolding-step-by-step.html">Fairleads</a> along with language note from the <a href="/code/2008/12/great-ruby-book.html">humble little ruby book</a>)</p>
<p>We will customize our Model by adding code here.</p>
<p><a name="validation"></p>
<h2>Validation</h2>
<p></a></p>
<p>Let&#8217;s say we want to make it so that each category appears once and only once in the category list.  If you try that now, you&#8217;ll notice that the application allows a duplicate entry.  Go ahead and delete the duplicate. We&#8217;ll make sure it isn&#8217;t allowed in the future, by adding validation to the model.  </p>
<p>Rails gives you a lot of error handling for free (almost). To demonstrate this, add some validation rules to the  empty category model: </p>
<p><strong></p>
<pre>app/models/category.rb</pre>
<p></strong></p>
<blockquote>
<pre>
class Category  1..20
validates_uniqueness_of :title, :message =&gt; "already exists"
end
</pre>
</blockquote>
<p>These entries will give automatic checking that: </p>
<ul>
<li><strong>validates_length_of</strong>: the field is not blank and not too long </li>
<li><strong>validates_uniqueness_of</strong>: duplicate values are trapped. I don&#8217;t like the default Rails error message &#8211; &#8216;xxx has already been taken&#8217; &#8211; so I provide my own. Note: This is a general feature of Rails &#8211; try the defaults first; if you don&#8217;t like anything, overwrite it. </li>
</ul>
<p>Documentation: <a href="http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html">ActiveRecord::Validations::ClassMethods</a></p>
<p>To try this out, now try to insert a duplicate record. This time, Rails will you prevent you from creating a duplicate record (see below). The style is a bit in your face &#8212; it&#8217;s not the most subtle of user interfaces. However, what do you expect for free? </p>
<p><img src="http://farm4.static.flickr.com/3115/3105384025_b9c12b7cc5.jpg?v=0" /></p>
<p><a name="controller"></p>
<h1>The Controller</h1>
<p></a></p>
<p>Let&#8217;s look at the code behind the controller. The controller is where the programming logic for the application<br />
lies. It interacts with the user using views, and with the database through models. You should be able to read the<br />
controller and see how the application hangs together. </p>
<p>Some methods of the controller along with the class definition produced by the scaffold script are listed below: </p>
<p><strong>app/controllers/categories_controller.rb</strong></p>
<blockquote>
<pre>
class CategoriesController  @categories }
   end
end

# GET /categories/1
# GET /categories/1.xml
def show
   @category = Category.find(params[:id])

   respond_to do |format|
      format.html # show.html.erb
      format.xml  { render :xml =&gt; @category }
   end
end
:
:
# DELETE /categories/1
# DELETE /categories/1.xml
def destroy
   @category = Category.find(params[:id])
   @category.destroy

   respond_to do |format|
      format.html { redirect_to(categories_url) }
      format.xml  { head :ok }
   end
end
end
</pre>
</blockquote>
<p>Note that just like the model, the controller is simply a ruby class file.  Each method in the class defines an action.  Actions, by default, render a template in the app/views directory corresponding to the name of the controller and action after executing code in the action.  For example, the index action in our Categories controller renders a list of categories; however, note that unlike index, the destroy action will not render a template. After performing its main purpose (calling destroy on the category object that the user selected), it initiates a redirect instead.</p>
<p>Note: there is quite a bit of Ruby magic going on in the generated controller file with exactly how the respond_to block works.  Perhaps I&#8217;ll dive into that once I&#8217;ve got the basics down.</p>
<p><a name="views"></p>
<h1>Views</h1>
<p></a></p>
<p>Views are where the user interface is defined. Rails can render the final HTML page presented to the user from three components: </p>
<ul>
<li><strong>Layout</strong>. A layout provides common code used by all actions, typically the start and end of the HTML sent to the<br />
browser.</li>
<li><strong>Template</strong> A Template provides code specific to an action, e.g. &#8216;List&#8217; code, &#8216;Edit&#8217; code, etc.</li>
<li><strong>Partial</strong>  A Partial provides common code which can be used in used in multiple actions.</li>
</ul>
<p>If you look at the view files generated by the scaffold command, you will see that they are .erb files.  I&#8217;m not sure what &#8216;erb&#8217; stands for, but they <a href="http://ryandaigle.com/articles/2007/2/21/what-s-new-in-edge-rails-rhtml-and-rxml-to-die-a-slow-and-painful-death">have replaced .rhtml files</a> in previous versions of Rails.  These files are a mix of html markup with snippets of ruby code in them. </p>
<ul>
<li>app/views/
<ul>
<li>categories/
<ul>
<li>index.html.erb</li>
<li>show.html.erb</li>
<li>new.html.erb</li>
<li>edit.html.erb</li>
</ul>
</li>
<li>layouts/</li>
<ul>
<li>categories.html.erb</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><a name="layout"></p>
<h2>Layout</h2>
<p></a></p>
<p>Rails Naming conventions: if there is a template in appviewslayouts with the same name as the current controller then it will be automatically set as that controller&#8217;s layout unless explicitly told otherwise.</p>
<p><code><br />
<strong>apps/layouts/categories.html.erb</strong></p>
<blockquote>
<pre>
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;
&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;<br />
<br />
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot; lang=&quot;en&quot;&gt;<br />
&lt;head&gt;<br />
&nbsp;&nbsp;&nbsp;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=UTF-8&quot; /&gt;<br />
&nbsp;&nbsp;&nbsp;&lt;title&gt;Categories: &lt;%= controller<strong>.action_name</strong> %&gt;&lt;/title&gt;<br />
&nbsp;&nbsp;&nbsp;&lt;%= <strong>stylesheet_link_tag</strong> 'scaffold' %&gt;<br />
&lt;/head&gt;<br />
&lt;body&gt;<br />
<br />
&lt;p style=&quot;color: green&quot;&gt;&lt;%= <strong>flash</strong>[:notice] %&gt;&lt;/p&gt;<br />
<br />
&lt;%= <strong>yield</strong>  %&gt;<br />
<br />
&lt;/body&gt;<br />
&lt;/html&gt;<br />
</pre>
</blockquote>
<p></code></p>
<p>This is mostly HTML, plus a few bits of Ruby code embedded within <code></code> tags. This layout will be called by<br />
the rendering process regardless of the action being run. It contains the standard HTML tags &#8211; the<br />
<code>&lt;html&gt;&lt;head&gt;...&lt;/head&gt;&lt;body&gt;...&lt;/body&gt;&lt;/html&gt;</code> that will appear on every page.</p>
<p>The Ruby bits in bold are translated into HTML during the Rails rendering process as follows:</p>
<ul>
<li><strong>action_name</strong> is an ActionController method which returns the name of the action the controller is processing (e.g. &#8216;Edit&#8217;) &#8211; this puts an appropriate title on the page, depending on the action being run.<br />Documentation: ActionController::Base</li>
<li><strong>stylesheet_link_tag</strong> is a Rails helper &#8211; a lazy way of generating code. There are a lot of these &#8216;helpers&#8217; within Rails. This one simply generates the following HTML: <code>&lt;link href=&quot;/stylesheets/scaffold.css&quot; media=&quot;screen&quot; rel=&quot;Stylesheet&quot; type=&quot;text/css&quot; /&gt;</code><br />Documentation: ActionView::Helpers::AssetTagHelper</li>
<li><strong>flash</strong> Rails provides a technique for passing &#8216;flash&#8217; messages back to the user &#8211; e.g. an &#8216;Update Successful&#8217; message which displays on the next screen and then disappears. These can be picked up easily when included in the layout (adding it to the Layout means it will appear on any screen).  (The flash message will, of course, only appear when the previous screen sends such a message.<br />Documentation: ActionController::Flash</li>
<li><strong>yield</strong> is the key to what happens next. It allows a single standard layout to have dynamic content inserted at rendering time based on the action being performed (e.g. &#8216;edit&#8217;, &#8216;new&#8217;, &#8216;list&#8217;). In Ruby the yield command will execute a block of code that is passed as an argument.  In this case, the code will insert dynamic content from a Template with the same name &#8211; see below.<br />
Documentation:  see Ruby language docs. </li>
</ul>
<p><a name="templates"></p>
<h2>Templates</h2>
<p></a></p>
<p>Rails naming convention: templates are held in appviews&#8217;controller&#8221;action&#8217;.erb.html. The basic list action is perhaps easiest to understand.  This is the default action for the controller and is therefore the &#8216;index&#8217; template</p>
<p><code><br />
<strong>app/views/categories/index.erb.html</strong></p>
<blockquote><p>
&lt;h1&gt;Listing categories&lt;/h1&gt;</p>
<p>&lt;table&gt;<br />
<br />&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;Title&lt;/th&gt;<br />
<br />&nbsp;&nbsp;&nbsp;&lt;/tr&gt;</p>
<p>&lt;% <strong>for category in @categories</strong> %&gt;<br />
<br />&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;%=<strong>h category.title</strong> %&gt;&lt;/td&gt;<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;%= <strong>link_to</strong> 'Show', category %&gt;&lt;/td&gt;<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;%= <strong>link_to</strong> 'Edit', edit_category_path(category) %&gt;&lt;/td&gt;<br />
<br />&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;%= <strong>link_to</strong> 'Destroy', category, :<strong>confirm</strong> =&gt; 'Are you sure?', :method =&gt; :delete %&gt;&lt;/td&gt;<br />
<br />  &lt;/tr&gt;<br />
<br />&lt;% <strong>end</strong> %&gt;<br />
<br />&lt;/table&gt;</p>
<p>&lt;br /&gt;</p>
<p>&lt;%= <strong>link_to</strong> 'New category', new_category_path %&gt;
</p></blockquote>
<p></code></p>
<p>Below are some notes about the more interesting bits of code highlighted (bold) above</p>
<ul>
<li><strong>for &#8230; in &#8230; end</strong> This is some simple Ruby code to loop through the items in the array @categories.  The enclosed table rows are rendered for each category in the list.</li>
<li><strong>h</strong> automatically &#8216;escapes&#8217; HTML code. One of the problems with allowing users to input data which is then displayed on the screen is that they could accidentally (or maliciously) type in code which could break the system when it was displayed. For example, think what would happen if a user typed in <code>&lt;/table&gt;</code> as a Category. To guard against this, it is good practice to &#8216;HTML escape&#8217; any data which has been provided by users. This means that e.g. <code>&lt;/table&gt;</code> is rendered as &amp;lt;/table&amp;gt; which is harmless. Rails makes this really simple &#8211; just add an &#8216;h&#8217; as shown</li>
<li><strong>confirm</strong> is a useful optional parameter for the link_to helper &#8212; it generates a Javascript pop-up box which forces the user to confirm the Destroy before actioning the link.</li>
<li><strong>link_to</strong> simply creates a link &#8212; the most fundamental part of HTML&#8230; &lt;a href=&quot;/categories/2&quot;&gt;Show&lt;/a&gt; <br /> Documentation: ActionView::Helpers::UrlHelper</li>
</ul>
<p>The &#8216;new&#8217; action template created by the scaffold script is given below:</p>
<p><code><strong>app/views/categories/new.erb.html</strong></p>
<blockquote><p>
&lt;h1&gt;New&nbsp;category&lt;/h1&gt;</p>
<p>&lt;%&nbsp;<strong>form_for</strong>(@category)&nbsp;<strong>do</strong>&nbsp;|f|&nbsp;%&gt;<br />
<br />&nbsp;&nbsp;&lt;%=&nbsp;<strong>f.error_messages</strong>&nbsp;%&gt;</p>
<p>&nbsp;&nbsp;&lt;p&gt;<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;%=&nbsp;<strong>f.label</strong>&nbsp;:title&nbsp;%&gt;&lt;br&nbsp;/&gt;<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;%=&nbsp;<strong>f.text_field</strong>&nbsp;:title&nbsp;%&gt;<br />
<br />&nbsp;&nbsp;&lt;/p&gt;<br />
<br />&nbsp;&nbsp;&lt;p&gt;<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;%=&nbsp;<strong>f.submit</strong>&nbsp;&quot;Create&quot;&nbsp;%&gt;<br />
<br />&nbsp;&nbsp;&lt;/p&gt;<br />
<br />&lt;%&nbsp;end&nbsp;%&gt;</p>
<p>&lt;%=&nbsp;link_to&nbsp;'Back',&nbsp;categories_path&nbsp;%&gt;
</p></blockquote>
<p><code></p>
<p><strong>form_for</strong> is part of the Rails FormHelper class.  The 'new' form is defined with the block of Ruby code between do and end. Form helpers are designed to make working with models much easier compared to using just standard HTML elements by providing a set of methods for creating forms based on your models. This helper generates the HTML for forms, providing a method for each sort of input (e.g., text, password, select, and so on). When the form is submitted, the form inputs will be bundled into the params object and passed back to the controller. The form that is generated can be seen here: </p>
<p><code></p>
<blockquote><p>
&lt;form&nbsp;action=&quot;/categories&quot;&nbsp;class=&quot;new_category&quot;&nbsp;id=&quot;new_category&quot;&nbsp;method=&quot;post&quot;&gt;&lt;div&nbsp;style=&quot;margin:0;padding:0&quot;&gt;<br />
<br />&nbsp;&lt;p&gt;<br />
<br />&nbsp;&lt;label&nbsp;for=&quot;category_title&quot;&gt;Title&lt;/label&gt;&lt;br&nbsp;/&gt;<br />
<br />&nbsp;&lt;input&nbsp;id=&quot;category_title&quot;&nbsp;name=&quot;category[title]&quot;&nbsp;size=&quot;30&quot;&nbsp;type=&quot;text&quot;&nbsp;/&gt;<br />
<br />&nbsp;&lt;/p&gt;<br />
<br />&nbsp;&lt;p&gt;<br />
<br />&nbsp;&lt;input&nbsp;id=&quot;category_submit&quot;&nbsp;name=&quot;commit&quot;&nbsp;type=&quot;submit&quot;&nbsp;value=&quot;Create&quot;&nbsp;/&gt;<br />
<br />&nbsp;&lt;/p&gt;<br />
<br />&lt;/form&gt;
</p></blockquote>
<p></code></p>
<p>Documentation: ActionView::Helpers::FormHelper</p>
<p><a name="edit"></p>
<h1>Tailoring the Generated Scaffold Code</h1>
<p></a></p>
<p>The code generated by the Scaffold script is perfectly usable 'out of the box', and is robust once you have added enough validation into your data model. However, if that's all there was to developing Rails applications, then all the Rails apps would be boring.  Now that we understand a little bit of what's going on, we can start to tailor the application to do exactly what we want.</p>
<p><a name="edit-controller"></p>
<h2>Modifying the Controller</h2>
<p></a></p>
<p>In a list view, as we can see on the mail page, I would expect the records to be displayed in alphabetical order. This requires a minor change to<br />
the controller:</p>
<p><code><strong>appcontrollerscategories_controller.rb (excerpt)</strong></p>
<blockquote><p>
#&nbsp;GET&nbsp;/categories<br />
<br />&nbsp;&nbsp;#&nbsp;GET&nbsp;/categories.xml<br />
<br />&nbsp;&nbsp;def&nbsp;index<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;@categories&nbsp;=&nbsp;Category.find(:all,&nbsp;<strong>:order=&gt;'title'</strong>)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;respond_to&nbsp;do&nbsp;|format|<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;format.html&nbsp;#&nbsp;index.html.erb<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;format.xml&nbsp;&nbsp;{&nbsp;render&nbsp;:xml&nbsp;=&gt;&nbsp;@categories&nbsp;}<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;end<br />
<br />&nbsp;&nbsp;end
</p></blockquote>
<p></code></p>
<p>Remember that Category is an ActiveRecord, so you can look up the find method on ActiveRecord::Base and see all the nifty options.</p>
<p>Documentation: ActiveRecord::Base.find</p>
<p>In this application, the show screen is unnecessary - all the fields fit comfortably on a single row on the screen.<br />
So, def show can disappear, and let's go straight back to the list screen (categories index) after an 'Edit':</p>
<p><code><br />
<strong>(excerpt)</strong></p>
<blockquote><p>
(excerpt)<br />
<br />&nbsp;#&nbsp;POST&nbsp;/categories<br />
<br />&nbsp;&nbsp;#&nbsp;POST&nbsp;/categories.xml<br />
<br />&nbsp;&nbsp;def&nbsp;create<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;@category&nbsp;=&nbsp;Category.new(params[:category])</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;respond_to&nbsp;do&nbsp;|format|<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;@category.save<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flash[:notice]&nbsp;=&nbsp;'Category&nbsp;was&nbsp;successfully&nbsp;created.'<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;format.html&nbsp;{&nbsp;<strong>redirect_to&nbsp;:action&nbsp;=&gt;&nbsp;&quot;index&quot;</strong>&nbsp;&nbsp;}<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;format.xml&nbsp;&nbsp;{&nbsp;render&nbsp;:xml&nbsp;=&gt;&nbsp;@category,&nbsp;:status&nbsp;=&gt;&nbsp;:created,&nbsp;:location&nbsp;=&gt;&nbsp;@category&nbsp;}<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;format.html&nbsp;{&nbsp;render&nbsp;:action&nbsp;=&gt;&nbsp;&quot;new&quot;&nbsp;}<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;format.xml&nbsp;&nbsp;{&nbsp;render&nbsp;:xml&nbsp;=&gt;&nbsp;@category.errors,&nbsp;:status&nbsp;=&gt;&nbsp;:unprocessable_entity&nbsp;}<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;end<br />
<br />&nbsp;&nbsp;end</p>
<p>&nbsp;&nbsp;#&nbsp;PUT&nbsp;/categories/1<br />
<br />&nbsp;&nbsp;#&nbsp;PUT&nbsp;/categories/1.xml<br />
<br />&nbsp;&nbsp;def&nbsp;update<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;@category&nbsp;=&nbsp;Category.find(params[:id])</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;respond_to&nbsp;do&nbsp;|format|<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;@category.update_attributes(params[:category])<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>flash[:notice]</strong>&nbsp;=&nbsp;'Category&nbsp;was&nbsp;successfully&nbsp;updated.'<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;format.html&nbsp;{&nbsp;<strong>redirect_to&nbsp;:action&nbsp;=&gt;&nbsp;&quot;index&quot;</strong>&nbsp;}<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;format.xml&nbsp;&nbsp;{&nbsp;head&nbsp;:ok&nbsp;}<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;format.html&nbsp;{&nbsp;render&nbsp;:action&nbsp;=&gt;&nbsp;&quot;edit&quot;&nbsp;}<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;format.xml&nbsp;&nbsp;{&nbsp;render&nbsp;:xml&nbsp;=&gt;&nbsp;@category.errors,&nbsp;:status&nbsp;=&gt;&nbsp;:unprocessable_entity&nbsp;}<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;end<br />
<br />&nbsp;&nbsp;end
</p></blockquote>
<p>The flash message will be picked up and displayed on the next screen to be displayed - in this case, the list screen.</p>
<p><a name="vars"></p>
<h2>Sharing Variables between the Template and Layout</h2>
<p></a></p>
<p>Below you can see that I've moved the &lt;h1&gt;...&lt;/h1&gt; heading text out of the Template into the Layout so that we can keep the formatting consitent across pages. As each template will have a different heading, I need to set the value of the variable @heading in the Template. Rails is quite ok with this - Template variables are available to Layouts at rendering<br />
time.</p>
<p><code><br />
appviewslayoutscategories.html.erb (exceprt)</p>
<blockquote><p>
&lt;head&gt;<br />
<br />&nbsp;&nbsp;&lt;meta&nbsp;http-equiv=&quot;content-type&quot;&nbsp;content=&quot;text/html;charset=UTF-8&quot;&nbsp;/&gt;<br />
<br />&nbsp;&nbsp;&lt;title&gt;Categories:&nbsp;&lt;%=&nbsp;controller.action_name&nbsp;%&gt;&lt;/title&gt;<br />
<br />&nbsp;&nbsp;&lt;%=&nbsp;stylesheet_link_tag&nbsp;'scaffold'&nbsp;%&gt;<br />
<br />&lt;/head&gt;<br />
<br />&lt;body&gt;<br />
<br /><strong>&lt;h1&gt;&lt;%=@heading&nbsp;%&gt;&lt;/h1&gt;</strong><br />
<br />...
</p></blockquote>
<p></code></p>
<p><code><br />
app/views/categories/index.html.erb (excerpt)</p>
<blockquote><p>
<strong>&lt;%&nbsp;@heading&nbsp;=&nbsp;&quot;Categories&quot;&nbsp;%&gt;</strong><br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
<br />&lt;table&gt;<br />
<br />&nbsp;&nbsp;&lt;tr&gt;<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;Title&lt;/th&gt;<br />
<br />&nbsp;&nbsp;&lt;/tr&gt;<br />
<br />&nbsp;<br />
<br />&lt;%&nbsp;for&nbsp;category&nbsp;in&nbsp;@categories&nbsp;%&gt;<br />
<br />&nbsp;&nbsp;&lt;tr&gt;<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;%=h&nbsp;category.title&nbsp;%&gt;&lt;/td&gt;<br />
<strong><br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;%=&nbsp;category[&quot;created_at&quot;].strftime(&quot;%I:%M&nbsp;%p&nbsp;%d-%b-%y&quot;)&nbsp;%&gt;&lt;/td&gt;&nbsp;&nbsp;&nbsp;&nbsp;<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;%=&nbsp;category[&quot;updated_at&quot;].strftime(&quot;%I:%M&nbsp;%p&nbsp;%d-%b-%y&quot;)&nbsp;%&gt;&lt;/td&gt;</strong></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;%=&nbsp;link_to&nbsp;'Edit',&nbsp;edit_category_path(category)&nbsp;%&gt;&lt;/td&gt;<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;%=&nbsp;link_to&nbsp;'Destroy',&nbsp;category,&nbsp;:confirm&nbsp;=&gt;&nbsp;'Are&nbsp;you&nbsp;sure?',&nbsp;:method&nbsp;=&gt;&nbsp;:delete&nbsp;%&gt;&lt;/td&gt;<br />
<br />&nbsp;&nbsp;&lt;/tr&gt;<br />
<br />&lt;%&nbsp;end&nbsp;%&gt;<br />
<br />&lt;/table&gt;
</p></blockquote>
<p></code></p>
<p>Since we removed the 'show' action above, I've also removed the link in the categories list view.  Then I added created_at and updated_at, which if you recall from Day 1, were auto-generated for us as part of the scaffold.</p>
<p>Instead of the default date format (e.g. Sat Dec 13 23:26:19 UTC 2008), we're using a Ruby method strftime() to format the date and time fields (e.g. 11:26 PM 13-Dec-08)</p>
<p>Ruby Documentation: class Time</p>
<p><a name="partial"></p>
<h2>Partial Templates</h2>
<p></a></p>
<p>You may have noticed that edit and new are almost idential.  The scaffold does not assume that will be your design, so it doesn't prematurely optimize; however, in this app the new and edit pages share almost all of the same elements.  Rails can allow these templates to share code by using a "partial" template.  Create a new file called _category (all partial templates begin with an '_' per Rails convention) and insert the shared code:</p>
<p><code><br />
<strong>app/views/categories/_category.html.erb</strong></p>
<blockquote><p>
&lt;%&nbsp;form_for(@category)&nbsp;do&nbsp;|f|&nbsp;%&gt;<br />
<br />&nbsp;&nbsp;&lt;%=&nbsp;f.error_messages&nbsp;%&gt;</p>
<p>&nbsp;&nbsp;&lt;p&gt;<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;%=&nbsp;f.label&nbsp;:title&nbsp;%&gt;&lt;br&nbsp;/&gt;<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;%=&nbsp;f.text_field&nbsp;:title&nbsp;%&gt;<br />
<br />&nbsp;&nbsp;&lt;/p&gt;<br />
<br />&nbsp;&nbsp;&lt;p&gt;<br />
<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;%=&nbsp;f.submit&nbsp;<strong>button_name</strong>&nbsp;%&gt;<br />
<br />&nbsp;&nbsp;&lt;/p&gt;<br />
<br />&lt;%&nbsp;end&nbsp;%&gt;</p>
<p>&lt;%=&nbsp;link_to&nbsp;'Back',&nbsp;categories_path&nbsp;%&gt;
</p></blockquote>
<p></code></p>
<p>This makes the edit and new templates very short and sweet.  Note the use of the variable button_name, which you can see in action below. </p>
<p><code><br />
<strong>app/views/categories/edit.html.erb (that's the whole thing!)</strong></p>
<blockquote><p>
<strong>&lt;%&nbsp;@heading&nbsp;=&nbsp;&quot;Edit&nbsp;Category&quot;&nbsp;%&gt;</strong></p>
<p>&lt;%=&nbsp;render&nbsp;:partial&nbsp;=&gt;&nbsp;@category,<br />
<br />&nbsp;&nbsp;:locals&nbsp;=&gt;&nbsp;{&nbsp;:<strong>button_name&nbsp;=&gt;&nbsp;&quot;Update&quot;</strong>}&nbsp;%&gt;
</p></blockquote>
<p><code></p>
<p><code><strong><br />
app/views/categories/new.html.erb</strong></p>
<blockquote><p>
<strong>&lt;%&nbsp;@heading&nbsp;=&nbsp;&quot;New&nbsp;Category&quot;&nbsp;%&gt;</strong></p>
<p>&lt;%=&nbsp;render&nbsp;:partial&nbsp;=&gt;&nbsp;@category,<br />
<br />&nbsp;&nbsp;:locals&nbsp;=&gt;&nbsp;{&nbsp;:<strong>button_name&nbsp;=&gt;&nbsp;&quot;Create&quot;</strong>}&nbsp;%&gt;
</p></blockquote>
<p></code></p>
<p>Now we have a nicely modular webapp following the DRY principle without that unsightly repeated code.  We also understand much of the code that defines our little app.</p>
<p><a name="review"></p>
<h1>What did we learn?</h1>
<p></a></p>
<p>We learned about the following files that were created by the generate scaffold script:</p>
<ul>
<li>app/models/category.rb</li>
<li>app/controllers/categories_controller.rb   </li>
<li>app/view/layouts/categories.html.erb</li>
<li>app/view/categories/
<ul>
<li>            index.html.erb</li>
<li>            show.html.erb</li>
<li>	    edit.html.erb		</li>
<li>            new.html.erb	</li>
</ul>
</li>
</ul>
<p>We also learned how to create a partial template: _category.html.erb.</p>
<p>I learned more of the Ruby language and how to navigate the Ruby API docs, and I hope you did too.  This tutorial got a bit long and required quite a bit of changes from the old one.  Please comment if you find any errors and I'll fix up up for posterity.</p>
<p>Notably absent from this tutorial has been the famous unit testing that I hear all good Ruby developers swear by. Perhaps I'll need to go offscript and read up on that for Day 3.</p>
<p>Stay tuned.</p>
	</div><!-- .entry-content -->
	
	<footer class="entry-meta">
		<span class="cat-links block">Posted in <a href="/category/code/" rel="category tag">code</a>.</span>	</footer><!-- #entry-meta -->
	
	</article><!-- #post-598 -->
<article id="post-458" class="post-458 post type-post status-publish format-standard hentry category-general">
		
	<header class="page-header">
	<h1 class="entry-title"><a href="/2008/12/geeking-out/" title="Permalink to geeking out" rel="bookmark">geeking out</a></h1>		<div class="entry-meta">
			<span class="sep">Posted on </span><a href="/2008/12/geeking-out/" title="9:01 am" rel="bookmark"><time class="entry-date" datetime="2008-12-14T09:01:43-08:00" pubdate>December 14, 2008</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="/author/sarah/" title="View all posts by sarah" rel="author">sarah</a></span></span>		<span class="sep"> | </span>
		<span class="comments-link">
			<a href="/2008/12/geeking-out/#respond"><span class="leave-reply">Leave a reply</span></a>		</span>
				</div><!-- .entry-meta -->
			</header><!-- .entry-header -->

		<div class="entry-content clearfix">
		<p>I&#8217;ve been learning Ruby on Rails over the past couple of days and have decided to chronicle my <a href="/code/">adventures in code</a> in a separate spot.  I&#8217;ve found that my regular readers tend to be a diverse crowd and some of their eyes tend to glaze over when I&#8217;ve delved into the nitty details of code.</p>
<p>Feel free to join me over at <a href="/code/">ultrasaurus.com/code</a> if you like to write (or at least read about) code, although I will continue my still geeky, but less code-filled reflections here.</p>
	</div><!-- .entry-content -->
	
	<footer class="entry-meta">
		<span class="cat-links block">Posted in <a href="/category/general/" rel="category tag">general</a>.</span>	</footer><!-- #entry-meta -->
	
	</article><!-- #post-458 -->
<article id="post-597" class="post-597 post type-post status-publish format-standard hentry category-code">
		
	<header class="page-header">
	<h1 class="entry-title"><a href="/2008/12/getting-started-with-rails-2-day-1/" title="Permalink to getting started with rails 2 &#8211; day 1" rel="bookmark">getting started with rails 2 &#8211; day 1</a></h1>		<div class="entry-meta">
			<span class="sep">Posted on </span><a href="/2008/12/getting-started-with-rails-2-day-1/" title="12:45 pm" rel="bookmark"><time class="entry-date" datetime="2008-12-13T12:45:41-08:00" pubdate>December 13, 2008</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="/author/sarah/" title="View all posts by sarah" rel="author">sarah</a></span></span>		<span class="sep"> | </span>
		<span class="comments-link">
			<a href="/2008/12/getting-started-with-rails-2-day-1/#comments"><strong>1</strong> Reply</a>		</span>
				</div><!-- .entry-meta -->
			</header><!-- .entry-header -->

		<div class="entry-content clearfix">
		<p>The <a href="http://guides.rubyonrails.org/getting_started_with_rails.html">Getting Started Guide</a> introduces several guiding principles from the Rails philosophy:</p>
<ul>
<li>DRY &#8211; &#8220;Don&#8217;t Repeat Yourself&#8221; &#8211; suggests that writing the same code over and over again is a bad thing.</li>
<li>Convention Over Configuration &#8211; means that Rails makes assumptions about what you want to do and how you&#8217;re going to do it, rather than letting you tweak every little thing through endless configuration files.</li>
<li> REST is the best pattern for web applications &#8211; organizing your application around resources and standard HTTP verbs is the fastest way to go. </li>
</ul>
<p>Aside from that very nice guide, there seem to be few tutorials for the newbie that are in Rails 2.  I really like the approach I see in <a href="http://rails.homelinux.org/">Four Days on Rails</a>, so I&#8217;ve decided to see if I can replicate that tutorials in the latest version of Rails.  I got through the first day in 3.5 hours and then spent another couple of hours reading up on what I had learned.  Since it is hard for me to find contiguous stretches of time and other newbies may benefit from my experience, I&#8217;ve decided to document the process.</p>
<p>Sources:</p>
<ul>
<li><a href="http://rails.homelinux.org/">Four Days on Rails</a></li>
<li><a href="http://akitaonrails.com/2007/12/12/rolling-with-rails-2-0-the-first-full-tutorial">Akita on Rails: the First Full Tutorial</a></li>
<li><a href="http://fairleads.blogspot.com/2007/12/rails-20-and-scaffolding-step-by-step.html">Sean Lynch at Fairleads: Rails 2.0 step by step</a></li>
</ul>
<p>My intent is not to plagiarize, but rather to give back to a most excellent community &#8212; the tutorial content is directly from Rails4Days.  I quote <a href="http://akitaonrails.com/about">Fabio Akita</a> and <a href="http://www.blogger.com/profile/16196715129586398563">Sean Lynch</a> regularly and will give credit as I go. </p>
<p>In today&#8217;s tutorial, we will:</p>
<ol>
<li><a href="#setup">Set up the environment</a></li>
<li><a href="#create">Create the application</a></li>
<li><a href="#db">Create the database</a></li>
<li><a href="#scaffold">Generate Scaffold</a></li>
<li><a href="#review">Review what we learned</a> (or how to do it next time in 5 mins)</li>
</ol>
<p>&nbsp;</p>
<hr />
<p>&nbsp;</p>
<p>code {background-color:silver}<br />
h1 {font-size: 150%}<br />
h1 {font-style: bold}<br />
img<br />
{<br />
border:2px solid silver;<br />
margin:0px 0px 15px 20px;<br />
}</p>
<p>&lt;a name=&quot;setup&quot;</p>
<h1>Set up the environment</h1>
<p></a></p>
<p>I&#8217;ve already got Apache installed on my Mac (see <a href="http://oreilly.com/pub/a/mac/2001/12/07/apache.html">nice O&#8217;Reilly article</a>).  I didn&#8217;t actually use apache on the first day, but it just seems like a good idea to be working in my webroot and it was fun to actually find the webserver pre-installed on my new Mac.</p>
<p>For convenience, I defined webroot in my .bashrc:</p>
<p><code>webroot=/Library/WebServer/Documents</code></p>
<p />
<p>The first thing you have to do is update your gems:</p>
<p><code>sudo gem install rails --include-dependencies</code></p>
<p />
<p>You may probably need to update RubyGems as well:</p>
<p><code>sudo gem update --system</code></p>
<p />
<p>There&#8217;s a little trick to working with MySql (via <a href="http://wonko.com/post/how-to-install-the-mysqlruby-gem-on-mac-os-x-leopard">wonko</a> ) First, download and install <a href="http://dev.mysql.com/downloads/mysql/5.0.html#macosx-dmg">MySQL for Mac OS X 10.5 (x86)</a>. Don&#8217;t install the x86_64 build or Ruby will refuse to speak to it. If you&#8217;ve already installed the x86_64 build, backup your databases,<br />
install the x86 build on top of it, and restore your databases.</p>
<p>Once you&#8217;ve got the correct build of MySQL installed, pop open a terminal and run the following to install the MySQL/Ruby gem:</p>
<p><code>sudo env ARCHFLAGS="-arch i386" gem install mysql --<br />
--with-mysql-dir=/usr/local/mysql --with-mysql-lib=/usr/local/mysql/lib<br />
--with-mysql-include=/usr/local/mysql/include</code></p>
<p />
<p>Now that the setup is compete, onward to creating the app&#8230;</p>
<p><a name="create"></p>
<h1>Create the application</h1>
<p></a><br />
<code>cd $webroot</code><br />
<code>rails -d mysql todo</code></p>
<p />
<p>This creates an overwhelming number of files.  You&#8217;ll soon see that Rails does this a lot, but the trick is to understand what&#8217;s going on as you use the shortcuts.  The tutorial dives into these directories one by one, but for those of you who like an overview, the Getting Started Guide has a nice overview of the directory structure.   If you are more of a bottoms-up learner, just skip the table and read on.</p>
<table cellpadding="4" cellspacing="0" rules="all">
<col width="137">
<col width="1440">
<thead>
<tr>
<th align="left">
File/Folder
</th>
<th align="left">
Purpose
</th>
</tr>
</thead>
<tbody valign="top">
<tr>
<td align="left">
<tt>README</tt>
</td>
<td align="left">
This is a brief instruction manual for your application. Use it to tell others what your application does, how to set it up, and so on.
</td>
</tr>
<tr>
<td align="left">
<tt>Rakefile</tt>
</td>
<td align="left">
This file contains batch jobs that can be run from the terminal.
</td>
</tr>
<tr>
<td align="left">
<tt>app/</tt>
</td>
<td align="left">
Contains the controllers, models, and views for your application. You&#8217;ll focus on this folder for the remainder of this guide.
</td>
</tr>
<tr>
<td align="left">
<p><tt>config/</tt>
</td>
<td align="left">
Configure your application&#8217;s runtime rules, routes, database, and more.
</td>
</tr>
<tr>
<td align="left">
<tt>db/</tt></p>
</td>
<td align="left">
Shows your current database schema, as well as the database migrations. You&#8217;ll learn about migrations shortly.
</td>
</tr>
<tr>
<td align="left">
<tt>doc/</tt>
</td>
<td align="left">
In-depth documentation for your application.
</td>
</tr>
<tr>
<td align="left">
<tt>lib/</tt>
</td>
<td align="left">
<p>Extended modules for your application (not covered in this guide).
</td>
</tr>
<tr>
<td align="left">
<tt>log/</tt>
</td>
<td align="left">
Application log files.
</td>
</tr>
<tr>
<td align="left">
<tt>public/</tt>
</td>
<td align="left">
The only folder seen to the world as-is.  This is where your images, javascript, stylesheets (CSS), and other static files go.
</td>
</tr>
<tr>
<td align="left">
<tt>script/</tt>
</td>
<td align="left">
Scripts provided by Rails to do recurring tasks, such as benchmarking, plugin installation, and starting the console or the web server.
</td>
</tr>
<tr>
<td align="left">
<tt>test/</tt>
</td>
<td align="left">
Unit tests, fixtures, and other test apparatus. These are covered in &lt;a href=&quot;<a href="http://guides.rubyonrails.org/testing_rails_applications.html">../testing_rails_applications.html</a>&#8220;&gt;Testing Rails Applications</a>
</td>
</tr>
<tr>
<td align="left">
<tt>tmp/</tt>
</td>
<td align="left">
Temporary files
</td>
</tr>
<tr>
<td align="left">
<tt>vendor/</tt>
</td>
<td align="left">
A place for third-party code. In a typical Rails application, this includes Ruby Gems, the Rails source code (if you install it into your project) and plugins containing additional prepackaged functionality.
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p><a name="db"></p>
<h1>Create Your Database</h1>
<p></a></p>
<p>Next we&#8217;ll create a database. If you look at <strong>config/database.yml</strong>, you&#8217;ll see that separate environments of dev, test, and production may be defined.  Because you specified <code>-d mysql</code> when creating the todo app the database settings are all of MySql.  Neat, huh?</p>
<blockquote><p><code></p>
<pre>
development:
adapter: mysql
encoding: utf8
database: todo_development
pool: 5
username: root
password:
host: localhost

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
adapter: mysql
encoding: utf8
database: todo_test
pool: 5
username: root
password:
host: localhost

production:
adapter: mysql
encoding: utf8
database: todo_production
pool: 5
username: root
password:
host: localhost
</pre>
<p></code></p></blockquote>
<p>Notice the repeated text?  Rails spells it all out for you to make it easy to modify for three separate environments.  If you&#8217;ve got them all in one place, you can follow the DRY principle with this handy Rails shortcut.</p>
<blockquote><p><code></p>
<pre>
defaults: &amp;defaults
adapter: mysql
encoding: utf8
username: root
password:

development:
database: todo_development
&lt;&lt;: *defaults

test:
database: todo_test
&lt;&lt;: *defaults

production:
database: todo_production
&lt;&lt;: *defaults
</pre>
<p></code></p></blockquote>
<p>we can set a bunch of defaults at the top, then specify what is different about our dev, test and production environments.</p>
<p>Akita notes: Notice that now you have a &#8216;encoding&#8217; options that&#8217;s set to UTF8 by default. The Rails app itself loads up with KCODE<br />
= true by default as well, meaning that it silently starts with Unicode support already, which is great. But that &#8216;encoding&#8217; configuration has<br />
a new usage as well: everytime Rails connects to the database it will tell it to use this &#8216;encoding&#8217; setting. Like issuing a &#8216;SET NAMES UTF8&#8217;.</p>
<p>Rails 2 has far better database support.  In the older versions, we&#8217;d have to actually type SQL commands and manually create the database.  The procrastinating programmer who is only now learning Rails scores!</p>
<p>To create the database, simply type:</p>
<p><code>rake db:create:all</code></p>
<p />
<p>Note: MySql has to be started for it to work.  If you get errors, make sure you set your db name and password correctly in config/database.yml (I made that mistake and got a weird error that said: </p>
<pre>Couldn't create database for {"encoding"=&gt;"utf8", "username"=&gt;"root",
"adapter"=&gt;"mysql", "host"=&gt;"localhost", "password"=&gt;nil,
"database"=&gt;"todo_development", "pool"=&gt;5}, charset: utf8,
collation: utf8_general_ci (if you set the charset manually, make
sure you have a matching collation)</pre>
<p>All good?  Now you can look at mysql and see your brand new databases</p>
<blockquote>
<pre>
$ mysql -uroot
Welcome to the MySQL monitor.  Commands end with ; or g.
Your MySQL connection id is 12
Server version: 5.0.67 MySQL Community Server (GPL)

Type 'help;' or 'h' for help. Type 'c' to clear the buffer.

mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| ....               |
| todo_development   |
| todo_production    |
| todo_test          |
+--------------------+
6 rows in set (0.00 sec)

mysql&gt; exit
</pre>
</blockquote>
<p>You can try other fun rake commands&#8230;</p>
<p><code>$ rake db:charset</code></p>
<pre>
(in /Library/WebServer/Documents/todo)
utf8
</pre>
<p><code>$ rake db:version</code></p>
<pre>
(in /Library/WebServer/Documents/todo)
Current version: 0
</pre>
<p>Here&#8217;s a handy table of Rake database tasks from Akita:</p>
<table>
<tbody>
<tr>
<td> db:charset                </td>
<td> Retrieves the charset for the current environment&#8217;s database</td>
</tr>
<tr>
<td> db:collation              </td>
<td> Retrieves the collation for the current environment&#8217;s database</td>
</tr>
<tr>
<td> db:create                 </td>
<td> Create the database defined in config/database.yml for the current RAILS_ENV</td>
</tr>
<tr>
<td> db:create:all             </td>
<td> Create all the local databases defined in config/database.yml</td>
</tr>
<tr>
<td> db:drop                   </td>
<td> Drops the database for the current RAILS_ENV</td>
</tr>
<tr>
<td> db:drop:all               </td>
<td> Drops all the local databases defined in config/database.yml</td>
</tr>
<tr>
<td> db:reset                  </td>
<td> Drops and recreates the database from db/schema.rb for the current environment.</td>
</tr>
<tr>
<td> db:rollback               </td>
<td> Rolls the schema back to the previous version. Specify the number of steps with <span class="caps">STEP</span>=n</td>
</tr>
<tr>
<td> db:version                </td>
<td> Retrieves the current schema version number</td>
</tr>
</tbody>
</table>
<p>Akita says&#8230; If we want to start from scratch, we can do db:drop:all. And in the middle of development we can do db:rollback to undo the latest migration file.</p>
<p>Ok, now you have some databases, but there is nothing in them</p>
<blockquote>
<pre>
mysql&gt; show tables;
Empty set (0.00 sec)
</pre>
</blockquote>
<p>&nbsp;</p>
<p><a name="scaffold"></p>
<h1>Generate Scaffold</h1>
<p></a></p>
<p>Hold on to your hat and types these two lines into your terminal&#8230;.</p>
<p>Note: the text you type is highlighted gray, the other text is expected output</p>
<p><code>./script/generate scaffold Category title:string</code></p>
<pre>
exists  app/models/
exists  app/controllers/
exists  app/helpers/
create  app/views/categories
exists  app/views/layouts/
exists  test/functional/
exists  test/unit/
exists  public/stylesheets/
create  app/views/categories/index.html.erb
create  app/views/categories/show.html.erb
create  app/views/categories/new.html.erb
create  app/views/categories/edit.html.erb
create  app/views/layouts/categories.html.erb
create  public/stylesheets/scaffold.css
create  app/controllers/categories_controller.rb
create  test/functional/categories_controller_test.rb
create  app/helpers/categories_helper.rb
route  map.resources :categories
dependency  model
exists    app/models/
exists    test/unit/
exists    test/fixtures/
create    app/models/category.rb
create    test/unit/category_test.rb
create    test/fixtures/categories.yml
create    db/migrate
create    db/migrate/20081213223324_create_categories.rb
</pre>
<p><code>rake db:migrate<code></p>
<pre>
(in /Library/WebServer/Documents/todo)
==  CreateCategories: migrating ===============================================
-- create_table(:categories)
-&gt; 0.0032s
==  CreateCategories: migrated (0.0034s) ======================================
</pre>
<p>What just happened? Let's go back to mysql and check it out.</p>
<blockquote>
<pre>
mysql&gt; use todo_development;
Database changed

mysql&gt; show tables;
+----------------------------+
| Tables_in_todo_development |
+----------------------------+
| categories                 |
| schema_migrations          |
+----------------------------+
2 rows in set (0.00 sec)

mysql&gt; show columns from categories;
+------------+--------------+------+-----+---------+----------------+
| Field      | Type         | Null | Key | Default | Extra          |
+------------+--------------+------+-----+---------+----------------+
| id         | int(11)      | NO   | PRI | NULL    | auto_increment |
| title      | varchar(255) | YES  |     | NULL    |                |
| created_at | datetime     | YES  |     | NULL    |                |
| updated_at | datetime     | YES  |     | NULL    |                |
+------------+--------------+------+-----+---------+----------------+
4 rows in set (0.00 sec)
</pre>
</blockquote>
<p>Now with a little help from <a href="http://fairleads.blogspot.com/2007/12/rails-20-and-scaffolding-step-by-step.html">fairleads</a>, let's poke around what rails has generated for us..</p>
<p><code>./script/server</code></p>
<pre>
=&gt; Booting Mongrel (use 'script/server webrick' to force WEBrick)
=&gt; Rails 2.2.2 application starting on http://0.0.0.0:3000
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
** Starting Mongrel listening at 0.0.0.0:3000
** Starting Rails with development environment...
** Rails loaded.
** Loading any Rails specific GemPlugins
** Signals ready.  TERM =&gt; stop.  USR2 =&gt; restart.  INT =&gt; stop (no restart).
** Rails signals registered.  HUP =&gt; reload (without restart).  It might not work well.
** Mongrel 1.1.4 available at 0.0.0.0:3000
** Use CTRL-C to stop.
</pre>
<p>Note: In development mode, Rails does not generally require you to stop the server; changes you make in files will be automatically picked up by the server.</p>
<p><p>point your browser at:  http://localhost:3000/categories</p>
<p>You'll see a page generated from the rails view</p>
<p><img src="http://farm4.static.flickr.com/3251/3106006774_a351f9b531.jpg?v=0" /></p>
<p>You can use the links to create new catgories...</p>
<p><img src="http://farm4.static.flickr.com/3072/3106006788_4fc135e099.jpg?v=0" /></p>
<p>then when you go back to the categories page, you will see that is dynamically displays the list of categories</p>
<p><img src="http://farm4.static.flickr.com/3269/3106051722_fa758ea181.jpg?v=0" /></p>
<p><a name="review"></p>
<h1>What did we learn?</h1>
<p></a></p>
<ul>
<li>By typing 4 lines into your terminal you can create a database application with basic (<a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a>) list operations:<br />
<blockquote>
<pre>

rails -d mysql todo
rake db:create:all
./script/generate scaffold Category title:string
rake db:migrate
</pre>
</blockquote>
<li>You can run your application using the Rails browser<br />
<blockquote>
<pre>

./script/server
point your browser at: http://localhost:3000/categories
</pre>
</blockquote>
</li>
<li>There's still a lot of magic going on, which we'll learn about on day 2</li>
</ul>
<p>Stay tuned.</p>
	</div><!-- .entry-content -->
	
	<footer class="entry-meta">
		<span class="cat-links block">Posted in <a href="/category/code/" rel="category tag">code</a>.</span>	</footer><!-- #entry-meta -->
	
	</article><!-- #post-597 -->
<nav class="pagination pagination-centered clearfix"><ul class='page-numbers'>
	<li><a class="prev page-numbers" href="/2008/12/page/3/">&laquo; Previous</a></li>
	<li><a class="page-numbers" href="/2008/12/">1</a></li>
	<li><a class="page-numbers" href="/2008/12/page/2/">2</a></li>
	<li><a class="page-numbers" href="/2008/12/page/3/">3</a></li>
	<li><span aria-current="page" class="page-numbers current">4</span></li>
	<li><a class="page-numbers" href="/2008/12/page/5/">5</a></li>
	<li><a class="page-numbers" href="/2008/12/page/6/">6</a></li>
	<li><a class="page-numbers" href="/2008/12/page/7/">7</a></li>
	<li><a class="next page-numbers" href="/2008/12/page/5/">Next &raquo;</a></li>
</ul>
</nav>	</div><!-- #content -->
	</section><!-- #primary -->

<section id="secondary" class="widget-area span4" role="complementary">
	<aside id="recent-comments-2" class="widget well widget_recent_comments"><h2 class="widget-title">Recent Comments</h2><ul id="recentcomments"><li class="recentcomments"><span class="comment-author-link"><a href='https://da.biomarmicrobialtechnologies.com/' rel='external nofollow ugc' class='url'>Silje Randrup</a></span> on <a href="/2003/08/the-history-of-the-letter-c/#comment-22370">the history of the letter &#8216;C&#8217;</a></li><li class="recentcomments"><span class="comment-author-link"><a href='http://x--x.us' rel='external nofollow ugc' class='url'>Paula</a></span> on <a href="/2003/08/the-history-of-the-letter-c/#comment-19549">the history of the letter &#8216;C&#8217;</a></li><li class="recentcomments"><span class="comment-author-link"><a href='http://x--x.us' rel='external nofollow ugc' class='url'>Michelle</a></span> on <a href="/2003/08/the-history-of-the-letter-c/#comment-19399">the history of the letter &#8216;C&#8217;</a></li><li class="recentcomments"><span class="comment-author-link">Craig</span> on <a href="/2019/10/http-3-starter-notes-rust-quiche/#comment-18963">http/3 starter notes, rust quiche</a></li><li class="recentcomments"><span class="comment-author-link">Kornel</span> on <a href="/2019/10/rust-whats-a-tuple-variant/#comment-18539">[rust] what&#8217;s a tuple variant?</a></li><li class="recentcomments"><span class="comment-author-link"><a href='https://apromixately.github.io' rel='external nofollow ugc' class='url'>Simon</a></span> on <a href="/2019/06/essential-rust-tools/#comment-13007">essential rust tools</a></li><li class="recentcomments"><span class="comment-author-link"><a href='https://balsamiq.com/company/' rel='external nofollow ugc' class='url'>balsamiqVal</a></span> on <a href="/2018/10/the-path-is-made-by-walking/#comment-9108">the path is made by walking</a></li><li class="recentcomments"><span class="comment-author-link">Jennifer</span> on <a href="/2018/07/optimize-for-results-not-optics/#comment-8193">optimize for results, not optics</a></li><li class="recentcomments"><span class="comment-author-link">Bernardo Gomes</span> on <a href="/2016/06/sailsjs-testing-patterns-trunctate-database/#comment-8058">sailsjs testing: how to truncate the database</a></li><li class="recentcomments"><span class="comment-author-link">Bernardo Gomes</span> on <a href="/2016/06/sailsjs-testing-patterns-trunctate-database/#comment-8057">sailsjs testing: how to truncate the database</a></li></ul></aside>
		<aside id="recent-posts-2" class="widget well widget_recent_entries">
		<h2 class="widget-title">Recent Posts</h2>
		<ul>
											<li>
					<a href="/2020/07/hope-is-not-a-strategy/">hope is not a strategy</a>
									</li>
											<li>
					<a href="/2020/01/duck-typing-in-rust-trait-vs-type/">duck typing in rust: trait vs type</a>
									</li>
											<li>
					<a href="/2020/01/writing-c-library-in-rust/">writing c library in rust</a>
									</li>
											<li>
					<a href="/2020/01/rust-on-heroku-with-hyper-http/">rust on heroku with hyper http</a>
									</li>
											<li>
					<a href="/2020/01/rust-on-heroku-with-async-await-and-tokio/">rust on heroku with async/await and tokio</a>
									</li>
											<li>
					<a href="/2019/12/patterns-of-actions-are-a-making/">patterns of actions are a making</a>
									</li>
											<li>
					<a href="/2019/12/memory-safety-necessary-not-sufficient/">memory safety: necessary, not sufficient</a>
									</li>
											<li>
					<a href="/2019/12/brief-history-of-rtmp-future-thoughts/">brief history of rtmp + future thoughts</a>
									</li>
											<li>
					<a href="/2019/12/rust-2020/">rust 2020: fulfill the promise</a>
									</li>
											<li>
					<a href="/2019/11/nut-loaf-with-red-pepper-sauce/">nut loaf with red pepper sauce</a>
									</li>
											<li>
					<a href="/2019/10/http-3-starter-notes-rust-quiche/">http/3 starter notes, rust quiche</a>
									</li>
											<li>
					<a href="/2019/10/rust-whats-a-tuple-variant/">[rust] what&#8217;s a tuple variant?</a>
									</li>
											<li>
					<a href="/2019/08/graph-in-rust-using-petgraph/">graph in rust using petgraph</a>
									</li>
											<li>
					<a href="/2019/06/debugging-openssl-shared-libary/">debugging openssl shared libary</a>
									</li>
											<li>
					<a href="/2019/06/digital-identity-how-to-verify-trust/">digital identity: how to verify trust?</a>
									</li>
											<li>
					<a href="/2019/06/essential-rust-tools/">essential rust tools</a>
									</li>
											<li>
					<a href="/2019/05/learning-scala-with-graphics/">learning scala with graphics</a>
									</li>
											<li>
					<a href="/2019/04/when-reality-is-broken-change-the-rules/">when reality is broken, change the rules</a>
									</li>
											<li>
					<a href="/2019/04/subverting-saurons-business-model/">subverting Sauron&#8217;s business model</a>
									</li>
											<li>
					<a href="/2019/02/firebase-auth-migration-from-rails-and-devise/">firebase auth migration from rails/devise</a>
									</li>
					</ul>

		</aside></section><!-- #secondary .widget-area -->
				<footer id="colophon" role="contentinfo" class="span12">
										<div id="page-footer" class="well clearfix">
						<span class="credits alignleft">&copy; 2021 <a href="/">the evolving ultrasaurus</a>, all rights reserved.</span>						<div id="site-generator">
							<a	href="http://wordpress.org/"
								title="Semantic Personal Publishing Platform"
								target="_blank"
								rel="generator">Proudly powered by WordPress</a>
						</div>
					</div><!-- #page-footer .well .clearfix -->
									</footer><!-- #colophon -->
							</div><!-- #page -->
		</div><!-- .container -->
	<!-- 42 queries. 0.371 seconds. -->
	<script type='text/javascript' src='/wp-content/themes/the-bootstrap/js/bootstrap.min.js?ver=2.0.3' id='tw-bootstrap-js'></script>
<script type='text/javascript' src='/wp-content/themes/the-bootstrap/js/the-bootstrap.min.js?ver=2.0.1' id='the-bootstrap-js'></script>
<script type='text/javascript' src='/wp-includes/js/wp-embed.min.js?ver=5.7.1' id='wp-embed-js'></script>
	</body>
</html>
