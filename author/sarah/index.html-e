<!DOCTYPE html>
<html class="no-js" lang="en-US">
	<head>
				<link rel="profile" href="http://gmpg.org/xfn/11" />
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		
		<title>sarah &laquo; the evolving ultrasaurus</title>
		
				<meta name='robots' content='max-image-preview:large' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="the evolving ultrasaurus &raquo; Feed" href="/feed/" />
<link rel="alternate" type="application/rss+xml" title="the evolving ultrasaurus &raquo; Comments Feed" href="/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="the evolving ultrasaurus &raquo; Posts by sarah Feed" href="/author/sarah/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.0.1\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.0.1\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/www.ultrasaurus.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=5.7.1"}};
			!function(e,a,t){var n,r,o,i=a.createElement("canvas"),p=i.getContext&&i.getContext("2d");function s(e,t){var a=String.fromCharCode;p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,e),0,0);e=i.toDataURL();return p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,t),0,0),e===i.toDataURL()}function c(e){var t=a.createElement("script");t.src=e,t.defer=t.type="text/javascript",a.getElementsByTagName("head")[0].appendChild(t)}for(o=Array("flag","emoji"),t.supports={everything:!0,everythingExceptFlag:!0},r=0;r<o.length;r++)t.supports[o[r]]=function(e){if(!p||!p.fillText)return!1;switch(p.textBaseline="top",p.font="600 32px Arial",e){case"flag":return s([127987,65039,8205,9895,65039],[127987,65039,8203,9895,65039])?!1:!s([55356,56826,55356,56819],[55356,56826,8203,55356,56819])&&!s([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]);case"emoji":return!s([55357,56424,8205,55356,57212],[55357,56424,8203,55356,57212])}return!1}(o[r]),t.supports.everything=t.supports.everything&&t.supports[o[r]],"flag"!==o[r]&&(t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&t.supports[o[r]]);t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&!t.supports.flag,t.DOMReady=!1,t.readyCallback=function(){t.DOMReady=!0},t.supports.everything||(n=function(){t.readyCallback()},a.addEventListener?(a.addEventListener("DOMContentLoaded",n,!1),e.addEventListener("load",n,!1)):(e.attachEvent("onload",n),a.attachEvent("onreadystatechange",function(){"complete"===a.readyState&&t.readyCallback()})),(n=t.source||{}).concatemoji?c(n.concatemoji):n.wpemoji&&n.twemoji&&(c(n.twemoji),c(n.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<link rel='stylesheet' id='mailchimpSF_main_css-css'  href='/?mcsf_action=main_css&#038;ver=5.7.1' type='text/css' media='all' />
<!--[if IE]>
<link rel='stylesheet' id='mailchimpSF_ie_css-css'  href='/wp-content/plugins/mailchimp/css/ie.css?ver=5.7.1' type='text/css' media='all' />
<![endif]-->
<link rel='stylesheet' id='wp-block-library-css'  href='/wp-includes/css/dist/block-library/style.min.css?ver=5.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='tw-bootstrap-css'  href='/wp-content/themes/the-bootstrap/css/bootstrap.min.css?ver=2.0.3' type='text/css' media='all' />
<link rel='stylesheet' id='the-bootstrap-css'  href='/wp-content/themes/the-bootstrap/style.min.css?ver=2.0.1' type='text/css' media='all' />
<style id='the-bootstrap-inline-css' type='text/css'>
body > .container{margin-top:68px;}@media(min-width: 980px){body > .container{margin-top:58px;}}
</style>
<script type='text/javascript' src='/wp-includes/js/jquery/jquery.min.js?ver=3.5.1' id='jquery-core-js'></script>
<script type='text/javascript' src='/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.3.2' id='jquery-migrate-js'></script>
<script type='text/javascript' src='/wp-content/plugins/google-analyticator/external-tracking.min.js?ver=6.5.4' id='ga-external-tracking-js'></script>
<link rel="https://api.w.org/" href="/wp-json/" /><link rel="alternate" type="application/json" href="/wp-json/wp/v2/users/84" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 5.7.1" />
<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>	<style type="text/css">
				#branding hgroup {
			position: absolute !important;
			clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
			clip: rect(1px, 1px, 1px, 1px);
		}
			</style>
		<!--[if lt IE 9]>
		<script src="/wp-content/themes/the-bootstrap/js/html5shiv.min.js" type="text/javascript"></script>
		<script src="/wp-content/themes/the-bootstrap/js/respond.min.js" type="text/javascript"></script>
	<![endif]-->
	<!-- Google Analytics Tracking by Google Analyticator 6.5.4: http://www.videousermanuals.com/google-analyticator/ -->
<script type="text/javascript">
    var analyticsFileTypes = [''];
    var analyticsSnippet = 'enabled';
    var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
  
	_gaq.push(['_setAccount', 'UA-4313619-1']);
    _gaq.push(['_addDevId', 'i9k95']); // Google Analyticator App ID with Google
    _gaq.push(['_gat._anonymizeIp']);
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
</script>
		<style type="text/css" id="wp-custom-css">
			code {
	color: #70a
}

p {
	color: #333
}

blockquote p {
	font-size: 14px;
	font-weight: normal;
	padding-top: 6px;
	padding-bottom: 6px;
	padding-left: 10px;
	padding-right: 60px;
	line-height: 1.2;
}		</style>
			</head>
	
	<body class="archive author author-sarah author-84 content-sidebar">
		<div class="container">
			<div id="page" class="hfeed row">
								<header id="branding" role="banner" class="span12">
										<hgroup>
						<h1 id="site-title">
							<a href="/" title="the evolving ultrasaurus" rel="home">
								<span>the evolving ultrasaurus</span>
							</a>
						</h1>
						<h2 id="site-description">Sarah Allen&#039;s reflections on internet software and other topics</h2>
					</hgroup>
					
					
					<nav id="access" role="navigation">
						<h3 class="assistive-text">Main menu</h3>
						<div class="skip-link"><a class="assistive-text" href="#content" title="Skip to primary content">Skip to primary content</a></div>
						<div class="skip-link"><a class="assistive-text" href="#secondary" title="Skip to secondary content">Skip to secondary content</a></div>
												<div class="navbar navbar-fixed-top navbar-inverse">
							<div class="navbar-inner">
								<div class="container">
									<!-- .btn-navbar is used as the toggle for collapsed navbar content -->
									<a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
										<span class="icon-bar"></span>
										<span class="icon-bar"></span>
										<span class="icon-bar"></span>
									</a>
																		<span class="brand">the evolving ultrasaurus</span>
																		<div class="nav-collapse">
										<div class="menu-primary-container"><ul id="menu-primary" class="nav"><li id="menu-item-4272" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4272"><a href="/about/">About</a></li>
<li id="menu-item-6605" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6605"><a href="/speaking/">Speaking</a></li>
<li id="menu-item-6366" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-6366"><a href="/code/">Code</a></li>
<li id="menu-item-4269" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4269"><a href="/archives/">Archives</a></li>
<li id="menu-item-4759" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4759"><a href="/contact/">Contact</a></li>
<li id="menu-item-4697" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4697"><a href="/ultrasaurus/">What is an ultrasaurus?</a></li>
</ul></div>	<form id="searchform" class="navbar-search pull-right" method="get" action="/">
						<label for="s" class="assistive-text hidden">Search</label>
						<input type="search" class="search-query" name="s" id="s" placeholder="Search" />
					</form>								    </div>
								</div>
							</div>
						</div>
											</nav><!-- #access -->
									</header><!-- #branding -->
<section id="primary" class="span8">

		<div id="content" role="main">
		
			<header class="page-header">
				<h1 class="page-title author">Author Archives: <span class="vcard"><a class="url fn n" href="/author/sarah/" title="sarah" rel="me">sarah</a></span></h1>
			</header><!-- .page-header -->
	
			<article id="post-7019" class="post-7019 post type-post status-publish format-standard hentry category-uncategorized">
		
	<header class="page-header">
	<h1 class="entry-title"><a href="/2020/07/hope-is-not-a-strategy/" title="Permalink to hope is not a strategy" rel="bookmark">hope is not a strategy</a></h1>		<div class="entry-meta">
			<span class="sep">Posted on </span><a href="/2020/07/hope-is-not-a-strategy/" title="3:46 am" rel="bookmark"><time class="entry-date" datetime="2020-07-04T03:46:13-07:00" pubdate>July 4, 2020</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="/author/sarah/" title="View all posts by sarah" rel="author">sarah</a></span></span>		<span class="sep"> | </span>
		<span class="comments-link">
			<a href="/2020/07/hope-is-not-a-strategy/#respond"><span class="leave-reply">Leave a reply</span></a>		</span>
				</div><!-- .entry-meta -->
			</header><!-- .entry-header -->

		<div class="entry-content clearfix">
		<p>&#8220;Yeah I think I got to the limit of my bargaining &#8230; getting to end of May, and when I didn’t seem to get past my last best day which was 2 weeks ago&#8221; It was May 25th, the day I remember grieving for my lost life, text chatting with my <em>flu buddy</em> about the five stages of grief: denial, anger, bargaining, depression and acceptance.</p>
<p>&#8220;I think the thing is that I have to learn to live with this — I can’t just keep expecting, waiting to suddenly get better.&#8221; I stopped making plans beyond &#8220;rest, walk a little, rest, eat a little, rest&#8230;&#8221; in achingly slow motion, on a good day I could send an email <em>and</em> talk on the phone to a friend.</p>
<p>It&#8217;s not that I gave up hope, it&#8217;s just that thinking about any specific hope for the future was just not helpful. Recently, my brother shared a poem that captured this experience well:</p>
<p>My grandmother once gave me a tip:<br />
In difficult times, you move forward in small steps.<br />
Do what you have to do, but little by little.<br />
Don&#8217;t think about the future, or what may happen tomorrow.<br />
Wash the dishes.<br />
Remove the dust.<br />
Write a letter.<br />
Make a soup.<br />
You see?<br />
You are advancing step by step.<br />
Take a step and stop.<br />
Rest a little.<br />
Praise yourself.<br />
Take another step.<br />
Then another.<br />
You won&#8217;t notice, but your steps will grow more and more.<br />
And the time will come when you can think about the future without crying.</p>
<p>&#8212; Elena Mikhalkova, <em>The Room of Ancient Keys</em></p>
<p>I couldn&#8217;t find anything else written by Elena Mikhalkova that has been translated into English. I&#8217;d love to hear about it if her books or any of her other poems is ever translated.</p>
	</div><!-- .entry-content -->
	
	<footer class="entry-meta">
		<span class="cat-links block">Posted in <a href="/category/uncategorized/" rel="category tag">Uncategorized</a>.</span>	</footer><!-- #entry-meta -->
	
	</article><!-- #post-7019 -->
<article id="post-7004" class="post-7004 post type-post status-publish format-standard hentry category-code">
		
	<header class="page-header">
	<h1 class="entry-title"><a href="/2020/01/duck-typing-in-rust-trait-vs-type/" title="Permalink to duck typing in rust: trait vs type" rel="bookmark">duck typing in rust: trait vs type</a></h1>		<div class="entry-meta">
			<span class="sep">Posted on </span><a href="/2020/01/duck-typing-in-rust-trait-vs-type/" title="2:33 pm" rel="bookmark"><time class="entry-date" datetime="2020-01-25T14:33:23-08:00" pubdate>January 25, 2020</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="/author/sarah/" title="View all posts by sarah" rel="author">sarah</a></span></span>		<span class="sep"> | </span>
		<span class="comments-link">
			<a href="/2020/01/duck-typing-in-rust-trait-vs-type/#respond"><span class="leave-reply">Leave a reply</span></a>		</span>
				</div><!-- .entry-meta -->
			</header><!-- .entry-header -->

		<div class="entry-content clearfix">
		<p>A <code>Trait</code> in the Rust programming language enables what today&#8217;s coders commonly call &#8220;duck-typing&#8221; (walks like a duck and quacks like a duck).</p>
<p>In Rust, <code>type</code> refers to concrete types &#8212; the type of a value; whereas, a <code>Trait</code> refers to an abstract or generic type. Here the English word <em>type</em> lacks the specificity we need to describe these concepts, so we need adjectives to differentiate.</p>
<h2>TLDR: traits vs types</h2>
<p>The <code>type</code> keyword lets us define a type alias, like:</p>
<pre><code>type Population = i32;
</code></pre>
<p>This is useful if I&#8217;m often passing around specific variables for a Population, and I have function that takes multiple numbers, then the compiler will be able to  catch certain classes of errors:</p>
<pre><code>fn report(p: Population, num: i32)
</code></pre>
<p>A Trait is a collection of functions that can be applied to a type (a built-in type, like <code>i32</code> or a type that we have defined with a struct, enum or type alias). A good example of a Trait is <a href="https://doc.rust-lang.org/std/string/trait.ToString.html#tymethod.to_string">ToString</a> which is part of the Rust standard library:</p>
<pre><code>pub trait ToString {
    fn to_string(&amp;self) -&gt; String;
}
</code></pre>
<p>Here&#8217;s a naive approach to implementing ToString on a custom struct:</p>
<pre><code>struct Monster {
  eyeball_count: i32,
}

impl ToString for Monster {
  fn to_string(&amp;self) -&gt; String {
    format!("{}-eyed {}", self.eyeball_count, "monster")
  }
}

fn main() {
  let m = Monster { eyeball_count: 3 };
  println!("We just created a {}!", m.to_string())
}
</code></pre>
<p>Experienced Rustaceans would rarely implement the above code, instead they might implement <a href="https://doc.rust-lang.org/std/fmt/trait.Display.html">std::fmt::Display</a> which provides additional functionality we probably want, so if I write this instead of <code>impl ToString for Monster</code>:</p>
<pre><code>impl fmt::Display for Monster {
  fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {
    write!(f, "{}-eyed {}", self.eyeball_count, "monster")
  }
}
</code></pre>
<p>Then our code that calls <code>to_string</code> will still work, but we can also provide the variable directly to println! (or format!) and it will also work:</p>
<pre><code>  println!("We just created a {}!", m);
</code></pre>
<p>This is because Rust allows for implementing functions on Traits in terms of a generic type.</p>
<h2>Traits in context</h2>
<p>Traits help break down what&#8217;s needed and make our code reusable and easier to maintain. Most libraries will use many Traits from the std libary, as well as their own Traits, which can make the learning curve a bit steep, but very flexible once you understand what they do.</p>
<p>So, as I&#8217;m learning, it helps me to spell everything out, but then I end up with code that was a bit hard to read. Check out this beauty that I wrote yesterday:</p>
<pre><code>async fn read_some&lt;R: AsyncRead + Send + Unpin&gt;(mut reader: R) -&gt; Result&lt;(), std::io::Error&gt;
</code></pre>
<p>I&#8217;m using Rust 1.39 with built-in <code>async fn</code> which means that the compiler will build me a future and I can declare as the return value to be whatever type that Future will ultimately produce (or simply what my function returns). In this case, I want to be able to pass in a <a href="https://docs.rs/tokio/0.2.10/tokio/net/struct.TcpStream.html">tokio::net::TcpStream</a> and also a &#8220;ReadHalf&#8221; that is returned from <a href="https://docs.rs/tokio/0.2.10/tokio/io/fn.split.html">split</a>.</p>
<p>My first attempt at refactoring was to do this:</p>
<pre><code>type Reader = AsyncRead + Send + Unpin;
</code></pre>
<p>The above code doesn&#8217;t do what I wanted. I&#8217;ve explained above that <code>type</code> creates an alias for a concrete type; however, when we provide Traits, it (unexpected for me) creates a &#8220;Trait object&#8221; which is not the abstract type I was looking for. What I wanted to do was to define a new Trait that composes the other traits, but has no implementation of its own.  Here&#8217;s the syntax I was looking for:</p>
<pre><code>trait Reader: AsyncRead + Send + Unpin { } 
impl&lt;T: AsyncRead + Send + Unpin&gt; Reader for T {}
</code></pre>
<p>which I can then use like this:</p>
<pre><code>async fn read_some&lt;R: Reader&gt;(mut reader: R) -&gt; Result&lt;(), std::io::Error&gt;
</code></pre>
<p>or in a slightly more readable form with <code>where</code>:</p>
<pre><code>async fn read_some&lt;R&gt;(mut reader: R) -&gt; Result&lt;(), std::io::Error&gt;
where R: AsyncReader  
</code></pre>
<p>If you want to see the working code, I have a few examples here: https://github.com/ultrasaurus/rust-tokio-proxy where each can be executed like this: <code>cargo run --example reader-type</code></p>
<hr />
<p>Many thanks to the Alice, David, Lucio and Jeb on Tokio discord who helped me understand types, traits and how they are used in tokio!</p>
	</div><!-- .entry-content -->
	
	<footer class="entry-meta">
		<span class="cat-links block">Posted in <a href="/category/code/" rel="category tag">code</a>.</span>	</footer><!-- #entry-meta -->
	
	</article><!-- #post-7004 -->
<article id="post-6995" class="post-6995 post type-post status-publish format-standard hentry category-code">
		
	<header class="page-header">
	<h1 class="entry-title"><a href="/2020/01/writing-c-library-in-rust/" title="Permalink to writing c library in rust" rel="bookmark">writing c library in rust</a></h1>		<div class="entry-meta">
			<span class="sep">Posted on </span><a href="/2020/01/writing-c-library-in-rust/" title="10:36 pm" rel="bookmark"><time class="entry-date" datetime="2020-01-15T22:36:12-08:00" pubdate>January 15, 2020</time></a><span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="/author/sarah/" title="View all posts by sarah" rel="author">sarah</a></span></span>		<span class="sep"> | </span>
		<span class="comments-link">
			<a href="/2020/01/writing-c-library-in-rust/#respond"><span class="leave-reply">Leave a reply</span></a>		</span>
				</div><!-- .entry-meta -->
			</header><!-- .entry-header -->

		<div class="entry-content clearfix">
		<p>I want to write a library in Rust that can be called from C and just as easily called from Rust code.  The tooling makes it pretty easy, but I had to look in a few places to figure how it is supposed to work and get tests running in both languages.</p>
<h1>C library</h1>
<p>To focus on the process of building and testing, the library will have a single function that adds two numbers.  I wrote it in pure C first:</p>
<p>lib.c</p>
<pre><code>int add(int a, int b) {
  return a + b;
}
</code></pre>
<p>lib.h</p>
<pre><code>int add(int a, int b);
</code></pre>
<p>main.c</p>
<pre><code>#include &lt;stdio.h&gt;
#include "lib.h"

int main() {
    int sum = add(1,2);
    printf("1 + 2 = %d\n", sum);
}
</code></pre>
<p>one-liner to compile and run the app</p>
<pre><code>gcc *.c -o app &amp;&amp; ./app
</code></pre>
<p>output: <code>1 + 2 = 3</code></p>
<p>then I wrote a simple automated test, based on <a href="https://eradman.com/posts/tdd-in-c.html">tdd blog post</a></p>
<h1>Rust library</h1>
<pre><code>cargo new add --lib
</code></pre>
<p>replace lib.rs with</p>
<pre><code>#[no_mangle]
pub extern "C" fn add(a: i32, b:i32) -&gt; i32 {
    a + b
}


#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
        use crate::add;
        assert_eq!(add(2,2), 4);
    }
}
</code></pre>
<p>build and run with <code>cargo test</code><br />
which should have output like</p>
<pre><code>$ cargo test
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running target/debug/deps/add-45abb08ccefdc53c

running 1 test
test tests::it_works ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out

   Doc-tests add

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out
</code></pre>
<h2>Compile as static library</h2>
<p>Add to <code>Cargo.toml</code></p>
<pre><code>[lib]
name = "add"
crate-type = ["staticlib"]  
</code></pre>
<p>Now <code>cargo build</code> generates a compiled library file: <code>target/debug/libadd.a</code>.  I could have stopped there, but I expect to iterate on this a bit and I had read about a crate that generates the C header file&#8230;</p>
<h2>Generate a header (command-line)</h2>
<p>First, install the lovely <a href="https://github.com/eqrion/cbindgen">cbindgen</a> crate (using &#8211;force just to make sure everything is up to date with the latest):</p>
<pre><code>cargo install --force cbindgen
</code></pre>
<p>the command-line tool is pretty neat:</p>
<pre><code>touch cbindgen.toml    # can be empty for defaults
cbindgen --config cbindgen.toml --crate add --output add.h
</code></pre>
<p>The above command will generate &#8220;add.h&#8221; file at the root of the crate.</p>
<h2>Generate a header (cargo build)</h2>
<p>I prefer to have the header generation integrated with cargo build (or at least I think I will).  Here are the steps:</p>
<p>Add to <code>Cargo.toml</code>:</p>
<pre><code>[build-dependencies]
cbindgen = "0.12"
</code></pre>
<p>By default, the header file is buried in <code>target/debug/build/add-...</code> with a bunch of intermediary build files.  I find that it is nice to put it at the root of my crate where it is easy to find. Below is a custom build file that puts it in the crate root (aka <code>CARGO_MANIFEST_DIR</code>, the directory that <code>Cargo.toml</code> is in).</p>
<p>build.rs:</p>
<pre><code>extern crate cbindgen;

use std::env;
use std::path::PathBuf;


fn main() {
  let crate_dir = PathBuf::from(env::var("CARGO_MANIFEST_DIR")
        .expect("CARGO_MANIFEST_DIR env var is not defined"));

  let config = cbindgen::Config::from_file("cbindgen.toml")
        .expect("Unable to find cbindgen.toml configuration file");

  cbindgen::generate_with_config(&amp;crate_dir, config)
        .expect("Unable to generate bindings")
        .write_to_file(crate_dir.join("add.h"));
}
</code></pre>
<p>As mentioned above, <code>cbindgen.toml</code> may be empty, but here&#8217;s some settings I like:</p>
<pre><code>include_guard = "add_h"
autogen_warning = "/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */"
language = "C"
includes = []
sys_includes = ["stdint.h"]
no_includes = true   
</code></pre>
<p>Confusingly <code>no_includes</code> means no <em>extra</em> includes.  I prefer to have only the ones that I know are needed, rather than some random list of &#8220;common&#8221; headers.</p>
<p>Here&#8217;s my generated header:</p>
<pre><code>#ifndef add_h
#define add_h

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include &lt;stdint.h&gt;

int32_t add(int32_t a, int32_t b);

#endif /* add_h */
</code></pre>
<h2>Putting it all together</h2>
<p>Example <code>main.c</code> in the root of the crate:</p>
<pre><code>#include &lt;stdio.h&gt;
#include "add.h"

int main() {
    int sum = add(1,2);
    printf("1 + 2 = %d\n", sum);
}
</code></pre>
<p>compile and run:</p>
<pre><code>gcc main.c add/target/debug/libadd.a -o app &amp;&amp; ./app
</code></pre>
<p>outputs: <code>1 + 2 = 3</code></p>
<p>This make me unreasonably happy.  Rust syntax can be a bit finicky and certainly takes a bit of getting used, but this kind of tooling could more than make up for that in accelerating the dev cycle.</p>
<p>For the full applications with a mini test suite in C, see <a href="https://github.com/ultrasaurus/rust-clib/tree/v0.1">github/ultrasaurus/rust-clib</a> &#8212; the v0.1 branch is from when this blog post was written.</p>
	</div><!-- .entry-content -->
	
	<footer class="entry-meta">
		<span class="cat-links block">Posted in <a href="/category/code/" rel="category tag">code</a>.</span>	</footer><!-- #entry-meta -->
	
	</article><!-- #post-6995 -->
<nav class="pagination pagination-centered clearfix"><ul class='page-numbers'>
	<li><span aria-current="page" class="page-numbers current">1</span></li>
	<li><a class="page-numbers" href="/author/sarah/page/2/">2</a></li>
	<li><a class="page-numbers" href="/author/sarah/page/3/">3</a></li>
	<li><a class="page-numbers" href="/author/sarah/page/4/">4</a></li>
	<li><span class="page-numbers dots">&hellip;</span></li>
	<li><a class="page-numbers" href="/author/sarah/page/226/">226</a></li>
	<li><a class="next page-numbers" href="/author/sarah/page/2/">Next &raquo;</a></li>
</ul>
</nav>	</div><!-- #content -->
	</section><!-- #primary -->

<section id="secondary" class="widget-area span4" role="complementary">
	<aside id="recent-comments-2" class="widget well widget_recent_comments"><h2 class="widget-title">Recent Comments</h2><ul id="recentcomments"><li class="recentcomments"><span class="comment-author-link"><a href='https://da.biomarmicrobialtechnologies.com/' rel='external nofollow ugc' class='url'>Silje Randrup</a></span> on <a href="/2003/08/the-history-of-the-letter-c/#comment-22370">the history of the letter &#8216;C&#8217;</a></li><li class="recentcomments"><span class="comment-author-link"><a href='http://x--x.us' rel='external nofollow ugc' class='url'>Paula</a></span> on <a href="/2003/08/the-history-of-the-letter-c/#comment-19549">the history of the letter &#8216;C&#8217;</a></li><li class="recentcomments"><span class="comment-author-link"><a href='http://x--x.us' rel='external nofollow ugc' class='url'>Michelle</a></span> on <a href="/2003/08/the-history-of-the-letter-c/#comment-19399">the history of the letter &#8216;C&#8217;</a></li><li class="recentcomments"><span class="comment-author-link">Craig</span> on <a href="/2019/10/http-3-starter-notes-rust-quiche/#comment-18963">http/3 starter notes, rust quiche</a></li><li class="recentcomments"><span class="comment-author-link">Kornel</span> on <a href="/2019/10/rust-whats-a-tuple-variant/#comment-18539">[rust] what&#8217;s a tuple variant?</a></li><li class="recentcomments"><span class="comment-author-link"><a href='https://apromixately.github.io' rel='external nofollow ugc' class='url'>Simon</a></span> on <a href="/2019/06/essential-rust-tools/#comment-13007">essential rust tools</a></li><li class="recentcomments"><span class="comment-author-link"><a href='https://balsamiq.com/company/' rel='external nofollow ugc' class='url'>balsamiqVal</a></span> on <a href="/2018/10/the-path-is-made-by-walking/#comment-9108">the path is made by walking</a></li><li class="recentcomments"><span class="comment-author-link">Jennifer</span> on <a href="/2018/07/optimize-for-results-not-optics/#comment-8193">optimize for results, not optics</a></li><li class="recentcomments"><span class="comment-author-link">Bernardo Gomes</span> on <a href="/2016/06/sailsjs-testing-patterns-trunctate-database/#comment-8058">sailsjs testing: how to truncate the database</a></li><li class="recentcomments"><span class="comment-author-link">Bernardo Gomes</span> on <a href="/2016/06/sailsjs-testing-patterns-trunctate-database/#comment-8057">sailsjs testing: how to truncate the database</a></li></ul></aside>
		<aside id="recent-posts-2" class="widget well widget_recent_entries">
		<h2 class="widget-title">Recent Posts</h2>
		<ul>
											<li>
					<a href="/2020/07/hope-is-not-a-strategy/">hope is not a strategy</a>
									</li>
											<li>
					<a href="/2020/01/duck-typing-in-rust-trait-vs-type/">duck typing in rust: trait vs type</a>
									</li>
											<li>
					<a href="/2020/01/writing-c-library-in-rust/">writing c library in rust</a>
									</li>
											<li>
					<a href="/2020/01/rust-on-heroku-with-hyper-http/">rust on heroku with hyper http</a>
									</li>
											<li>
					<a href="/2020/01/rust-on-heroku-with-async-await-and-tokio/">rust on heroku with async/await and tokio</a>
									</li>
											<li>
					<a href="/2019/12/patterns-of-actions-are-a-making/">patterns of actions are a making</a>
									</li>
											<li>
					<a href="/2019/12/memory-safety-necessary-not-sufficient/">memory safety: necessary, not sufficient</a>
									</li>
											<li>
					<a href="/2019/12/brief-history-of-rtmp-future-thoughts/">brief history of rtmp + future thoughts</a>
									</li>
											<li>
					<a href="/2019/12/rust-2020/">rust 2020: fulfill the promise</a>
									</li>
											<li>
					<a href="/2019/11/nut-loaf-with-red-pepper-sauce/">nut loaf with red pepper sauce</a>
									</li>
											<li>
					<a href="/2019/10/http-3-starter-notes-rust-quiche/">http/3 starter notes, rust quiche</a>
									</li>
											<li>
					<a href="/2019/10/rust-whats-a-tuple-variant/">[rust] what&#8217;s a tuple variant?</a>
									</li>
											<li>
					<a href="/2019/08/graph-in-rust-using-petgraph/">graph in rust using petgraph</a>
									</li>
											<li>
					<a href="/2019/06/debugging-openssl-shared-libary/">debugging openssl shared libary</a>
									</li>
											<li>
					<a href="/2019/06/digital-identity-how-to-verify-trust/">digital identity: how to verify trust?</a>
									</li>
											<li>
					<a href="/2019/06/essential-rust-tools/">essential rust tools</a>
									</li>
											<li>
					<a href="/2019/05/learning-scala-with-graphics/">learning scala with graphics</a>
									</li>
											<li>
					<a href="/2019/04/when-reality-is-broken-change-the-rules/">when reality is broken, change the rules</a>
									</li>
											<li>
					<a href="/2019/04/subverting-saurons-business-model/">subverting Sauron&#8217;s business model</a>
									</li>
											<li>
					<a href="/2019/02/firebase-auth-migration-from-rails-and-devise/">firebase auth migration from rails/devise</a>
									</li>
					</ul>

		</aside></section><!-- #secondary .widget-area -->
				<footer id="colophon" role="contentinfo" class="span12">
										<div id="page-footer" class="well clearfix">
						<span class="credits alignleft">&copy; 2021 <a href="/">the evolving ultrasaurus</a>, all rights reserved.</span>						<div id="site-generator">
							<a	href="http://wordpress.org/"
								title="Semantic Personal Publishing Platform"
								target="_blank"
								rel="generator">Proudly powered by WordPress</a>
						</div>
					</div><!-- #page-footer .well .clearfix -->
									</footer><!-- #colophon -->
							</div><!-- #page -->
		</div><!-- .container -->
	<!-- 42 queries. 0.358 seconds. -->
	<script type='text/javascript' src='/wp-content/themes/the-bootstrap/js/bootstrap.min.js?ver=2.0.3' id='tw-bootstrap-js'></script>
<script type='text/javascript' src='/wp-content/themes/the-bootstrap/js/the-bootstrap.min.js?ver=2.0.1' id='the-bootstrap-js'></script>
<script type='text/javascript' src='/wp-includes/js/wp-embed.min.js?ver=5.7.1' id='wp-embed-js'></script>
	</body>
</html>
